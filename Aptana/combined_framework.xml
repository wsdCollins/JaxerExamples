<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<javascript>
    <overview>The Jaxer server framework contains functions and code that run only on the server.</overview>
    <class type="Function" superclass="Object">
        <description>A collection of Jaxer extensions for the JavaScript Function object</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="proxy" access="read-write" scope="instance" type="Boolean">
                <description>Use the proxy property to specify if this function should be callable from the client. If a function is not marked for proxy, it will not be callable on the server. Valid values are &quot;true&quot; or &quot;false&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="runat" access="read-write" scope="instance" type="String">
                <description>Use the runat property inside of a &quot;script&quot; tag to specify whether to run the JavaScript on the server-side, client-side, or both. Use this property to inject proxies into the client. Valid values are &quot;client&quot;, &quot;server,&quot; &quot;both&quot;, &quot;server-proxy&quot;, &quot;server-nocache&quot;, &quot;both-proxy&quot;, and &quot;both-nocache&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="JSON" superclass="Object">
        <description>An object that exposes native functions for constructing and parsing JSON data strings. A synonym for Jaxer.Overrides.JSON.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="decode" scope="static">
                <description>Returns the JavaScript value represented by the given JSON string. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.parse, Jaxer.Overrides.JSON.decode, and JSON.parse</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="JSON.encode"/>
                    <reference name="JSON.stringify"/>
                </references>
                <parameters>
                    <parameter name="text" usage="required" type="String">
                        <description>The JSON string describing the value to be created</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The value value represented by the JSON string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="encode" scope="static">
                <description>Returns a JSON string representation of its argument. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.stringify, JSON.encode, and JSON.stringify</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="JSON.decode"/>
                    <reference name="JSON.parse"/>
                </references>
                <parameters>
                    <parameter name="value" usage="required" type="Object">
                        <description>The value whose JSON string representation is to be returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The JSON string representation of the value</description>
                    </return-type>
                </return-types>
            </method>
            <method name="parse" scope="static">
                <description>Returns the JavaScript value represented by the given JSON string. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.decode, Jaxer.Overrides.JSON.parse, and JSON.decode</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="JSON.encode"/>
                    <reference name="JSON.stringify"/>
                </references>
                <parameters>
                    <parameter name="text" usage="required" type="String">
                        <description>The JSON string describing the value to be created</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The value value represented by the JSON string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="stringify" scope="static">
                <description>Returns a JSON string representation of its argument. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.encode, JSON.encode, and JSON.stringify</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="JSON.decode"/>
                    <reference name="JSON.parse"/>
                </references>
                <parameters>
                    <parameter name="value" usage="required" type="Object">
                        <description>The value whose JSON string representation is to be returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The JSON string representation of the value</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer" superclass="Object">
        <description>The Jaxer namespace.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="lastScriptRunat" access="read-write" scope="static" visibility="advanced" type="String">
                <description>The value of the runat attribute of the last script block encountered.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="pageWindow" access="read-write" scope="static" visibility="advanced" type="ChromeWindow">
                <description>This is the global execution context for JavaScript code you define in (or load into) a page on the server. It&apos;s aliased as window in the page, so it behaves just like the window global object on the client (browser).&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="buildNumber" access="read-write" scope="static" type="String">
                <description>This property exposes the current build number of the Jaxer engine</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="corePreferences" access="read-write" scope="static" type="Object">
                <description>This gives read-only access to the Jaxer Core&apos;s preferences, each of which become a property on this object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="embeddedClientFramework" access="read-write" scope="static" type="String">
                <description>If Jaxer.Config.EMBEDDED_CLIENT_FRAMEWORK_SRC has been set, it&apos;s assumed to be the path to the embeddable (and usually compressed) version of the Jaxer client-side framework. This file is read once at server startup and kept in memory, to be embedded in pages that may require it. You can change this behavior using Jaxer.Response.prototype.setClientFramework.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isOnServer" access="read-write" scope="static" type="Boolean">
                <description>True on the server side, false on the client (browser).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="onloadEnabled" access="read-write" scope="static" type="Boolean">
                <description>This starts out as null at the start of every request. If you set it to true, handlers for the onload event registered via addEventListener or window.onload will be called, regardless of Jaxer.Config.ONLOAD_ENABLED; if you set it to false, they will not be called, regardless of Jaxer.Config.ONLOAD_ENABLED. Thus, it is used to override Jaxer.Config.ONLOAD_ENABLED for the current request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="proxies" access="read-write" scope="static" type="Function[]">
                <description>Adding functions (or their names) to this array is equivalent to setting their proxy property to true. To enforce no proxies, overriding any proxy property or runat=&quot;server-proxy&quot;, set Jaxer.proxies = null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="request" access="read-write" scope="static" type="Jaxer.Request">
                <description>Contains information and methods about the current request</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="response" access="read-write" scope="static" type="Jaxer.Response">
                <description>Contains information and methods about how to respond to the current request</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="responseErrorPage" access="read-write" scope="static" type="String">
                <description>If Jaxer.Config.RESPONSE_ERROR_PAGE has been set, it&apos;s assumed to be the path to a file containing the error page to return when an error has occurred during the response. This file is read once at server startup and kept in memory, to be returned as required. If Config.RESPONSE_ERROR_PAGE is not set, a default HTML string is used. You can change the behavior of the framework when it encounters errors serving requests using Jaxer.Config.DISPLAY_ERRORS.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="include" visibility="advanced" scope="static">
                <description>Loads and evaluates JavaScript from the given location against the given global execution context. This is a low-level wrapper around &quot;@mozilla.org/moz/jssubscript-loader;1&quot; and mozIJSSubScriptLoader.loadSubScript. It&apos;s best to use the higher-level Jaxer.Includer.load(src, global, runat) which is also conveniently available as Jaxer.load(src, global, runat) inside any Jaxer server-side page (where global is defaulted to window).&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The url of the file to include, either as an absolute URL in the form &quot;file:///...&quot; or relative to the current executable&apos;s folder (with or without the &quot;resource:///&quot; prefix.</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>An optional global context in which to evaluate the script.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyFatal" visibility="advanced" scope="static">
                <description>Notifies the framework that a fatal error has occurred, one which will require fixing and restarting Jaxer. How this is handled is then determined by the Jaxer.Config settings.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="error" usage="required" type="Object">
                        <description>The error describing what happened. If the framework has already been notified of an error, this error is not used.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="load" scope="static">
                <description>Loads a JavaScript file and evaluates it.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="src" usage="required" type="String">
                        <description>The URL from which the JavaScript file should be retrieved. If the src is an absolute file://... URL then it is retrieved directly from the file system, otherwise it is retrieved via a web request.</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>The global (usually a window object) on which to evaluate it. By default, it is the current window object of the page.</description>
                    </parameter>
                    <parameter name="runat" usage="optional" type="String">
                        <description>The value of the effective runat &quot;attribute&quot; to use when evaluating this code. By default, it uses the same runat attribute as the last evaluated script block.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="loadAllExtensions" scope="static">
                <description>Loads all extensions from the folder defined in Config.EXTENSIONS_DIR.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="loadExtension" scope="static">
                <description>Loads a framework extension (already defined in memory). If the namespaceObject defines an onLoad method, it will be called (without arguments)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The (unique) name to use for this extension</description>
                    </parameter>
                    <parameter name="namespaceObject" usage="required" type="Object">
                        <description>The object holding all the members of this extension</description>
                    </parameter>
                </parameters>
            </method>
            <method name="Server" scope="static">
                <description>Holds the proxy functions for calling server functions that were designated with runat=&quot;both-proxy&quot; (or equivalent), to prevent function name collisions. So e.g. if a function getName() is defined with runat=&quot;both-proxy&quot;, in the browser you can call getName() to use the client-side function or Jaxer.Server.getName() to use the server-side function. Jaxer.Server holds both the synchronous and asynchronous versions of the proxies (e.g. Jaxer.Server.getName() and Jaxer.Server.getName.async()).</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="setEvent" scope="static">
                <description>Used to set events on DOM elements such that they &quot;do the right thing&quot; both client-side and server-side. On the client, this acts as expected, setting a property with the name eventName (e.g. onclick) on the DOM element. On the server, the eventName attribute is set on the DOM element so it can be serialized with the DOM before sending to the client. If the handler is a (server side) function with a name, the attribute&apos;s value is handler.name + &quot;()&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="domElement" usage="required" type="Object">
                        <description>The element on which to set the event</description>
                    </parameter>
                    <parameter name="eventName" usage="required" type="String">
                        <description>The name of the event to set</description>
                    </parameter>
                    <parameter name="handler" usage="required" type="Object">
                        <description>The handler function, or the body (as a string)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setTitle" scope="static">
                <description>Sets the title of the document and works on either the server or the client.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="title" usage="required" type="String">
                        <description>The text of the title</description>
                    </parameter>
                </parameters>
            </method>
            <method name="unloadExtension" scope="static">
                <description>Unloads a previously-loaded framework extension. If its namespaceObject defines an onUnload method, it will be called (without arguments)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name used to load this extension</description>
                    </parameter>
                    <parameter name="noWarnings" usage="required" type="Boolean">
                        <description>Whether to warn if the extension was not loaded when this was called, or its namespaceObject was not there.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.App" superclass="Object">
        <description>Class for the current app&apos;s metadata</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>The constructor of an object that describes the current app&apos;s metadata</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="props" usage="required" type="Object">
                        <description>The properties to use for initializing this application: urlTest, name, db, path, etc.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.App">
                        <description>Returns an instance of App</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="APP_KEY" access="read-write" scope="instance" type="String">
                <description>The fully-evaluated key to use when persisting or restoring values in the scope of the current application, using Jaxer.application. If this app&apos;s &quot;appKey&quot; property was a function, it will have been evaluated to a string using the current request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.appKey"/>
                </references>
            </property>
            <property name="appKey" access="read-write" scope="instance" type="String">
                <description>The key to use when persisting or restoring values in the scope of the current application, using Jaxer.application. This can be a string or a function: the function takes the request&apos;s parsedUrl as its sole parameter, and returns the key. The key should be unique across all applications. The appKey will first default to the application name if not specified, then finally to the default appKey in the case of the standard install the default appKey will be localhost:8081</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.application"/>
                    <reference name="Jaxer.App.prototype.APP_KEY"/>
                </references>
            </property>
            <property name="db" access="read-write" scope="instance" type="Object">
                <description>The database connection parameters to use by default for the current application. This can be an object or a function: the function takes the app&apos;s name and the request&apos;s parsedUrl as its two parameters, and returns the database connection parameters to use.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.DB"/>
                </references>
            </property>
            <property name="DB" access="read-write" scope="instance" type="Object">
                <description>The fully-evaluated database parameters to use by default for the current application. If this app&apos;s &quot;db&quot; property was a function, it will have been evaluated to an object using the current request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.DB"/>
                </references>
            </property>
            <property name="handler" access="read-write" scope="instance" type="String">
                <description>For service-type (not page-type) requests where Jaxer is the handler (and it&apos;s not a callback), this determines how the request is handled. It can be a string or a function: the function takes the app&apos;s name and the request&apos;s parsedUrl as its two parameters, and is executed right after the (empty) DOM is created and ready. If it returns a string, or if the handler property is already a string, that string should be the file://...-type URL location of a JavaScript file to be loaded and executed to handle this request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.HANDLER"/>
                </references>
            </property>
            <property name="HANDLER" access="read-write" scope="instance" type="String">
                <description>The fully-evaluated file://...-type URL location of a JavaScript file to be loaded and executed to handle this request If this app&apos;s &quot;handler&quot; property was a function, it will have been evaluated to a string using the current request. If this app&apos;s &quot;handler&quot; function did not return a string, this property will be set to null, and no JavaScript file will be loaded.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.handler"/>
                </references>
            </property>
            <property name="name" access="read-write" scope="instance" type="String">
                <description>The name to use for the current application. This can be a string or a function: the function takes the request&apos;s parsedUrl as its sole parameter, and returns the name. The name should be unique across all applications (this is checked at server start).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.NAME"/>
                </references>
            </property>
            <property name="NAME" access="read-write" scope="instance" type="String">
                <description>The fully-evaluated name to use for the current application. If this app&apos;s &quot;name&quot; property was a function, it will have been evaluated to a string using the current request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.name"/>
                </references>
            </property>
            <property name="PAGE_KEY" access="read-write" scope="instance" type="String">
                <description>The fully-evaluated key to use when persisting or restoring values in the scope of the current page, using Jaxer.page or Jaxer.sessionPage. If this app&apos;s &quot;pageKey&quot; property was a function, it will have been evaluated to a string using the current request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.pageKey"/>
                </references>
            </property>
            <property name="pageKey" access="read-write" scope="instance" type="String">
                <description>The key to use when persisting or restoring values in the scope of the current page, using Jaxer.page or Jaxer.sessionPage. This can be a string or a function: the function takes the request&apos;s parsedUrl as its sole parameter, and returns the key. The key should be unique across all pages for any application.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.pageKey"/>
                    <reference name="Jaxer.App.prototype.PAGE_KEY"/>
                </references>
            </property>
            <property name="path" access="read-write" scope="instance" type="String">
                <description>The filesystem path to use by default for the current application. This can be a string or a function: the function takes the app&apos;s name and the request&apos;s parsedUrl as its two parameters, and returns the parameters to use.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.PATH"/>
                </references>
            </property>
            <property name="PATH" access="read-write" scope="instance" type="String">
                <description>The fully-evaluated filesystem path to use by default for the current application. If this app&apos;s &quot;path&quot; property was a function, it will have been evaluated to a string using the current request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.App.prototype.path"/>
                </references>
            </property>
            <property name="urlTest" access="read-write" scope="instance" type="Function">
                <description>The object that determines whether this app should be used for the current request. If a function, it takes the request&apos;s parsedUrl as its sole parameter, and returns true if this app should be used. If a regular expression, it should match against the request&apos;s parsedUrl&apos;s path if this app should be used. If a string, it should match the beginning of the request&apos;s parsedUrl&apos;s path if this app should be used.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="callHandler" scope="instance">
                <description>Calls the handler function for this app, if there is a handler and it&apos;s a function. In any case it also sets the HANDLER property for this app.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="initPath" scope="instance">
                <description>Initializes (creates if necessary) the path for this app, if any</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
        </methods>
    </class>
    <class type="Jaxer.BinarySocket" superclass="Object">
        <description>Network socket utility object for simple binary socket access.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>The constructor of a network socket object used for binary data operations</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.BinarySocket">
                        <description>Returns an instance of BinarySocket.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="available" scope="instance">
                <description>How many bytes are currently available on the stream?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Number">
                        <description>the number of bytes available</description>
                    </return-type>
                </return-types>
            </method>
            <method name="close" scope="instance">
                <description>Close the socket</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="flush" scope="instance">
                <description>Flush the socket&apos;s output stream</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="open" scope="instance">
                <description>Open the socket for communication</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="host" usage="required" type="String">
                        <description>The host to connect to</description>
                    </parameter>
                    <parameter name="port" usage="required" type="Number">
                        <description>The port on which to connect</description>
                    </parameter>
                </parameters>
            </method>
            <method name="readByteArray" scope="instance">
                <description>Read binary data from the socket into an array of bytes (integers)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="count" usage="required" type="Number">
                        <description>How many bytes to read</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>The bytes read in, as an array of integers</description>
                    </return-type>
                </return-types>
            </method>
            <method name="readByteString" scope="instance">
                <description>Read binary data from the socket into a string</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="count" usage="required" type="Number">
                        <description>How many bytes to read</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The bytes read in, as a string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="writeByteArray" scope="instance">
                <description>Write a binary (byte) data array of integers to the socket</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="data" usage="required" type="Array">
                        <description>The binary data array to write</description>
                    </parameter>
                </parameters>
            </method>
            <method name="writeByteString" scope="instance">
                <description>Write a binary (byte) data string to the socket</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="data" usage="required" type="Array">
                        <description>The binary data string to write</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Cache" superclass="Object">
        <description>A namespace object holding functions and members for in-memory caches</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
    </class>
    <class type="Jaxer.Callback" superclass="Object">
        <description>Callback namespace for remote functions.</description>
        <browsers>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="POLLING_PERIOD" access="read-write" scope="static" visibility="advanced" type="Number">
                <description>The default polling interval used to see whether the XMLHttpRequest for an async callback function call has returned. Initially set to 11.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="METHOD" access="read-write" scope="static" type="String">
                <description>The default HTTP method to use for callback function requests. Initially set to &quot;POST&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="TIMEOUT" access="read-write" scope="static" type="Number">
                <description>The default number of milliseconds to wait before timing out an async callback function request. Initially set to 10 * 1000 (10 seconds).</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="getBaseUrl" visibility="advanced" scope="static">
                <description>Returns the URL for use in callbacks, without any parameters&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>The URL to GET or POST to</description>
                    </return-type>
                </return-types>
            </method>
            <method name="onfailureAsync" visibility="advanced" scope="static">
                <description>The default method used to handle errors when calling remote functions asynchronously. It alerts the error message if Jaxer.ALERT_CALLBACK_ERRORS is true, and in any case throws an error&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="error" usage="required" type="Object">
                        <description>If an error was thrown during the request, it would be here.</description>
                    </parameter>
                    <parameter name="extra" usage="required" type="Object">
                        <description>Any extra information passed in during the call to Jaxer.XHR.send() to help identify the request. Currently, there is one String-valued property on this object: functionName.</description>
                    </parameter>
                    <parameter name="xhr" usage="required" type="XMLHttpRequest">
                        <description>The XMLHttpRequest object that encountered the error. This might be null, if an error was encountered in creating the XMLHttpRequest.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="ontimeoutAsync" visibility="advanced" scope="static">
                <description>The default method used to handle timeouts when calling remote functions asynchronously. It alerts the error message if Jaxer.ALERT_CALLBACK_ERRORS is true, and in any case throws an error&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="error" usage="required" type="Error">
                        <description>The timeout error object encountered, having a &quot;timeout&quot; property with its value indicating the timeout (in milliseconds) used in this request.</description>
                    </parameter>
                    <parameter name="extra" usage="required" type="Object">
                        <description>Any extra information passed in during the call to Jaxer.XHR.send() to help identify the request. Currently, there is one String-valued property on this object: functionName.</description>
                    </parameter>
                    <parameter name="xhr" usage="required" type="XMLHttpRequest">
                        <description>The XMLHttpRequest object that encountered the error.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="processReturnValue" visibility="advanced" scope="static">
                <description>Transforms the raw result data from the XHR call into the expected data format.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionName" usage="required" type="String">
                        <description>The name of the function that was called</description>
                    </parameter>
                    <parameter name="rawResult" usage="required" type="String">
                        <description>The raw (text) data returned from the XHR call</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The returned data in the format the remote function returned it</description>
                    </return-type>
                </return-types>
            </method>
            <method name="createQuery" scope="static">
                <description>Creates a query string for calling a remote function with the given arguments</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionName" usage="required" type="String">
                        <description>The name of the remote function</description>
                    </parameter>
                    <parameter name="args" usage="required" type="Object">
                        <description>The arguments of the remote function. This can be a single (primitive) object or an array of (primitive) objects</description>
                    </parameter>
                    <parameter name="initialNumberToSkip" usage="optional" type="Number">
                        <description>Optionally, how many of the arguments (counting from the beginning) to not pass to the remote function</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The query string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="formUrlEncode" scope="static">
                <description>URL Encode a query string.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="str" usage="required" type="String">
                        <description>Query string to be converted.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A URL-encoding string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getQueryParts" scope="static">
                <description>Returns a hash of the &quot;form-like&quot; name-value pairs needed to call a JavaScript function on the server. These can be submitted to the server as a GET request (but see Callback.getUrl which wraps this in a Url for you) or as a POST request, and usually via an XMLHttpRequest mechanism. &lt;br&gt;&lt;br&gt; The server listens for two special name-value pairs: &quot;resultAs&quot; and &quot;paramsAs&quot;. &lt;br&gt;&lt;br&gt; If present, resultAs specifies how the result of functionToCall is to be returned to the client. Valid values for resultAs are &quot;text&quot;, &quot;object&quot;, and &quot;wrappedObject&quot; (default), which return the result of the callback as a single string, a JSON object literal, or a JSON object literal with metadata, respectively. &lt;br&gt;&lt;br&gt; If present, &quot;paramsAs&quot; specifies how the request is to be translated into arguments for the functionToCall. Valid values for &quot;paramsAs&quot; are &quot;text&quot;, &quot;object&quot;, and &quot;default&quot;, which hands the GET or POST data to functionToCall as a single string, a single hash (object literal) of name-value pairs, or as regular JavaScript arguments with values extracted from paramsToPass, respectively.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionToCall" usage="required" type="Object">
                        <description>Name of the function (or the function itself) to be called server-side</description>
                    </parameter>
                    <parameter name="paramsToPass" usage="required" type="Object">
                        <description>An array of parameters (or the single parameter) to pass to the function</description>
                    </parameter>
                    <parameter name="..." usage="required" type="String">
                        <description>Optional parameter(s) to append to the end of the URL as part of the query string. String arguments should be &quot;name=value&quot; pairs joined by &quot;&amp;&quot; characters. If arguments are a hash, their properties are added to the hash.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The hash of the information needed to invoke the function</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getUrl" scope="static">
                <description>Returns the URL that can be used as a GET request to call a JavaScript function on the server. &lt;br&gt;&lt;br&gt; The server listens for two special properties: &quot;resultAs&quot; and &quot;paramsAs&quot;. &lt;br&gt;&lt;br&gt; If present, resultAs specifies how the result of functionToCall is to be returned to the client. Valid values for resultAs are &quot;text&quot;, &quot;object&quot;, and &quot;wrappedObject&quot; (default), which return the result of the callback as a single string, JSON object literal, or JSON object literal with metadata, respectively. &lt;br&gt;&lt;br&gt; If present, &quot;paramsAs&quot; specifies how the request is to be translated into arguments for the functionToCall. Valid values for &quot;paramsAs&quot; are &quot;text&quot;, &quot;object&quot;, and &quot;default&quot;, which hands the GET or POST data to functionToCall as a single string, a single hash (object literal) of name-value pairs, or as regular JavaScript arguments with values extracted from paramsToPass, respectively.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionToCall" usage="required" type="Object">
                        <description>Name of the function (or the function itself) to call server-side</description>
                    </parameter>
                    <parameter name="paramsToPass" usage="required" type="Object">
                        <description>An array of parameters (or the single parameter) to pass to the function</description>
                    </parameter>
                    <parameter name="..." usage="required" type="String">
                        <description>Optional parameter(s) to append to the end of the URL as part of the query string. Strings will be appended to the end of the URL separated by a &quot;&amp;&quot;. Hashes will be appended as &amp;name1=value&amp;name2=value2...</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The URL that can be called (via a GET) to invoke the function</description>
                    </return-type>
                </return-types>
            </method>
            <method name="hashToQuery" scope="static">
                <description>Converts a javascript object (hash) into a http query string.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="hash" usage="required" type="Object">
                        <description>Hash of name value pairs to be converted.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The query string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="invokeFunction" scope="static">
                <description>This method invokes a synchronous call to a proxied JavaScript function on the server from the client side javascript.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionName" usage="required" type="String">
                        <description>The name of the remote function to call on the server</description>
                    </parameter>
                    <parameter name="args" usage="required" type="Object">
                        <description>A single argument, or an array of arguments, to be passed to the remote function on the server</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The value returned by the remote function on the server</description>
                    </return-type>
                </return-types>
            </method>
            <method name="invokeFunctionAsync" scope="static">
                <description>This method invokes an asynchronous call to a proxied javascript function on the server from the client side javascript. A callback function needs to be provided and is called once the XHR request completes or times out.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="callback" usage="required" type="Object">
                        <description>If this is a function, this is the function to call upon a successful return from the remote invocation. Its arguments are what the remote function on the server returned. &lt;br&gt;&lt;br&gt; If this is an array, its elements are as follows (each may be null): &lt;ol&gt; &lt;li&gt; the callback function; &lt;/li&gt; &lt;li&gt; a function to call on an error, with arguments being the error, the &quot;extra&quot; information object that has the functionName as its one property, and the XMLHttpRequest object used for the call if the call itself encountered an error; &lt;/li&gt; &lt;li&gt; the timeout to use, in milliseconds (defaults to Jaxer.Callback.TIMEOUT). Use 0 to wait indefinitely.&lt;/li&gt; &lt;/ol&gt; &lt;br&gt;&lt;br&gt; If this is an object, its &quot;callback&quot;, &quot;errorHandler&quot;, and timeout properties will be used, if any.</description>
                    </parameter>
                    <parameter name="functionName" usage="required" type="String">
                        <description>The name of the remote function</description>
                    </parameter>
                    <parameter name="args" usage="required" type="Object">
                        <description>A single argument, or an array of arguments, to be passed to the remote function on the server</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remote" scope="static">
                <description>A short convenience function to call a remote function, synchronously or asynchronously based on whether or not you specify a callback function as the third argument.</description>
                <browsers>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionName" usage="required" type="String">
                        <description>The name of the remote function to call</description>
                    </parameter>
                    <parameter name="args" usage="required" type="Object">
                        <description>A single argument, or an array of arguments, to pass to the remote function</description>
                    </parameter>
                    <parameter name="callback" usage="optional" type="Object">
                        <description>If this is not specified, the call will be synchronous. &lt;br&gt; If this is specified, the call will be asynchronous. &lt;br&gt;&lt;br&gt; If this is a function, this is the function to call upon a successful return from the remote invocation. Its arguments are what the remote function on the server returned. &lt;br&gt;&lt;br&gt; If this is an array, its elements are as follows (each may be null): &lt;ol&gt; &lt;li&gt; the callback function; &lt;/li&gt; &lt;li&gt; a function to call on an error, with arguments being the error, the &quot;extra&quot; information object that has the functionName as its one property, and the XMLHttpRequest object used for the call if the call itself encountered an error; &lt;/li&gt; &lt;li&gt; the timeout to use, in milliseconds (defaults to Jaxer.Callback.TIMEOUT). Use 0 to wait indefinitely. &lt;/li&gt; &lt;/ol&gt; &lt;br&gt;&lt;br&gt; If this is an object, its &quot;callback&quot;, &quot;errorHandler&quot;, and timeout properties will be used, if any.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>If synchronous, the value returned by the remote function; if asynchronous, an id by which the remote call can be canceled via Jaxer.XHR.cancel()</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.CallbackManager" superclass="Object">
        <description>A namespace object holding functions and members for preparing the callback data at the end of page processing that will allow the page to call back its server-side functions.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="getCallbackKey" visibility="advanced" scope="static">
                <description>Generate the unique key by which callbacks are stored/cached&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="pageName" usage="required" type="String">
                        <description>The name identifying the page that was served</description>
                    </parameter>
                    <parameter name="crc32" usage="required" type="String">
                        <description>The crc32 signature of the callback contents, used to see whether the code was changed</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The key uniquely identifying the callback page</description>
                    </return-type>
                </return-types>
            </method>
            <method name="processCallbacks" visibility="advanced" scope="static">
                <description>Process all functions for possible caching, proxying, and callback invocation.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="doc" usage="required" type="Document">
                        <description>The current document&apos;s DocumentElement. This is used to create elements in the active DOM as needed.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.ClientError" superclass="Object">
        <description>An error that can be thrown on the client during a callback</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>An error that can be thrown on the client during a callback. If you want to throw a meaningful (i.e., non-generic) error on the browser from a callback, throw a new Jaxer.ClientError -- just be mindful not to pass sensitive server-side information. On the client, a new Error will be thrown by your proxy, or you can specify you&apos;d like something else to be thrown.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="info" usage="required" type="String">
                        <description>The descriptive text of the Error to be thrown, or an object whose properties will be copied to the Error object to be thrown. But if options.wrapped is specified to be false, this argument itself is thrown on the client.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>A hashmap of name-value property pairs. Currently one option is supported: if there is a &apos;wrapped&apos; property and it is set to false, the info object itself is thrown on the client, rather than a new Error.</description>
                    </parameter>
                </parameters>
            </constructor>
        </constructors>
    </class>
    <class type="Jaxer.Config" superclass="Object">
        <description>Namespace containing the config properties.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="ALERT_CALLBACK_ERRORS" access="read-write" scope="static" type="Boolean">
                <description>A Boolean flag to indicate whether to popup a window.alert(...) when a callback returns an error. By default this is set to true; if this is not the desired behavior in production, override it in your local Jaxer config.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.CALLBACK_ERROR_MESSAGE"/>
                    <reference name="Jaxer.Config.CALLBACK_FATAL_ERROR_MESSAGE"/>
                </references>
            </property>
            <property name="AUTO_CREATE_APP_PATHS" access="read-write" scope="static" type="Boolean">
                <description>Whether to automatically create folders at the locations specified by each app&apos;s (resolved) PATH property, either at server start (if the app&apos;s name is a string) or when the app is first requested (if the app&apos;s name is a function of the request). This is true by default.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="CACHE_USING_SOURCE_CODE" access="read-write" scope="static" type="String">
                <description>A Boolean flag to indicate where to cache as source or bytecode. This is set to true by default, so it&apos;s easy in development time to read what was cached rather than caching the bytecode. Override it to false for better performance.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="CALLBACK_ERROR_MESSAGE" access="read-write" scope="static" type="String">
                <description>Contains the message to display when a callback error occurs.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.ALERT_CALLBACK_ERRORS"/>
                </references>
            </property>
            <property name="CALLBACK_FATAL_ERROR_MESSAGE" access="read-write" scope="static" type="String">
                <description>Contains the message to display when a fatal callback error occurs.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.ALERT_CALLBACK_ERRORS"/>
                </references>
            </property>
            <property name="CALLBACK_URI" access="read-write" scope="static" type="String">
                <description>The prefix for sending callback requests back to Jaxer via the web server, usually &quot;/jaxer-callback&quot;. It should correspond to how your web server is configured.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="CLIENT_FRAMEWORK_SRC" access="read-write" scope="static" type="String">
                <description>The URL at which the client should look for the Jaxe client-side framework, if EMBEDDED_CLIENT_FRAMEWORK_SRC is undefined or null. To embed the client part of the Jaxer framework in the web page, specify its location in EMBEDDED_CLIENT_FRAMEWORK_SRC Alternatively, to have the web server serve its contents, &lt;BR&gt;1) comment out EMBEDDED_CLIENT_FRAMEWORK_SRC, &lt;BR&gt;2) copy the client framework to somewhere the web server can reach it, and &lt;BR&gt;3) set CLIENT_FRAMEWORK_SRC to the src of the script element that will be inserted into the page &lt;BR&gt;EMBEDDED_CLIENT_FRAMEWORK_SRC: &quot;resource:///framework/clientFramework_compressed.js&quot;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="COMMAND_LINE_PARAMS" access="read-write" scope="static" type="Object">
                <description>If any config-type parameters were specified on the command line when launching Jaxer, they will be included as properties of this object. Note: This is created and populated inside aptEventHandler.js</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="DEFAULT_APP" access="read-write" scope="static" type="Object">
                <description>Contains the parameters that will be used for pages and applications that don&apos;t match any of the custom entries in Jaxer.Config.apps, as defined in configApps.js. This property is best managed, if needed, in the local_jaxer/conf/configApps.js which will not be overwritten by subsequent jaxer updates. Changes in that file will get picked up automatically on restart. Note: even though this is created as a plain object (hashmap) in config.js, it is wrapped up into a Jaxer.App object upon server start</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="DEFAULT_DB" access="read-write" scope="static" type="Object">
                <description>Contains the parameters for a connection object of one of the supported DB implementations. At the very least, the IMPLEMENTATION property must be defined and be the name of one of the supported implementations in the DB namespace (e.g. &quot;SQLite&quot;, &quot;MySQL&quot;). The remaining parameters have all the information required to connect to the database. This will be used for pages and applications that don&apos;t match any of the custom entries in Jaxer.Config.apps, as defined in configApps.js. This property is best managed in the local_jaxer/conf/configApps.js which will not be overwritten by subsequent jaxer updates. Changes in that file will get picked up automatically on restart.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.DB.MySQL.Connection"/>
                    <reference name="Jaxer.DB.SQLite.Connection"/>
                </references>
            </property>
            <property name="DEFAULT_EMITTED_SCRIPT_TYPE" access="read-write" scope="static" type="String">
                <description>The value of the type attribute on all emitted script tags -- namely the ones created via Jaxer.Util.DOM.createScript, which in particular the Jaxer framework uses to inject script tags into the browser-bound page. Specifying attributes explicitly when calling Jaxer.Util.DOM.createScript will avoid using this value. If this is not set or empty, no type attribute will be added by default. This itself defaults to &apos;text/javascript&apos;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="DEFAULT_PATH_BASE" access="read-write" scope="static" type="String">
                <description>For convenience, a central starting point from which to build paths used as default locations where apps read and write files. To make it easier to use cross-platform, should include trailing path separator.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="DEV_MODE" access="read-write" scope="static" type="Boolean">
                <description>A flag to allow a central place to flip the operational behavior of a Jaxer instance from development to production mode. CAUTION: this should be set to false in a production environment to prevent sensitive information from getting to the browser!</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.DISPLAY_ERRORS"/>
                    <reference name="Jaxer.Config.ALERT_CALLBACK_ERRORS"/>
                    <reference name="Jaxer.Config.RELOAD_AUTOLOADS_EVERY_PAGE_REQUEST"/>
                    <reference name="Jaxer.Config.CACHE_USING_SOURCE_CODE"/>
                </references>
            </property>
            <property name="DISPLAY_ERRORS" access="read-write" scope="static" type="Boolean">
                <description>A Boolean flag to indicate whether errors should be displayed to the user. By default this is set to true, which is fit for development/debug mode only. CAUTION: In a production environment this should be set to false so that sensitive server content is not displayed to the client -- instead users will see a generic error page.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.RESPONSE_ERROR_PAGE"/>
                    <reference name="Jaxer.Config.FATAL_ERROR_PAGE"/>
                </references>
            </property>
            <property name="EXPOSE_JAXER" access="read-write" scope="static" type="Boolean">
                <description>If this is true, a conventional &quot;X-Powered-By&quot; HTTP header is added to every response processed by Jaxer indicating that is was processed by Jaxer and giving the Jaxer version. This is set to false by default for added security.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="EXTENSIONS_DIR" access="read-write" scope="static" type="String">
                <description>The folder containing JavaScript extension scripts. All JavaScript files in this folder will be loaded on startup after the Jaxer framework.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="FATAL_ERROR_PAGE" access="read-write" scope="static" type="String">
                <description>Contains the path (including filename) of the html file to be displayed instead of the detailed error message when a fatal error occurs, if Jaxer.Config.DISPLAY_ERRORS is set to false (i.e. in production mode). By default this is &quot;resource:///content/fatalError.html&quot;, and if it is not set a default HTML string is used.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.RESPONSE_ERROR_PAGE"/>
                    <reference name="Jaxer.Config.DISPLAY_ERRORS"/>
                </references>
            </property>
            <property name="FRAMEWORK_DB" access="read-write" scope="static" type="Object">
                <description>Contains the parameters for a connection object of one of the supported DB implementations. At the very least, the IMPLEMENTATION property must be defined and be the name of one of the supported implementations in the DB namespace (e.g. &quot;SQLite&quot;, &quot;MySQL&quot;). The remaining parameters have all the information required to connect to the database. This will be used for the Jaxer framework&apos;s internal persistence needs. It defaults to using SQLite. This property is best managed in the local_jaxer/conf/config.js which will not be overwritten by subsequent jaxer updates. Changes in that file will get picked up automatically on restart.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="FRAMEWORK_DIR" access="read-write" scope="static" type="String">
                <description>Indicates where to find the framework content, usually a mozilla resource url relative to the jaxer executable install folder. By default it is &quot;resource:///framework&quot;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="FRAMEWORK_FILE_NAME" access="read-write" scope="static" type="String">
                <description>The name of the JavaScript file containing the Jaxer framework code. By default it is &quot;serverFramework.js&quot;. It is located in the folder indicated by Jaxer.Config.FRAMEWORK_DIR</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="INCLUDE_ERRORS_ARE_RESPONSE_ERRORS" access="read-write" scope="static" type="Boolean">
                <description>A flag to indicate whether errors during fetching of a file to be included are to be handled as response errors, e.g. using the response error page. By default this is true.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.RESPONSE_ERROR_PAGE"/>
                    <reference name="Jaxer.Config.DISPLAY_ERRORS"/>
                </references>
            </property>
            <property name="LIBRARY_FILE_NAMES" access="read-write" scope="static" type="String">
                <description>Additional libraries to load on Jaxer startup. Multiple library names should be separated by spaces, commas, or semicolons. By default this is &quot;JSLib.js&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="LOCAL_CONF_DIR" access="read-write" scope="static" type="String">
                <description>Contains the path to the folder containing local variants of the various Jaxer config-type files, which will override settings in the corresponding default files. The local files will not be overwritten by a Jaxer update. Relative paths should be anchored from the Jaxer executable folder.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[ "../local_jaxer/conf"]]></example>
                </examples>
                <references>
                    <reference name="Jaxer.System.executableFolder"/>
                </references>
            </property>
            <property name="LOCAL_CONFIG_LOADED" access="read-write" scope="static" type="Boolean">
                <description>A flag that indicates (by convention) that the local config file was loaded during startup.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="LOCAL_EXTENSIONS_DIR" access="read-write" scope="static" type="String">
                <description>Contains the path (including filename) to the local folder containing JavaScript extension scripts. All JavaScript file in this folder will be loaded on startup after the Jaxer framework. Relative paths should be anchored from the Jaxer executable folder.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.System.executableFolder"/>
                    <reference name="Jaxer.Config.EXTENSIONS_DIR"/>
                </references>
            </property>
            <property name="LOG_FILE_NAME" access="read-write" scope="static" type="String">
                <description>Contains the name of the log file to use if Jaxer.Config.USE_CORE_LOG_FILE is set to false. By default this is neither set nor used.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.USE_CORE_LOG_FILE"/>
                </references>
            </property>
            <property name="MOZ_PREFS" access="read-write" scope="static" type="Object">
                <description>To set any of Mozilla preferences, add properties to Jaxer.Config.MOZ_PREFS. The name of each property should correspond exactly to the Mozilla preference, and the value should be an integer, boolean, or string. To see some of the available options, launch Firefox and browse to about:config</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="ONLOAD_ENABLED" access="read-write" scope="static" type="Boolean">
                <description>If this is true, any onload event listeners added programatically (via addEventListener or window.onload) will fire server-side, right after any onserverload handling. Note that an onload attribute on the body element will not be used server-side regardless of this setting. This is set to true by default. You can also override it on a specific request by setting Jaxer.onloadEnabled.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.onloadEnabled"/>
                </references>
            </property>
            <property name="RELOAD_AUTOLOADS_EVERY_PAGE_REQUEST" access="read-write" scope="static" type="Boolean">
                <description>When true, the Jaxer framework will force reloading from source every script tag marked with autoload=&quot;true&quot; during every request to the page (not during callbacks), rather than using the cached version which is refreshed only on server restart. This is intended for use while developing, as it allows you to edit autoloaded file and see the changes without restarting Jaxer. This is set to &quot;true&quot; by default and should be overridden to &quot;false&quot; for production.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="REQUEST_BODY_AS" access="read-write" scope="static" type="Object">
                <description>This determines the type returned by Jaxer.request.body, based on the Content-Type of the request. The keys are the various mime-type strings, the same as the Content-Type HTTP header or what Jaxer.request.contentType returns. The mime-type of the request must begin with the key for the value to be used. The values are one of the strings &apos;string&apos;, &apos;byteArray&apos;, or &apos;stream&apos; (case-insensitively) -- any other value is treated as if the key were absent. Jaxer.request.body will be a string, a byte array (array of integers), or a stream, respectively. Note that you can always just access these properties directly as Jaxer.request.bodyAsString, Jaxer.request.bodyAsByteArray, and Jaxer.request.bodyAsStream.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Request.prototype.body"/>
                    <reference name="Jaxer.Request.prototype.bodyAsString"/>
                    <reference name="Jaxer.Request.prototype.bodyAsByteArray"/>
                    <reference name="Jaxer.Request.prototype.bodyAsStream"/>
                </references>
            </property>
            <property name="RESPONSE_ERROR_PAGE" access="read-write" scope="static" type="String">
                <description>Contains the path (including filename) of the html file to be displayed instead of the detailed error message when a response error occurs, if Jaxer.Config.DISPLAY_ERRORS is set to false (i.e. in production mode). By default this is &quot;resource:///content/responseError.html&quot;, and if it is not set a default HTML string is used.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.FATAL_ERROR_PAGE"/>
                    <reference name="Jaxer.Config.DISPLAY_ERRORS"/>
                </references>
            </property>
            <property name="REWRITE_RELATIVE_URL" access="read-write" scope="static" type="String">
                <description>To include scripts, access files, and so on, Jaxer may need to fetch content from the web server. If your web server needs to be reached via a different domain/port than the incoming request, uncomment and change the following to replace the protocol://domain:port with this value. For example, setting it to &quot;http://192.168.0.1:8082&quot; will mean that Jaxer will request content from your web server using the IP address 192.168.0.1 on port 8082. This is neither used nor set by default.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="REWRITE_RELATIVE_URL_REGEX" access="read-write" scope="static" type="String">
                <description>A regular expression used to test the requested url and determine whether or not to apply the Jaxer.Config.REWRITE_RELATIVE_URL If this is not set, and Jaxer.Config.REWRITE_RELATIVE_URL is set, then all requests to the web server are rewritten using Jaxer.Config.REWRITE_RELATIVE_URL. For example, setting it to &quot;^http\\:\\/\\/my.domain.com&quot; will mean that Jaxer will request content from your web server using Jaxer.Config.REWRITE_RELATIVE_URL only for URLs starting with &quot;http://my.domain.com&quot;. This is neither used nor set by default.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.REWRITE_RELATIVE_URL"/>
                </references>
            </property>
            <property name="REWRITE_TO_FILE_URL_REGEX" access="read-write" scope="static" type="RegExp">
                <description>If a URL matches this regular expression, it will be treated as a file URL even when resolved for Web-type operations such as within script tags, in Jaxer.load(), or in Web.get(). This is useful for accessing files that reside the jaxer-include folder which are protected from being served out by the web server.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="SERVICE_ERROR_MESSAGE" access="read-write" scope="static" type="String">
                <description>Contains the message to display when a non-callback service error occurs.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="SERVICE_FATAL_ERROR_MESSAGE" access="read-write" scope="static" type="String">
                <description>Contains the message to display when a fatal callback error occurs.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="UNCAUGHT_ERRORS_ARE_RESPONSE_ERRORS" access="read-write" scope="static" type="Boolean">
                <description>A flag to indicate whether uncaught JavaScript errors are to be handled as response errors, e.g. using the response error page. By default this is true.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.RESPONSE_ERROR_PAGE"/>
                    <reference name="Jaxer.Config.DISPLAY_ERRORS"/>
                </references>
            </property>
            <property name="USE_CORE_LOG_FILE" access="read-write" scope="static" type="Boolean">
                <description>A boolean flag to indicate whether to use the Jaxer core logfile for framework and application logging. By default this is true.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Config.LOG_FILE_NAME"/>
                </references>
            </property>
        </properties>
    </class>
    <class type="Jaxer.Container" superclass="Object">
        <description>Container object that is used for all types of containers (e.g. session, sessionPage, etc).</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>This is the contructor for the Container object, used for all types of containers (session, sessionPage, etc).&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="type" usage="required" type="String">
                        <description>The type of the container</description>
                    </parameter>
                    <parameter name="key" usage="required" type="String">
                        <description>The key for the specific instance of the container (e.g. the sessionPage container is per page, and the page&apos;s key is used here)</description>
                    </parameter>
                    <parameter name="persistor" usage="required" type="Object">
                        <description>An instance of the persistor (e.g. a DBPersistor) to be used to persist this container</description>
                    </parameter>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of this container</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Container">
                        <description>Returns an instance of Container.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
    </class>
    <class type="Jaxer.CoreEvents" superclass="Object">
        <description>A namespace object holding functions and members used to handle the events fired from the Jaxer Core into the Jaxer Framework.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="addHandler" visibility="advanced" scope="static">
                <description>Bind a handler to the specified eventType.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="eventType" usage="required" type="String">
                        <description>One of the allowed event types (see Jaxer.CoreEvents.getEventNames)</description>
                    </parameter>
                    <parameter name="handlerFunction" usage="required" type="Function">
                        <description>A function reference invoked when the event specified by eventType is triggered</description>
                    </parameter>
                    <parameter name="testFunction" usage="optional" type="Function">
                        <description>An optional function to be evaluated when the event is about to be fired; it&apos;ll only be fired if the function evaluates to true. The one argument passed to this function is the request (same as Jaxer.request)</description>
                    </parameter>
                    <parameter name="handlerFunctionObject" usage="optional" type="Object">
                        <description>Optional object on which to call the handlerFunction (it becomes the value of &apos;this&apos; within the function).</description>
                    </parameter>
                </parameters>
            </method>
            <method name="clearHandlers" visibility="advanced" scope="static">
                <description>Removes the handlers for the specified eventType.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="eventType" usage="required" type="String">
                        <description>One of the allowed event types (see Jaxer.CoreEvents.getEventNames)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fire" visibility="advanced" scope="static">
                <description>Triggers the handlers for the specified eventType.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="eventType" usage="required" type="String">
                        <description>One of the allowed event types (see Jaxer.CoreEvents.getEventNames)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getEventNames" visibility="advanced" scope="static">
                <description>Returns a (copy of the) array of framework event names to which you can register handlers&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Array">
                        <description>n array of handler names (modifying it has no impact on CoreEvents)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getHandlers" visibility="advanced" scope="static">
                <description>Returns an array of handlers for the specified eventType.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="eventType" usage="required" type="String">
                        <description>One of the allowed event types (see Jaxer.CoreEvents.getEventNames)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>An array of handlers</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isScriptEvaluateEnabled" visibility="advanced" scope="static">
                <description>Should the given script element be evaluated (server-side) by Jaxer Core rather than be handled separately by the Jaxer framework or be ignored by Jaxer as far as evaluation goes. Note that if the script element has a src attribute then the framework will inline a call to load the script from the src, and that&apos;s why this method returns a true in that case.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="scriptElement" usage="required" type="Object">
                        <description>The DOM script element</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if it should be evaluated, false if it should not</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isScriptLoadEnabled" visibility="advanced" scope="static">
                <description>Should the given script element be loaded and evaluated (server-side) by the Jaxer framework&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="scriptElement" usage="required" type="Object">
                        <description>The DOM script element</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if it should be loaded and valuated, false if it should not</description>
                    </return-type>
                </return-types>
            </method>
            <method name="removeHandler" visibility="advanced" scope="static">
                <description>Remove an existing handler on an event type&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="eventType" usage="required" type="String">
                        <description>One of the allowed event types (see Jaxer.CoreEvents.getEventNames)</description>
                    </parameter>
                    <parameter name="handlerFunction" usage="required" type="Function">
                        <description>The handler to remove</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DB" superclass="Object">
        <description>The namespace that holds functions and other objects for working with a database.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="Connection" access="read-write" scope="static" visibility="advanced" type="Object">
                <description>Holds a reference to the constructor of the current default database connection used for database interactions, e.g. by Jaxer.DB.execute. This is determined by the settings in configApps.js and in config.js. It can be different for different requests. Its type is Jaxer.DB.MySQL.Connection or Jaxer.DB.SQLite.Connection, etc.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="defaultConnections" access="read-write" scope="static" visibility="advanced" type="Object">
                <description>A hashmap that holds references to the currently-recognized default database connections, according to configApps.js, config.js, and the page requests encountered so far. It&apos;s keyed off the (resolved) name of the current app.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="FrameworkConnection" access="read-write" scope="static" visibility="advanced" type="Object">
                <description>Holds a reference to the constructor of the current default connection used for the Jaxer framework&apos;s internal database interactions, e.g. by Jaxer.DB.frameworkExecute. This is determined by the settings in config.js. Its type is Jaxer.DB.MySQL.Connection or Jaxer.DB.SQLite.Connection, etc.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="lastInsertId" access="read-write" scope="static" visibility="advanced" type="Number">
                <description>When you INSERT a row that has an AUTO_INCREMENT-type column in the default framework database, the value of that column in this row is automatically set by the database. To know what it was set to (an integer), retrieve the lastInsertId right after you execute the INSERT statement. Under other circumstances, the behavior of lastInsertId depends on the database implementation; for example, SQLite always returns the rowid of the last successfully inserted row, whether or not it had an INTEGER PRIMARY KEY AUTO_INCREMENT column.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="lastInsertRowId" access="read-write" scope="static" visibility="advanced" type="Number">
                <description>When you INSERT a row that has an AUTO_INCREMENT-type column in the default framework database, the value of that column in this row is automatically set by the database. To know what it was set to (an integer), retrieve the lastInsertRowId right after you execute the INSERT statement. Under other circumstances, the behavior of lastInsertRowId depends on the database implementation; for example, SQLite always returns the rowid of the last successfully inserted row, whether or not it had an INTEGER PRIMARY KEY AUTO_INCREMENT column.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="connection" access="read-write" scope="static" type="Object">
                <description>Holds a reference to the current default connection that will be used for database interactions, e.g. by Jaxer.DB.execute. This is determined by the settings in configApps.js and in config.js. It can be different for different requests. Its type is Jaxer.DB.MySQL.Connection or Jaxer.DB.SQLite.Connection, etc.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.DB.Connection"/>
                </references>
            </property>
            <property name="frameworkConnection" access="read-write" scope="static" type="Object">
                <description>Holds a reference to the current default connection that will be used for the Jaxer framework&apos;s internal database interactions, e.g. by Jaxer.DB.frameworkExecute. This is determined by the settings in config.js. Its type is Jaxer.DB.MySQL.Connection or Jaxer.DB.SQLite.Connection, etc.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.DB.FrameworkConnection"/>
                </references>
            </property>
            <property name="lastInsertId" access="read-write" scope="static" type="Number">
                <description>When you INSERT a row that has an AUTO_INCREMENT-type column in the default developer database, the value of that column in this row is automatically set by the database. To know what it was set to (an integer), retrieve the lastInsertId right after you execute the INSERT statement. Under other circumstances, the behavior of lastInsertId depends on the database implementation; for example, SQLite always returns the rowid of the last successfully inserted row, whether or not it had an INTEGER PRIMARY KEY AUTO_INCREMENT column.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="lastInsertRowId" access="read-write" scope="static" type="Number">
                <description>When you INSERT a row that has an AUTO_INCREMENT-type column in the default developer database, the value of that column in this row is automatically set by the database. To know what it was set to (an integer), retrieve the lastInsertRowId right after you execute the INSERT statement. Under other circumstances, the behavior of lastInsertRowId depends on the database implementation; for example, SQLite always returns the rowid of the last successfully inserted row, whether or not it had an INTEGER PRIMARY KEY AUTO_INCREMENT column.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="closeAllConnections" visibility="advanced" scope="static">
                <description>Closes all the default DB connections that are open. This is called by the framework when there is a fatal or response error, or after every request if CLOSE_AFTER_REQUEST is set to true in the connection&apos;s configuration parameters&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="onlyIfCloseAfterRequest" usage="required" type="Boolean">
                        <description>Set this to true if you only want to close connections whose CLOSE_AFTER_REQUEST parameter is true</description>
                    </parameter>
                </parameters>
            </method>
            <method name="frameworkExecute" visibility="advanced" scope="static">
                <description>Executes the given SQL query string on the default framework database (as defined in Jaxer.Config.DB_FRAMEWORK). If the SQL includes ?&apos;s (question marks) as parameter placeholders, the values of those parameters should be passed in as extra arguments to this function, either as individual arguments or as a single array.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
		rs = Jaxer.DB.frameworkExecute("SELECT * FROM containers");
			rs = Jaxer.DB.frameworkExecute("SELECT * FROM containers WHERE id=? AND name=?", myId, myName);
			rs = Jaxer.DB.frameworkExecute("SELECT * FROM containers WHERE id=? AND name=?", [myId, myName]);
		</pre>]]></example>
                </examples>
                <references>
                    <reference name="Jaxer.DB.ResultSet"/>
                </references>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The SQL to execute.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.ResultSet">
                        <description>The results of the query (which may be an empty resultset)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="initDefault" visibility="advanced" scope="static">
                <description>Initializes a default database connection, which entails creating it (not necessarily opening it) and adding it to the Jaxer.DB.defaultConnections hashmap&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The (resolved) name of the app for which this connection should be used</description>
                    </parameter>
                    <parameter name="params" usage="required" type="Object">
                        <description>The parameters to use for the database connection. In particular this object must have an IMPLEMENTATION property equal to &quot;MySQL&quot;, &quot;SQLite&quot;, or other supported databases.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDefault" visibility="advanced" scope="static">
                <description>Sets the given named connection as the default one from now on (though this is by default set anew for each request). If the given name is not already a recognized (i.e. initialized) connection, it will first be initialized.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The (resolved) name of the app for which this connection should be used</description>
                    </parameter>
                    <parameter name="params" usage="optional" type="Object">
                        <description>The parameters to use for the database connection if the name is not already an initialized connection. In particular this object must have an IMPLEMENTATION property equal to &quot;MySQL&quot;, &quot;SQLite&quot;, or other supported databases.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="sqlToString" visibility="advanced" scope="static">
                <description>Attempts to convert the given sql to a string, if needed, and then trim it. If the conversion fails or the string is empty, throws a Jaxer.Exception.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="sql" usage="required" type="Object">
                        <description>The sql to convert to a string, if needed</description>
                    </parameter>
                    <parameter name="log" usage="optional" type="Jaxer.Log.ModuleLogger">
                        <description>The logger into which errors should be logged. Defaults to the DB module&apos;s logger.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The string representation of the sql.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="execute" scope="static">
                <description>Executes the given SQL query string on the current default database (as defined in configApps.js). If the SQL includes ?&apos;s (question marks) as parameter placeholders, the values of those parameters should be passed in as extra arguments to this function, either as individual arguments or as a single array. If the last argument is a (non-Array) object, it is used to pass in options. Currently two options are supported: dateHandler and useLocalTimezone. If dateHandler is given, it should be a function that takes the raw MySQL date/time/datetime string representation of a returned cell value, and a string describing the declared type, and returns the desired JavaScript representation. If dateHandler is not given, set useLocalTimezone to true to store date/time values using the local timezone. Otherwise, by default they are stored as UTC.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
		rs = Jaxer.DB.execute("SELECT * FROM myTable");
			rs = Jaxer.DB.execute("SELECT * FROM myTable WHERE id=? AND zip=?", myId, myZip);
			rs = Jaxer.DB.execute("SELECT * FROM myTable WHERE id=? AND zip=?", [myId, myZip]);
		</pre>]]></example>
                </examples>
                <references>
                    <reference name="Jaxer.DB.ResultSet"/>
                </references>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The SQL to execute.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.ResultSet">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned. On MySQL only: if multiple queries were issued (or a stored procedure was executed) the result will be a corresponding array of Jaxer.DB.ResultSet or Number objects.</description>
                    </return-type>
                    <return-type type="Number">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned. On MySQL only: if multiple queries were issued (or a stored procedure was executed) the result will be a corresponding array of Jaxer.DB.ResultSet or Number objects.</description>
                    </return-type>
                    <return-type type="Object[]">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned. On MySQL only: if multiple queries were issued (or a stored procedure was executed) the result will be a corresponding array of Jaxer.DB.ResultSet or Number objects.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="mapExecute" scope="static">
                <description>Prepares the given SQL query string on the current default database (as defined in configApps.js) and then iteratively executes it over the given array of parameters.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
			[rsA, rsB] = Jaxer.DB.mapExecute("SELECT * FROM myTable WHERE id=?", [idA, idB]);
			[rsA, rsB] = Jaxer.DB.mapExecute("SELECT * FROM myTable WHERE id=? AND zip=?", [ [idA, zipA], [idB, zipB] ]);
		</pre>]]></example>
                </examples>
                <references>
                    <reference name="Jaxer.DB.ResultSet"/>
                </references>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The SQL to execute, using ?&apos;s (question marks) as parameter placeholders</description>
                    </parameter>
                    <parameter name="arrayOfParameters" usage="required" type="Array">
                        <description>An array of parameters to use for each execution. Each element of the array may itself be a single value or an array of values (corresponding to the ?&apos;s in the SQL)</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>An optional hashmap of options. Currently three options are supported: flatten, dateHandler, and useLocalTimezone. If flatten is true, the returned result will be a single ResultSet with its rows being the concatenated rows of each query. If dateHandler is given, it should be a function that takes the raw MySQL date/time/datetime string representation of a returned cell value, and a string describing the declared type, and returns the desired JavaScript representation. If dateHandler is not given, set useLocalTimezone to true to store date/time values using the local timezone. Otherwise, by default they are stored as UTC.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="mapFrameworkExecute" scope="static">
                <description>Prepares the given SQL query string on the default framework database (as defined in Jaxer.Config.DB_FRAMEWORK) and then iteratively executes it over the given array of parameters.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
			[rsA, rsB] = Jaxer.DB.mapFrameworkExecute("SELECT * FROM containers WHERE id=?", [idA, idB]);
			[rsA, rsB] = Jaxer.DB.mapFrameworkExecute("SELECT * FROM containers WHERE id=? AND name=?", [ [idA, nameA], [idB, nameB] ]);
		</pre>]]></example>
                </examples>
                <references>
                    <reference name="Jaxer.DB.ResultSet"/>
                </references>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The SQL to execute, using ?&apos;s (question marks) as parameter placeholders</description>
                    </parameter>
                    <parameter name="arrayOfParameters" usage="required" type="Array">
                        <description>An array of parameters to use for each execution. Each element of the array may itself be a single value or an array of values (corresponding to the ?&apos;s in the SQL)</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>An optional hashmap of options. Currently one option is supported: flatten. If its value is true, the returned result will be a single ResultSet with its rows being the concatenated rows of each query.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>A corresponding array of Jaxer.DB.ResultSet&apos;s for each query, or a single Jaxer.DB.ResultSet if the &apos;flatten&apos; option is true.</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DB.MySQL" superclass="Object">
        <description>Namespace that holds the MySQL implementation of the Jaxer DB API.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="createDB" scope="static">
                <description>Creates a new database named according to connectionParams.NAME, if one does not already exist.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="connectionParams" usage="required" type="Object">
                        <description>A hashmap of required parameters to connect to the database. Required properties are HOST (hostname of the server), USER (username for authentication), PASS (password for authentication), NAME (database name), PORT (connection port, default value is &quot;3306&quot;), and CLOSE_AFTER_EXECUTE (whether to close the connection after each call to execute, default is open).</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.MySQL.Connection">
                        <description>Returns and instance of Connection.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="validateConnectionParameters" scope="static">
                <description>Validate the provided connection parameters</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="connectionParams" usage="required" type="Object">
                        <description>A hashmap of required parameters to connect to the database. Required properties are HOST (hostname of the server), USER (username for authentication), PASS (password for authentication), NAME (database name)</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DB.MySQL.Connection" superclass="Object">
        <description>Creates a new connection to the given databaseName (file).</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new connection to the given databaseName. The resulting connection object is the only way to interact with the database.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="connectionParams" usage="required" type="Object">
                        <description>A hashmap of parameters for connecting to the database. Required properties are: &lt;ul&gt; &lt;li&gt;HOST (hostname of the server), &lt;/li&gt; &lt;li&gt;USER (username for authentication), &lt;/li&gt; &lt;li&gt;PASS (password for authentication, can be the empty string), and&lt;/li&gt; &lt;li&gt;NAME (database name, can be the empty string).&lt;/li&gt; &lt;/ul&gt; Optional parameters are: &lt;ul&gt; &lt;li&gt;PORT (connection port, default value is 3306),&lt;/li&gt; &lt;li&gt;SOCKET (absolute path to socket file, default value is null),&lt;/li&gt; &lt;li&gt;AUTORECONNECT (whether to autoreconnect the connection is the MySQL server drops the connection, default is true), and&lt;/li&gt; &lt;li&gt;CLOSE_AFTER_EXECUTE (whether to close the connection after each call to execute, default is false), and&lt;/li&gt; &lt;li&gt;CLOSE_AFTER_REQUEST (whether to close the connection after each request, default is true).&lt;/li&gt; &lt;/ul&gt;</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.MySQL.Connection">
                        <description>Returns an instance of Connection.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="implementation" access="read-write" scope="instance" type="String">
                <description>Returns the string identifying the database implementation of this connection. You can compare this e.g. to Jaxer.DB.SQLite.IMPLEMENTATION or Jaxer.DB.MySQL.IMPLEMENTATION</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isOpen" access="read-write" scope="instance" type="Boolean">
                <description>Is the connection currently open? Recall that even if the answer is no the connection would automatically be opened when needed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="lastInsertId" access="read-write" scope="instance" type="Number">
                <description>Returns the unique ID used for an AUTO_INCREMENT column in the most recent successful INSERT command on the current connection. If no successful INSERTs have ever occurred on this connection, 0 is returned. Note that unsuccessful INSERTs do not change this value. This is a synonym for lastInsertRowId. See http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html for more details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="lastInsertRowId" access="read-write" scope="instance" type="Number">
                <description>Returns the unique ID used for an AUTO_INCREMENT column in the most recent successful INSERT command on the current connection. If no successful INSERTs have ever occurred on this connection, 0 is returned. Note that unsuccessful INSERTs do not change this value. This is a synonym for lastInsertId. See http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html for more details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="version" access="read-write" scope="instance" type="String">
                <description>Returns the string identifying the version of the database to which you are connected.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="close" scope="instance">
                <description>Closes the connection if it&apos;s open. This is optional, and only does something if the connection is open.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="execute" scope="instance">
                <description>Executes the given sql using the connection. If the SQL includes ?&apos;s (question marks) as parameter placeholders, the values of those parameters should be passed in as extra arguments to this function, either as individual arguments or as a single array. If the last argument is a (non-Array) object, it is used to pass in options. Currently two options are supported: dateHandler and useLocalTimezone. If dateHandler is given, it should be a function that takes the raw MySQL date/time/datetime string representation of a returned cell value, and a string describing the declared type, and returns the desired JavaScript representation. If dateHandler is not given, set useLocalTimezone to true to store date/time values using the local timezone. Otherwise, by default they are stored as UTC.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
		rs = conn.execute("SELECT * FROM myTable");
			rs = conn.execute("SELECT * FROM myTable WHERE id=? AND zip=?", myId, myZip);
			rs = conn.execute("SELECT * FROM myTable WHERE id=? AND zip=?", [myId, myZip]);
		</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The sql statement to be executed as a prepared statement</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.ResultSet">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned. If multiple queries were issued (or a stored procedure was executed) the result will be a corresponding array of Jaxer.DB.ResultSet or Number objects.</description>
                    </return-type>
                    <return-type type="Number">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned. If multiple queries were issued (or a stored procedure was executed) the result will be a corresponding array of Jaxer.DB.ResultSet or Number objects.</description>
                    </return-type>
                    <return-type type="Object[]">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned. If multiple queries were issued (or a stored procedure was executed) the result will be a corresponding array of Jaxer.DB.ResultSet or Number objects.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getLastInsertId" scope="instance">
                <description>Returns the unique ID used for an AUTO_INCREMENT column in the most recent successful INSERT command on the current connection. If no successful INSERTs have ever occurred on this connection, 0 is returned. Note that unsuccessful INSERTs do not change this value. This is the same as asking for the lastInsertId or lastInsertRowId properties. See http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html for more details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Number">
                        <description>The id, or 0</description>
                    </return-type>
                </return-types>
            </method>
            <method name="mapExecute" scope="instance">
                <description>Prepares the given SQL query string on the current default database (as defined in configApps.js) and then iteratively executes it over the given array of parameters.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
			[rsA, rsB] = conn.mapExecute("SELECT * FROM myTable WHERE id=?", [idA, idB]);
			[rsA, rsB] = conn.mapExecute("SELECT * FROM myTable WHERE id=? AND zip=?", [ [idA, zipA], [idB, zipB] ]);
		</pre>]]></example>
                </examples>
                <references>
                    <reference name="Jaxer.DB.ResultSet"/>
                </references>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The SQL to execute, using ?&apos;s (question marks) as parameter placeholders</description>
                    </parameter>
                    <parameter name="arrayOfParameters" usage="required" type="Array">
                        <description>An array of parameters to use for each execution. Each element of the array may itself be a single value or an array of values (corresponding to the ?&apos;s in the SQL)</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>An optional hashmap of options. Currently three options are supported: flatten, dateHandler, and useLocalTimezone. If flatten is true, the returned result will be a single ResultSet with its rows being the concatenated rows of each query. If dateHandler is given, it should be a function that takes the raw MySQL date/time/datetime string representation of a returned cell value, and a string describing the declared type, and returns the desired JavaScript representation. If dateHandler is not given, set useLocalTimezone to true to store date/time values using the local timezone. Otherwise, by default they are stored as UTC.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object[]">
                        <description>A corresponding array of Jaxer.DB.ResultSets or Numbers for each query, or a combined Jaxer.DB.ResultSet or Number if the &apos;flatten&apos; option is true. For SELECT-type queries one or more Jaxer.DB.ResultSets are returned; for INSERT/UPDATE/DELETE-type queries the number of affected rows is returned.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="open" scope="instance">
                <description>Opens the connection so queries can be executed. This is optional, since if the connection is not open when it&apos;s asked to execute some SQL, it will open the connection automatically. Also closing the connection is optional.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="test" scope="instance">
                <description>Tests the connection by trying to connect and catching and returning any error encountered. If the connection is successful, returns a null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="keepOpen" usage="required" type="Boolean">
                        <description>If true, the connection will be kept open (if the test was successful). If false, the connection will be left in the same state as before the test: if it was open before it will be kept open, otherwise it will be closed.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>If successful, returns null; if unsuccessful, returns the error. Usually you can use the error&apos;s sqlErrorCode and sqlErrorDescription to see what the error was (or just its toString() method).</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DB.ResultSet" superclass="Object">
        <description>Contains the returned value of a SQL query.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <examples>
            <example><![CDATA[If the third column is named "account" you can get to a given cell value
either through
resultSet.rows[10].account or through
resultSet.rowsAsArrays[10][2]]]></example>
        </examples>
        <constructors>
            <constructor scope="instance">
                <description>Returned value of a SQL query, containing the named rows and columns of the result and to be used as the return value of execute(). The rowsAsArray array is similar to the rows array but each row in it is an array itself: it consists of the cells in that row, in the same order as the columns array. To see if there is any data, check whether hasData is true or whether rows.length or rowsAsArrays.length exceed 0. To get a single result (the first column of the first row) grab singleResult.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.DB.ResultSet">
                        <description>Returns an instance of ResultSet.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="columns" access="read-write" scope="instance" type="Array">
                <description>An array of column names for all rows in this resultSet. TODO - Note that (depending on the DB &quot;driver&quot; implementation used) the columns array may be empty if there are no rows of data; this will be fixed in the future.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="finalRow" access="read-write" scope="instance" type="Array">
                <description>This returns the data in the last row of the resultSet as an object, or else it contains an empty object. (You can disambiguate DB nulls from no data by checking the hasData property or rows.length).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="firstRow" access="read-write" scope="instance" type="Array">
                <description>An alias of the Jaxer.DB.ResultSet.prototype.singleRow method</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.DB.ResultSet.prototype.singleRow"/>
                </references>
            </property>
            <property name="hasData" access="read-write" scope="instance" type="Boolean">
                <description>True if this resultSet contains any data, false otherwise.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="rows" access="read-write" scope="instance" type="Array">
                <description>The array of rows in the resultSet in the order retrieved from the database. Each row has properties corresponding to the column names in the returned data.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="rowsAsArrays" access="read-write" scope="instance" type="Array">
                <description>An alternate representation of the rows of the resultSet: each row is itself an array, containing the values (cells) in that row in the same order as the columns array.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="singleColumn" access="read-write" scope="instance" type="Array">
                <description>This returns the data in each of the first columns of the resultSet as an array, or else it contains an empty array. (You can disambiguate DB nulls from no data by checking the hasData property or rows.length). This is convenient for queries that are used to populate dropdowns.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="singleResult" access="read-write" scope="instance" type="Object">
                <description>This contains the first value (cell) in the first row in the resultSet, if any, or else it contains null. (You can disambiguate DB nulls from no data by checking the hasData property or rows.length). This is convenient for queries (e.g. &quot;SELECT COUNT(*) FROM mytable&quot;) that are known to return a single value.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="singleRow" access="read-write" scope="instance" type="Array">
                <description>This contains the data in the first row of the resultSet as an object, or else it contains an empty object. (You can disambiguate DB nulls from no data by checking the hasData property or rows.length). This is convenient for queries (e.g. &quot;SELECT * FROM mytable where key = &apos;value&apos;&quot;) that are known to return a single value.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="addRow" scope="instance">
                <description>Adds a row, where its structure is assumed to be the same as all the other rows.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="row" usage="required" type="Object">
                        <description>The row to add</description>
                    </parameter>
                </parameters>
            </method>
            <method name="close" scope="instance">
                <description>Closes this resultSet and empties its internal data structures. This is optional.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="columnsAsArray" scope="instance">
                <description>This return the data in the provided columns of the resultSet as an array, or else it contains null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="identifies" usage="required" type="Number">
                        <description>the columns to return, either as an array index value, or a column label value, you can specify 1 or more columns to be returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>A javascript array of arrays containg each of the values of the requested column from the current resultset</description>
                    </return-type>
                </return-types>
            </method>
            <method name="every" scope="instance">
                <description>every runs a function against each row in the recordset while that function is returning true. returns true if the function returns true for every row it could visit The function is invoked with three arguments: - the value of the current row in the resultset, - the index of the current row in the resultset, - an array representing the resultset being traversed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="extractColumns" scope="instance">
                <description>Returns an array of objects, one per row, that only have properties corresponding to the given columns.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="columns" usage="required" type="Array">
                        <description>The names of the columns that should be made available for each row.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>An array of simple objects, each with the requested properties.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="field" scope="instance">
                <description>For the current row pointed to by the cursor, returns the value of the field (column) at the given (0-based) index, the same as this.rowsAsArrays [ currentRowIndex ] [ fieldIndex ] Throws a Jaxer.Exception if fieldIndex is out of range.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fieldIndex" usage="required" type="Number">
                        <description>The 0-based index of the desired field (column), bounded by this.columns.length.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The value of the field (column)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="fieldByName" scope="instance">
                <description>For the current row pointed to by the cursor, returns the value of the field (column) at the given fieldName (column name), the same as this.rows [ currentRowIndex ] [ fieldName ] Throws a Jaxer.Exception if fieldName is not the name of a field (column).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fieldByName" usage="required" type="String">
                        <description>The name of the desired field (column), which should be an element of the Array this.columns.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The value of the field (column)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="fieldCount" scope="instance">
                <description>Returns the number of fields (columns) in this resultSet, the same as this.columns.length.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Number">
                        <description>The number of fields (columns)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="fieldName" scope="instance">
                <description>Returns the name of the column at the given (0-based) index, the same as this.columns [ fieldIndex ] . Throws a Jaxer.Exception if fieldIndex is out of range.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fieldIndex" usage="required" type="Number">
                        <description>The 0-based index of the desired field (column), bounded by this.columns.length.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The name of the field (column)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="filter" scope="instance">
                <description>filter returns a new array with all of the elements of this array for which the provided filtering function returns true. The function is invoked with three arguments: - the value of the current row in the resultset, - the index of the current row in the resultset, - an array representing the resultset being traversed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function">
                        <description>Function to test each row of the recordset</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="finalRowAsArray" scope="instance">
                <description>This contains the requested columns from the last row of the resultSet as an array, or else it contains an empty array.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="identifies" usage="required" type="Number">
                        <description>the columns to return, either as an array index value, or a column label value, you can specify 1 or more columns to be returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>A javascript array the values of the requested columns from the last row of the current resultset</description>
                    </return-type>
                </return-types>
            </method>
            <method name="forEach" scope="instance">
                <description>forEach executes the provided function (callback) once for each element present in the recordset. The callback is invoked with three arguments: - the value of the current row in the resultset, - the index of the current row in the resultset, - an array representing the resultset being traversed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function">
                        <description>Function to execute against each row of the recordset</description>
                    </parameter>
                </parameters>
            </method>
            <method name="indexOf" scope="instance">
                <description>indexOf compares the value of the requested column in each row of the results using strict equality (the same method used by the ===, or triple-equals, operator). it returns either the index of the first matched item or -1 if no items match</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="column" usage="required" type="Number"/>
                    <parameter name="value" usage="required" type="Object"/>
                    <parameter name="fromIndex" usage="required" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="indexOfColumn" scope="instance">
                <description>Returns the index of the column with the given name</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="columnName" usage="required" type="String">
                        <description>The textual name of the database column</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number">
                        <description>The 0-based index in the columns array (and in each row in the rows array)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isValidRow" scope="instance">
                <description>True if this resultSet&apos;s cursor is positioned on a valid row, which means you can access the row&apos;s data.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if positioned on a valid row, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="lastIndexOf" scope="instance">
                <description>indexOf compares the value of the requested column in each row of the results using strict equality (the same method used by the ===, or triple-equals, operator). it returns either the index of the last matched item or -1 if no items match</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="column" usage="required" type="Number"/>
                    <parameter name="value" usage="required" type="Object"/>
                    <parameter name="fromIndex" usage="required" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="lastRowAsArray" scope="instance">
                <description>An alias of the Jaxer.DB.ResultSet.prototype.finalRowAsArray method</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.DB.ResultSet.prototype.finalRowAsArray"/>
                </references>
            </method>
            <method name="map" scope="instance">
                <description>map runs a function on every row in the resultset and returns the results in an array. The row and index of the current item are passed as parameters to the current function.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="next" scope="instance">
                <description>Advances this resultSet&apos;s cursor to the next row of results. Use isValidRow() to determine if you&apos;ve reached the end of the rows.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="reduce" scope="instance">
                <description>reduce runs a function on every item in the resultset and collects the results returned. reduce executes the callback function once for each element present in the resultset, receiving four arguments: - the initial value (or value from the previous callback call), - the value of the current row of the resultset, - the current index, - an array representing the resultset over which iteration is occurring.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function"/>
                    <parameter name="initialValue" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="reduceRight" scope="instance">
                <description>reduceRight runs a function on every item in the resultset and collects the results returned, but in reverse order starting with the last element of the recordset. reduceRight executes the callback function once for each element present in the resultset, excluding holes in the array, receiving four arguments: - the initial value (or value from the previous callback call), - the value of the current row of the resultset, - the current index, - an array representing the resultset over which iteration is occurring.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function"/>
                    <parameter name="initialValue" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="singleRowAsArray" scope="instance">
                <description>An alias of the Jaxer.DB.ResultSet.prototype.singleRowAsArray method</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.DB.ResultSet.prototype.singleRowAsArray"/>
                </references>
            </method>
            <method name="singleRowAsArray" scope="instance">
                <description>This contains the requested columns from the first row of the resultSet as an array, or else it contains an empty array.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="identifies" usage="required" type="Number">
                        <description>the columns to return, either as an array index value, or a column label value, you can specify 1 or more columns to be returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>A javascript array the values of the requested columns from the first row of the current resultset</description>
                    </return-type>
                </return-types>
            </method>
            <method name="some" scope="instance">
                <description>some runs a function against each row in the recordset while that function until returning true. returns true if the function returns true for at least one row it could visit The function is invoked with three arguments: - the value of the current row in the resultset, - the index of the current row in the resultset, - an array representing the resultset being traversed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="split" scope="instance">
                <description>split runs a function against each row in the recordset. returns A two element array containing the recorset items for which the function returned true as the first element and the items which returned false as the 2nd element. The function is invoked with three arguments: - the value of the current row in the resultset, - the index of the current row in the resultset, - an array representing the resultset being traversed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array[]"/>
                </return-types>
            </method>
            <method name="toHTML" scope="instance">
                <description>Returns a HTML table snippet containing the resultset items</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="tableAttributes" usage="optional" type="Object">
                        <description>An optional hashmap which will be turned into attribute-value pairs on the table tag</description>
                    </parameter>
                    <parameter name="headingAttributes" usage="optional" type="Object">
                        <description>An optional hashmap which will be turned into attribute-value pairs on the thead tag</description>
                    </parameter>
                    <parameter name="bodyAttributes" usage="optional" type="Object">
                        <description>An optional hashmap which will be turned into attribute-value pairs on the tbody tag</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>HTML table snippet containing the resultset items</description>
                    </return-type>
                </return-types>
            </method>
            <method name="toString" scope="instance">
                <description>Returns a string representation of the resultset object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>A string representation of the resultset object</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DB.SQLite" superclass="Object">
        <description>Namespace that holds the SQLite implementation of the Jaxer DB API.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="createDB" scope="static">
                <description>Creates a new database file according to connectionParams.PATH</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="connectionParams" usage="required" type="Object">
                        <description>A hashmap of parameters needed to connect to the database. The properties required of connectionParams are: PATH: the path to the file of the database</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.MySQL.Connection">
                        <description>Returns an instance of Connection.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="validateConnectionParameters" scope="static">
                <description>Validate the provided connection parameters</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="connectionParams" usage="required" type="Object">
                        <description>A hashmap of parameters needed to connect to the database. The properties required of connectionParams are: PATH: the path to the file of the database</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DB.SQLite.Connection" superclass="Object">
        <description>Creates a new connection to the given databaseName (file).</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new connection to the given database (file). If the given database does not yet exist, it is created for you when you try to open it. The resulting connection object is the only way you interact with the database.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="connectionParams" usage="required" type="Object">
                        <description>A hashmap of parameters for connecting to the database. Required properties are: &lt;ul&gt; &lt;li&gt;PATH (the path to the database file).&lt;/li&gt; &lt;/ul&gt; Optional parameters are: &lt;ul&gt; &lt;li&gt;CLOSE_AFTER_EXECUTE (whether to close the connection after each call to execute, default is false), and&lt;/li&gt; &lt;li&gt;CLOSE_AFTER_REQUEST (whether to close the connection after each request, default is true).&lt;/li&gt; &lt;/ul&gt;</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.SQLite.Connection">
                        <description>Returns an instance of Connection.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="implementation" access="read-write" scope="instance" type="String">
                <description>Returns the string identifying the database implementation of this connection. You can compare this e.g. to Jaxer.DB.SQLite.IMPLEMENTATION or Jaxer.DB.MySQL.IMPLEMENTATION</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isOpen" access="read-write" scope="instance" type="Boolean">
                <description>Is the connection currently open? Recall that even if the answer is no the connection would automatically be opened when needed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="lastInsertId" access="read-write" scope="instance" type="Number">
                <description>Returns the unique &quot;rowid&quot; of the most recent successful INSERT command on the current connection. If the table has a column of type INTEGER PRIMARY KEY, this is used as the rowid. If no successful INSERTs have ever occurred on this connection, 0 is returned. Note that unsuccessful INSERTs do not change this value. This is a synonym for lastInsertRowId. See http://www.sqlite.org/c3ref/last_insert_rowid.html for more details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="lastInsertRowId" access="read-write" scope="instance" type="Number">
                <description>Returns the unique &quot;rowid&quot; of the most recent successful INSERT command on the current connection. If the table has a column of type INTEGER PRIMARY KEY, this is used as the rowid. If no successful INSERTs have ever occurred on this connection, 0 is returned. Note that unsuccessful INSERTs do not change this value. This is a synonym for lastInsertId. See http://www.sqlite.org/c3ref/last_insert_rowid.html for more details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="version" access="read-write" scope="instance" type="String">
                <description>Returns the string identifying the version of the database to which you are connected.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="close" scope="instance">
                <description>Closes the connection if it&apos;s open. This is optional, and only does something if the connection is open.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="execute" scope="instance">
                <description>Executes the given sql using the connection. If the SQL includes ?&apos;s (question marks) as parameter placeholders, the values of those parameters should be passed in as extra arguments to this function, either as individual arguments or as a single array. If the last argument is a (non-Array) object, it is used to pass in options. Currently two options are supported: dateHandler and useLocalTimezone. If dateHandler is given, it should be a function that takes the raw MySQL date/time/datetime string representation of a returned cell value, and a string describing the declared type, and returns the desired JavaScript representation. If dateHandler is not given, set useLocalTimezone to true to store date/time values using the local timezone. Otherwise, by default they are stored as UTC.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
		rs = conn.execute("SELECT * FROM myTable");
			rs = conn.execute("SELECT * FROM myTable WHERE id=? AND zip=?", myId, myZip);
			rs = conn.execute("SELECT * FROM myTable WHERE id=? AND zip=?", [myId, myZip]);
		</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The sql statement to be executed as a prepared statement</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.DB.ResultSet">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned.</description>
                    </return-type>
                    <return-type type="Number">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned.</description>
                    </return-type>
                    <return-type type="Object[]">
                        <description>The results of the query. For a SELECT-type query, a Jaxer.DB.ResultSet is returned, with 0 or more rows. For an INSERT/UPDATE/DELETE-type query, the number of rows affected is returned.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getLastInsertRowId" scope="instance">
                <description>Returns the unique &quot;rowid&quot; of the most recent successful INSERT command on the current connection. If the table has a column of type INTEGER PRIMARY KEY, this is used as the rowid. If no successful INSERTs have ever occurred on this connection, 0 is returned. Note that unsuccessful INSERTs do not change this value. This is the same as asking for the lastInsertRowId or lastInsertId properties. See http://www.sqlite.org/c3ref/last_insert_rowid.html for more details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Number">
                        <description>The rowid, or 0</description>
                    </return-type>
                </return-types>
            </method>
            <method name="mapExecute" scope="instance">
                <description>Prepares the given SQL query string on the current default database (as defined in configApps.js) and then iteratively executes it over the given array of parameters.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
			[rsA, rsB] = conn.mapExecute("SELECT * FROM myTable WHERE id=?", [idA, idB]);
			[rsA, rsB] = conn.mapExecute("SELECT * FROM myTable WHERE id=? AND zip=?", [ [idA, zipA], [idB, zipB] ]);
		</pre>]]></example>
                </examples>
                <references>
                    <reference name="Jaxer.DB.ResultSet"/>
                </references>
                <parameters>
                    <parameter name="sql" usage="required" type="String">
                        <description>The SQL to execute, using ?&apos;s (question marks) as parameter placeholders</description>
                    </parameter>
                    <parameter name="arrayOfParameters" usage="required" type="Array">
                        <description>An array of parameters to use for each execution. Each element of the array may itself be a single value or an array of values (corresponding to the ?&apos;s in the SQL)</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>An optional hashmap of options. Currently three options are supported: flatten, dateHandler, and useLocalTimezone. If flatten is true, the returned result will be a single ResultSet with its rows being the concatenated rows of each query. If dateHandler is given, it should be a function that takes the raw MySQL date/time/datetime string representation of a returned cell value, and a string describing the declared type, and returns the desired JavaScript representation. If dateHandler is not given, set useLocalTimezone to true to store date/time values using the local timezone. Otherwise, by default they are stored as UTC.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>A corresponding array of Jaxer.DB.ResultSets or Numbers for each query, or a combined Jaxer.DB.ResultSet or Number if the &apos;flatten&apos; option is true. For SELECT-type queries one or more Jaxer.DB.ResultSets are returned; for INSERT/UPDATE/DELETE-type queries the number of affected rows is returned.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="open" scope="instance">
                <description>Opens the connection so queries can be executed. This is optional, since if the connection is not open when it&apos;s asked to execute some SQL, it will open the connection automatically. Also closing the connection is optional.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="test" scope="instance">
                <description>Tests the connection by trying to connect and catching and returning any error encountered. If the connection is successful, returns a null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="keepOpen" usage="required" type="Boolean">
                        <description>If true, the connection will be kept open (if the test was successful). If false, the connection will be left in the same state as before the test: if it was open before it will be kept open, otherwise it will be closed.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>If successful, returns null; if unsuccessful, returns the error. Usually you can use the error&apos;s sqlErrorCode and sqlErrorDescription to see what the error was (or just its toString() method).</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DBPersistor" superclass="Object">
        <description>A database-based persistor for Jaxer Container objects (session, sessionPage, etc.)</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>A database-based persistor for Jaxer Container objects (session, sessionPage, etc.)&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.DBPersistor">
                        <description>Returns an instance of DBPersistor.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="load" visibility="advanced" scope="instance">
                <description>Retrieve a given container type&apos;s and name&apos;s property, by name&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="type" usage="required" type="String">
                        <description>The type of the container</description>
                    </parameter>
                    <parameter name="key" usage="required" type="String">
                        <description>The key for the specific instance of the container (e.g. the sessionPage ontainer is per page, and the page&apos;s key is used here)</description>
                    </parameter>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the property to query for</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The value of the (usually serialized) requested property, or the empty string if there is none</description>
                    </return-type>
                </return-types>
            </method>
            <method name="loadAll" visibility="advanced" scope="instance">
                <description>Load all the name-value properties at once for the given container type and key&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="type" usage="required" type="String">
                        <description>The type of the container</description>
                    </parameter>
                    <parameter name="key" usage="required" type="String">
                        <description>The key for the specific instance of the container (e.g. the sessionPage container is per page, and the page&apos;s key is used here)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>A hashmap of name-value pairs; the values are usually serialized and need to be deserialized via Serialization.fromJSONString</description>
                    </return-type>
                </return-types>
            </method>
            <method name="persist" visibility="advanced" scope="instance">
                <description>Persist a particular property (by name) for the given container type and key&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="type" usage="required" type="String">
                        <description>The type of the container</description>
                    </parameter>
                    <parameter name="key" usage="required" type="String">
                        <description>The key for the specific instance of the container (e.g. the sessionPage container is per page, and the page&apos;s key is used here)</description>
                    </parameter>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the property to persist</description>
                    </parameter>
                    <parameter name="data" usage="required" type="String">
                        <description>The value to persist for this property, which should have already been serialized (using Serialization.toJSONString)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="remove" visibility="advanced" scope="instance">
                <description>Completely remove the given property from the database&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="type" usage="required" type="String">
                        <description>The type of the container</description>
                    </parameter>
                    <parameter name="key" usage="required" type="String">
                        <description>The key for the specific instance of the container (e.g. the sessionPage container is per page, and the page&apos;s key is used here)</description>
                    </parameter>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the property to remove</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeAll" visibility="advanced" scope="instance">
                <description>Completely remove all the container&apos;s properties from the database&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="type" usage="required" type="String">
                        <description>The type of the container</description>
                    </parameter>
                    <parameter name="key" usage="required" type="String">
                        <description>The key for the specific instance of the container (e.g. the sessionPage container is per page, and the page&apos;s key is used here)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="createSchema" visibility="advanced" scope="static">
                <description>Creates the database schema needed to persist containers&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Dir" superclass="Jaxer.Filesystem">
        <description>Utility object for filesystem directory access.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new Directory handle for performing filesystem directory operations.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>a java style path object where double backslash is used as a folder hierarchy delimiter</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Dir">
                        <description>a Dir object reference initialized to the provided path.</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws an exception containing the error code.</description>
                    </exception>
                </exceptions>
            </constructor>
        </constructors>
        <methods>
            <method name="clone" scope="instance">
                <description>Clone a directory object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Dir">
                        <description>an new Dir Object cloned from the original</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws an Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="contains" scope="instance">
                <description>Tests whether a file Object exists in the Physical directory referenced by the Dir object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aFileObj" usage="required" type="Object">
                        <description>the aFileObj parameter may be either a JSLib file object or a string containing the name of the object.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>True/False indicates whether the file was found;</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws an Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="create" scope="instance">
                <description>Creates a new folder under the referenced path of the directory object The format of the permissions is a unix style numeric chmod i.e. 0777 or 444 on Windows, you can only set the Read/Write bits of a file. And User/Group/Other will have the SAME settings based on the most-relaxed setting (Read 04, 040, 0400, Write 02, 020, 0200). When a file is created, by default it has both Read and Write permissions. Also, you cannot set the file permission to WRITE-ONLY, doing so would set it to read-write</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPermissions" usage="required" type="String">
                        <description>The permissions used to create the filesystem object.</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code if filesytem object is unable to be created.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="createHierarchy" scope="instance">
                <description>Creates a hierarchy of folders as needed to contain the current folder&apos;s path. The format of the permissions is the same as for the create method.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPermissions" usage="required" type="String">
                        <description>The permissions used to create al the filesystem objects</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code if any filesytem object is unable to be created.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="createUnique" scope="instance">
                <description>Create a new unique folder under the referenced path of the directory object The format of the permissions is a unix style numeric chmod i.e. 0777 or 444 on Windows, you can only set the Read/Write bits of a file. And User/Group/Other will have the SAME settings based on the most-relaxed setting (Read 04, 040, 0400, Write 02, 020, 0200). When a file is created, by default it has both Read and Write permissions. Also, you cannot set the file permission to WRITE-ONLY, doing so would set it to read-write</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPermissions" usage="required" type="String">
                        <description>The permissions used to create the filesystem object, this may be ignored by some versions of windows.</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws an Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="readDir" scope="instance">
                <description>Read the contents of a directory</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Filesystem[]">
                        <description>an Array of Filesystem Objects, with no sort order explicitly set.</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws an Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="remove" scope="instance">
                <description>Removes specified folder from the file system</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aRecursive" usage="required" type="Boolean">
                        <description>True/False value to indicate whether the removal includes subfolders.</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="combine" scope="static">
                <description>Combines any number of path fragments into a single path, using the current operating system&apos;s filesystem path separator. Before joining two fragments with the path separator, it strips any existing path separators on the fragment ends to be joined</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="..." usage="required" type="String">
                        <description>Takes any number of string path fragments</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The fragments joined into a path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="create" scope="static">
                <description>Creates a new folder (directory) at the specified path and returns it The format of the permissions is a unix style numeric chmod i.e. 0777 or 444 on Windows, you can only set the Read/Write bits of a file. And User/Group/Other will have the SAME settings based on the most-relaxed setting (Read 04, 040, 0400, Write 02, 020, 0200). When a file is created, by default it has both Read and Write permissions. Also, you cannot set the file permission to WRITE-ONLY, doing so would set it to read-write</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The path of the new folder</description>
                    </parameter>
                    <parameter name="aPermissions" usage="required" type="String">
                        <description>The permissions used to create the filesystem object.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Dir">
                        <description>The new directory object</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code if filesytem object is unable to be created.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="createHierarchy" scope="static">
                <description>Creates a hierarchy of folders as needed to contain the current folder&apos;s path. The format of the permissions is the same as for the create method.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The path of the new folder</description>
                    </parameter>
                    <parameter name="aPermissions" usage="required" type="String">
                        <description>The permissions used to create all the filesystem objects</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Dir">
                        <description>The new directory object</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code if filesytem object is unable to be created.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="exists" scope="static">
                <description>Does the directory exist on disk?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if exists, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="grep" scope="static">
                <description>Scan a folder tree from the provided path and find files that match the provided regular expression pattern. The available options properties are &lt;ul&gt; &lt;li&gt;pattern : a string containing a regular expression e.g. &quot;^.*\.js$&quot;&lt;/li&gt; &lt;li&gt;flags : the flags to use with the regular expression, e.g. &quot;i&quot; to ignore case&lt;/li&gt; &lt;li&gt;recursive: true/false indication of whether to search sub folders for the match&lt;/li&gt; &lt;/ul&gt;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The starting path for the search. This must be a folder.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>Optional An Associative Array of optional parameters</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.File[]">
                        <description>An Array of Jaxer.File objects that matched the provided pattern</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Jaxer.Exception">
                        <description>A Jaxer.Exception object is thrown when the path is not a valid folder</description>
                    </exception>
                </exceptions>
            </method>
            <method name="map" scope="static">
                <description>Scan a folder tree from the provided path and find files that match the provided regular expression pattern and run the provided function against each match</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The starting path for the search. This must be a folder.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>Optional An Associative Array of optional parameters</description>
                    </parameter>
                    <parameter name="fn" usage="optional" type="Function(Jaxer.File)-&gt;Object">
                        <description>Optional The function to run. It will be invoked for each the matched Jaxer.File object, with the Jaxer.File object being passed as its parameter</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object[]">
                        <description>An Array of objects created by invoking the provided function on each file which matched the provided pattern</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Jaxer.Exception">
                        <description>A Jaxer.Exception object is thrown when the path is not a valid folder</description>
                    </exception>
                </exceptions>
            </method>
            <method name="pathToUrl" scope="static">
                <description>Convert a native filesystem path to a URL format, which will begin with &quot;file:...&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full path to be converted</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="null">
                        <description>The URL, or null if the path could not be converted</description>
                    </return-type>
                    <return-type type="String">
                        <description>The URL, or null if the path could not be converted</description>
                    </return-type>
                </return-types>
            </method>
            <method name="resolve" scope="static">
                <description>Resolves a path to an absolute path on the filesystem, using as a reference (base) the given path or the current page&apos;s path.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="pathToResolve" usage="required" type="String">
                        <description>The path to resolve, e.g. a filename. It can also be a resource pattern (e.g. &quot;resource:///...&quot;) or a file pattern (e.g. &quot;file:///...&quot;)</description>
                    </parameter>
                    <parameter name="referencePath" usage="optional" type="String">
                        <description>An optional path to use as a reference. By default, it uses the current page&apos;s path.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The full path on the filesystem</description>
                    </return-type>
                </return-types>
            </method>
            <method name="urlToPath" scope="static">
                <description>Convert a URL in string format to a native filesystem path. The URL must begin with &quot;file:...&quot;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL to convert</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="null">
                        <description>The full path, or null if the URL could not be converted</description>
                    </return-type>
                    <return-type type="String">
                        <description>The full path, or null if the URL could not be converted</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.DirUtils" superclass="Object">
        <description>This is a utility class that wraps XPCOM directory/folder utility functions</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Directory Utility helper object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.DirUtils">
                        <description>Returns an instance of DirUtils.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="current" access="read-write" scope="instance" type="String">
                <description>Return the path to the current folder the process is running from.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="desktopDir" access="read-write" scope="instance" type="String">
                <description>Returns the deskTop Folder of the current user.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="getHome" access="read-write" scope="instance" type="String">
                <description>Returns the home folder of the current user.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="temp" access="read-write" scope="instance" type="String">
                <description>Returns the Jaxer temp Folder.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.Exception" superclass="Object">
        <description>Exception used by the Jaxer framework.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>The exception used by the Jaxer framework. At runtime this is available from the window object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="info" usage="required" type="String">
                        <description>The descriptive text of the Exception to be thrown, or an Error-derived object</description>
                    </parameter>
                    <parameter name="logger" usage="optional" type="Object">
                        <description>An optional reference to an instance of the framework logger to be used. A default setting is used if this parameter is omitted</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Exception">
                        <description>An instance of Exception</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="toString" scope="instance">
                <description>Provides a string representation of the Exception description.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>A description of the exception</description>
                    </return-type>
                </return-types>
            </method>
            <method name="toDetails" scope="static">
                <description>Get verbose details on the error</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="required" type="Object">
                        <description>The error object on which details are desired. An attempt is made to convert it into an Error-derived object before details are retrieved.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The detailed description</description>
                    </return-type>
                </return-types>
            </method>
            <method name="toError" scope="static">
                <description>Returns a JavaScript Error (or Error-derived) object based on the given object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="required" type="Object">
                        <description>If this is already derived from an Error, it will just be returned. Otherwise it will be stringified and used as the description of the error.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Error">
                        <description>The Error-derived representation</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Extensions" superclass="Object">
        <description>A container for all the loaded extensions to the Jaxer framework.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
    </class>
    <class type="Jaxer.File" superclass="Jaxer.Filesystem">
        <description>Utility object for simple filesystem access.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <examples>
            <example><![CDATA[<pre>
	 var p = '/tmp/foo.dat';
	 var f = new Jaxer.File(p);
</pre>]]></example>
        </examples>
        <constructors>
            <constructor scope="instance">
                <description>Creates a new File handle for performing filesystem file operations.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>an argument of string local file path</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.File">
                        <description>Returns an instance of File.</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code upon failure.</description>
                    </exception>
                </exceptions>
            </constructor>
        </constructors>
        <properties>
            <property name="EOF" access="read-write" scope="instance" type="Boolean">
                <description>Checks &apos;end of file&apos; status and returns boolean to indicate whether the end of file has been reached. This function takes no arguments but needs an open read mode filehandle.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.open();
	 while(!f.EOF)
		 dump("line: "+f.readline()+"\n");
</pre>]]></example>
                </examples>
            </property>
            <property name="ext" access="read-write" scope="instance" type="String">
                <description>Returns the extension of the file object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 alert(f.ext);
</pre>
 outputs: dat]]></example>
                </examples>
            </property>
            <property name="pos" access="read-write" scope="instance" type="Number">
                <description>Returns the current byte position in the referenced file. This method is only applicable when using the File.read() method. If used with the File.readline() method it will return the internal read ahead buffer position, which is unlikely to be what was expected.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.open();
	 while(!f.EOF){
		 dump("pos: "+f.pos+"\n");
		 dump("line: "+f.readline()+"\n");
	 }
</pre>]]></example>
                </examples>
            </property>
            <property name="size" access="read-write" scope="instance" type="Number">
                <description>Returns the size in bytes of the referenced file system object as reported by the OS.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.size;
</pre>
 outputs: int 16]]></example>
                </examples>
            </property>
        </properties>
        <methods>
            <method name="clone" scope="instance">
                <description>Return a new instance of a JSLib File object referencing the same path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.File">
                        <description>A File object created from the path of the original file</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="close" scope="instance">
                <description>Closes an open file stream, takes a single parameter Object which will be thrown as a Exception after the close and cleanup of the file stream.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.open();
	 f.close();
</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="exception" usage="required" type="Object">
                        <description>the object to raise as an exception.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="copy" scope="instance">
                <description>Copy to file to another location.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.copy("/tmp/foo_copy.dat");
</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="aDest" usage="required" type="String">
                        <description>the path to copy the file to.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="create" scope="instance">
                <description>Creates a new file under the referenced path of the object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="createUnique" scope="instance">
                <description>Creates a new unique file under the referenced path of the object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="open" scope="instance">
                <description>Opens the file for reading or writing. The provided file mode can be one or two characters the using &apos;rb&apos;,&apos;ab&apos;,&apos;wb&apos; will cause the file to be opened in binary safe mode. NOTE: This implementation doesn&apos;t support file locking so will allow multiple open handles to the same file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.open();
</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="aMode" usage="required" type="String">
                        <description>an argument of string &apos;w&apos;, &apos;a&apos;, &apos;r&apos;, &apos;b&apos;</description>
                    </parameter>
                    <parameter name="aPermissions" usage="required" type="Number">
                        <description>a number containing the unix style chmod value for the permissions</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="read" scope="instance">
                <description>Reads a file (that&apos;s already been opened) and returns its contents. Returns a null on failure.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.open();
	 myContent = f.read();
	 f.close();
</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="aSize" usage="optional" type="Number">
                        <description>optional: the number of bytes to read from the file. If it is omitted the read will return the entire contents of the file.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number[]">
                        <description>If the file is text-based, returns the contents as a string; if it&apos;s binary, returns it as an Array of bytes (numbers between 0 and 255).</description>
                    </return-type>
                    <return-type type="String">
                        <description>If the file is text-based, returns the contents as a string; if it&apos;s binary, returns it as an Array of bytes (numbers between 0 and 255).</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="readAllLines" scope="instance">
                <description>Returns an array of individual lines read from the file on success, throws an Exception on failure</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 var lines = f.readAllLines();
</pre>]]></example>
                </examples>
                <return-types>
                    <return-type type="String">
                        <description>&lt;string array of foo.dat&gt;</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="readline" scope="instance">
                <description>Reads a single line from an open file, takes no arguments but needs an open read mode filehandle returns string containing the data read on success, null on failure</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.open();
	 while(!f.EOF)
		 dump("line: "+f.readline()+"\n");
</pre>]]></example>
                </examples>
                <return-types>
                    <return-type type="String">
                        <description>&lt;string line of foo.dat&gt;</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="remove" scope="instance">
                <description>Removes the referenced file object from the file system. Throws an exception is the action fails.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="truncate" scope="instance">
                <description>Truncates the file. Throws an exception if the action fails.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="write" scope="instance">
                <description>Write provided data to a file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new Jaxer.File(p);
	 f.open("w");
	 f.write("some data to be written");
</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="a" usage="required" type="String">
                        <description>Buffer to be written to a file, if the file is Binary then the buffer should be an array.</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="absolutePath" scope="static">
                <description>Extracts the absolute path of the file referenced by the provided path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The absolute path of the file referenced by the provided path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="append" scope="static">
                <description>Add the provided text to the end of an existing file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to append to</description>
                    </parameter>
                    <parameter name="text" usage="required" type="String">
                        <description>The text to append</description>
                    </parameter>
                </parameters>
            </method>
            <method name="appendLine" scope="static">
                <description>Add a line to the end of an existing file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to append to</description>
                    </parameter>
                    <parameter name="text" usage="required" type="String">
                        <description>The text to append, as a new line</description>
                    </parameter>
                </parameters>
            </method>
            <method name="backup" scope="static">
                <description>Create a uniquely named backup copy of the file referenced by the provided path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="sourcePath" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the original file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The path to the backup copy of the file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="checksum" scope="static">
                <description>return a crc32 checksum calculated from the file referenced by the provided path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The checksum of the file referenced by the provided path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="chmod" scope="static">
                <description>Get/Set the file permissions for the File object If the optional permissions parameter is provided chmod will set the permissions of the object to those provided. this may be ignored/misreported by some versions of windows. on Windows, you can only set the Read/Write bits of a file. And User/Group/Other will have the SAME settings based on the most-relaxed setting (Read 04, 040, 0400, Write 02, 020, 0200). When a file is created, by default it has both Read and Write permissions. Also, you cannot set the file permission to WRITE-ONLY, doing so would set it to read-write</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the original file</description>
                    </parameter>
                    <parameter name="permissions" usage="required" type="String">
                        <description>The file permissions to apply to the file referenced by the provided path, this number is an OCTAL representation of the permissions. to indicate a number is in octal format in javascript the first digit must be a 0</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number">
                        <description>The file permissions from the file referenced by the provided path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="copy" scope="static">
                <description>Copies the file from sourcePath to destinationPath. If the destination file exists it will be overwritten.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="sourcePath" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the original file</description>
                    </parameter>
                    <parameter name="destinationPath" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to the new file</description>
                    </parameter>
                </parameters>
            </method>
            <method name="dateModified" scope="static">
                <description>Return the dateModified for the file referenced by the provided path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The last modified date of file referenced by the provided path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="exists" scope="static">
                <description>Does the file (or folder) exist on disk?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if exists, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="extension" scope="static">
                <description>Return the file extension for the file referenced by the provided path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The extension of the file referenced by the provided path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="filename" scope="static">
                <description>Extracts the filename for the file referenced by the provided path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="filename" usage="required" type="String">
                        <description>The full or partial (to be resolved) of the path</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The filename from the file referenced by the provided path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getOrCreate" scope="static">
                <description>Get a file object, and if the object doesn&apos;t exist then automagically create it.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to get or create</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.File">
                        <description>The file, possibly newly-created</description>
                    </return-type>
                </return-types>
            </method>
            <method name="MD2" scope="static">
                <description>Generate an MD2 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.MD2"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the MD2 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="MD2" scope="static">
                <description>Verify an MD2 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.MD2"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="MD5" scope="static">
                <description>Generate an MD5 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.MD5"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the MD5 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="MD5" scope="static">
                <description>Verify an MD5 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.MD5"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="mimeType" scope="static">
                <description>Returns the MIME type (e.g. &quot;text/html&quot;) of the file at the given path. It uses a variety of methods to determine this: built-in mozilla entries, user-set prefs, the operating system, and category manager.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to ne resolved) path of the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The MIME type of the file, or null if not detected.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="move" scope="static">
                <description>Moves the file from sourcePath to destinationPath, the orginal file is deleted from the file system. If the destination file exists it will be overwritten.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="sourcePath" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the original file</description>
                    </parameter>
                    <parameter name="destinationPath" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to the new file</description>
                    </parameter>
                </parameters>
            </method>
            <method name="parentPath" scope="static">
                <description>Extracts the path of the containing folder for the file referenced by the provided path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="parentPath" usage="required" type="String">
                        <description>The full or partial (to be resolved) path of the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The path to the parent folder of file referenced by the provided path</description>
                    </return-type>
                </return-types>
            </method>
            <method name="read" scope="static">
                <description>Read the contents of a file on local disk. If the file does not exist, returns a null</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to read</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="null">
                        <description>The contents of the file as a string, or null if the file does not exist</description>
                    </return-type>
                    <return-type type="String">
                        <description>The contents of the file as a string, or null if the file does not exist</description>
                    </return-type>
                </return-types>
            </method>
            <method name="readLines" scope="static">
                <description>Read the contents of a textfile on local disk, return an array of lines. When the optional sep parameter is not provided return a string with the lines concatenated by the provided parameter. If the file does not exist, returns a null</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to read</description>
                    </parameter>
                    <parameter name="sep" usage="optional" type="String">
                        <description>An optional separator to use between lines. If none is specified, returns an array of lines.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>The contents of the file as a string or array of lines, or null if the file does not exist</description>
                    </return-type>
                    <return-type type="null">
                        <description>The contents of the file as a string or array of lines, or null if the file does not exist</description>
                    </return-type>
                    <return-type type="String">
                        <description>The contents of the file as a string or array of lines, or null if the file does not exist</description>
                    </return-type>
                </return-types>
            </method>
            <method name="remove" scope="static">
                <description>Delete a file (only if it already exists).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to delete</description>
                    </parameter>
                </parameters>
            </method>
            <method name="SHA1" scope="static">
                <description>Generate an SHA1 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA1"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA1 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA1" scope="static">
                <description>Verify an SHA1 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA1"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA256" scope="static">
                <description>Generate an SHA256 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA256"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA256 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA256" scope="static">
                <description>Verify an SHA256 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA256"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA384" scope="static">
                <description>Generate an SHA384 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA384"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA384 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA384" scope="static">
                <description>Verify an SHA384 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA384"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA512" scope="static">
                <description>Generate an SHA512 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA512"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA512 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA512" scope="static">
                <description>Verify an SHA512 Hash key for the file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Crypto.File.SHA512"/>
                </references>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="size" scope="static">
                <description>Returns the size of the file in bytes.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to truncated</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number">
                        <description>The size of the file in bytes</description>
                    </return-type>
                </return-types>
            </method>
            <method name="touch" scope="static">
                <description>Creates a file if required, if the file already exists it will set the last modified timestamp to the current time.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to touched</description>
                    </parameter>
                </parameters>
            </method>
            <method name="truncate" scope="static">
                <description>Truncates a file if the file already exists otherwise it will create an empty file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to truncated</description>
                    </parameter>
                </parameters>
            </method>
            <method name="write" scope="static">
                <description>Writes the provided text to file specified by the path. WARNING - destructive! This will overwrite an existing file so use File.append if you want to add the data to the end of an existing file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The full or partial (to be resolved) path to read</description>
                    </parameter>
                    <parameter name="text" usage="required" type="String">
                        <description>The text to write to the file</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.FileUtils" superclass="Object">
        <description>This is a general class that wraps XPCOM filesystem functionality and from which File and Dir objects are derived.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>A helper object for filesystem access</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.FileUtils">
                        <description>Returns an instance of FileUtils.</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </constructor>
        </constructors>
        <methods>
            <method name="append" scope="instance">
                <description>Changes the path of the filesystem object by appending the provided leaf value.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="leafname" usage="required" type="String">
                        <description>The leafname to be appended</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The appended directory and leafname</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="chromeToPath" scope="instance">
                <description>Convert a chrome path to a filesystem path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="a" usage="required" type="String">
                        <description>chrome path</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>the chrome path as a filesystem path</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="copy" scope="instance">
                <description>Copies the source path to the destination path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="source" usage="required" type="String">
                        <description>path The source path</description>
                    </parameter>
                    <parameter name="destination" usage="required" type="String">
                        <description>path The destination apth</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="create" scope="instance">
                <description>Creates a file on the filesystem with the default permissions</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>a file system path</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="dateModified" scope="instance">
                <description>The last modified timestamp as reported by the OS</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Object">
                        <description>a date object representing the last modified timestamp of the file</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="exists" scope="instance">
                <description>A boolean indicator of whether the referenced object physically exists on the filesystem.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if file exists otherwise false</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="ext" scope="instance">
                <description>Returns the extension of the file object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[<pre>
	 var p='/tmp/foo.dat';
	 var f=new File(p);
	 alert(f.ext);
</pre>
 outputs: dat]]></example>
                </examples>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>The path to the filesystem object</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>the file extension of the referenced filesytem object</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="isValidPath" scope="instance">
                <description>Returns a boolean indicator that is true for a valid path and false otherwise</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>a file system path</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if valid path was requested</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="leaf" scope="instance">
                <description>Returns the leaf (filename + extension) portion of the file path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="a" usage="required" type="String">
                        <description>filesystem path</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The leaf name</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="nsIFile" scope="instance">
                <description>Returns an nsIFIle object for the specified path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>a file system path</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>nsIFile</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="parent" scope="instance">
                <description>Returns the path of the parent filesystem object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>The path to the filesystem object</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The path of the parent file system object</description>
                    </return-type>
                </return-types>
            </method>
            <method name="pathToURL" scope="instance">
                <description>Convert a filesystem path to a file protocol URL</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="a" usage="required" type="String">
                        <description>path</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>the filesystem path as a URL</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="permissions" scope="instance">
                <description>Get the file permissions for the File object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>the chmod style permissions of the file</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="remove" scope="instance">
                <description>Removes the referenced object physically from the filesystem.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="run" scope="instance">
                <description>Trys to execute the requested file as a separate *non-blocking* process. Passes the supplied *array* of arguments on the command line if the OS supports it.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aPath" usage="required" type="String">
                        <description>a filesystem path</description>
                    </parameter>
                    <parameter name="aArgs" usage="required" type="Array">
                        <description>a set of arguments passed to the command to be run</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number">
                        <description>the exit code of the process</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="size" scope="instance">
                <description>Returns the size in bytes as reported by the OS</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="source" usage="required" type="String">
                        <description>path The path to the filesystem object</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number">
                        <description>the size of the file in bytes</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="urlToPath" scope="instance">
                <description>Convert a file protocol URL to a filesystem path</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="a" usage="required" type="String">
                        <description>URL</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>the URL as a filesystem path</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="validatePermissions" scope="instance">
                <description>This function will validate the numeric permissions value provided, if true the permissions value is valid, if false the value is invalid.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="the" usage="required" type="Number">
                        <description>chmod style permission (0777,0622 etc)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>indicates whether the permissions are valid</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Filesystem" superclass="Object">
        <description>File System Object contains methods useful for accessing the basic file and directory objects.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>File System Object. This object is used as a functional wrapper to the file system. It can represent, folders, files, symlinks</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fsPath" usage="required" type="Object">
                        <description>The path to the filesystem object</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Filesystem">
                        <description>Returns an instance of Filesystem.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="dateModified" access="read-write" scope="instance" type="Object">
                <description>The last modified timestamp as reported by the OS.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="exists" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object physically exists on the filesystem.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isDir" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is a folder/directory</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isExec" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is an executable</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isFile" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is a file</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isFolder" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is a folder/directory an alias of as isDir</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isHidden" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is hidden</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isReadable" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is readable</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isSpecial" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is special. NOTE: Not implemented on Mac and possibly other systems.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isSymlink" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is a symlink</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isWritable" access="read-write" scope="instance" type="Boolean">
                <description>A boolean indicator of whether the referenced object is writable</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="leaf" access="read-write" scope="instance" type="String">
                <description>Get/Set the leaf (filename + extension) portion of the file path.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="nsIFile" access="read-write" scope="instance" type="Object">
                <description>Returns a clone of the underlying nsIFile object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="path" access="read-write" scope="instance" type="String">
                <description>Returns the path of the refererenced filesystem object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="permissions" access="read-write" scope="instance" type="String">
                <description>Get/Set the file permissions for the File object. this may be ignored/misreported by some versions of windows. on Windows, you can only set the Read/Write bits of a file. And User/Group/Other will have the SAME settings based on the most-relaxed setting (Read 04, 040, 0400, Write 02, 020, 0200). When a file is created, by default it has both Read and Write permissions. Also, you cannot set the file permission to WRITE-ONLY, doing so would set it to read-write</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="URL" access="read-write" scope="instance" type="String">
                <description>Return the path of the referenced object as a file URL</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="append" scope="instance">
                <description>Changes the path of the filesystem object by appending the provided leaf value.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="leafname" usage="required" type="String">
                        <description>The leafname to be appended</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The appended directory and leafname</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="appendRelativePath" scope="instance">
                <description>This method is used for appending a relative path to the current filesystem object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="relative" usage="required" type="String">
                        <description>path</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="equals" scope="instance">
                <description>Evaluates whether the current filesystem object refers to the same file as the one provided as a parameter</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="a" usage="required" type="Object">
                        <description>file system object to be compared</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if object refers to same filesystem object, false otherwise</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="initPath" scope="instance">
                <description>This method will initialize the file system object with the provided path information (or will attempt to derive the path if an object is provided). An existing File object can be &apos;repointed&apos; to a new physical file sytem object by invoking this method.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="a" usage="required" type="Array">
                        <description>set of arguments</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>the file extension of the referenced filesystem object</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="move" scope="instance">
                <description>Move the referenced file to a new filesystem location provided as a parameter NOTE: after a move, &apos;this&apos; will be reinitialized to reference the moved file!</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="destination" usage="required" type="String">
                        <description>path</description>
                    </parameter>
                </parameters>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="normalize" scope="instance">
                <description>As of Mozilla 1.7, the underlying XPCOM method is only implemented under UNIX builds (except for Mac OSX). This method will fail if the path does not exist.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
            <method name="resetCache" scope="instance">
                <description>Truncates the file referenced by the filesystem object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true indicates success</description>
                    </return-type>
                </return-types>
                <exceptions>
                    <exception type="Error">
                        <description>Throws a Exception containing the error code.</description>
                    </exception>
                </exceptions>
            </method>
        </methods>
    </class>
    <class type="Jaxer.FunctionInfo" superclass="Object">
        <description>Encapsulates function information needed for generating client-side proxies and for server-side storage of functions used in callbacks.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>This class encapsulates function information needed for generating client-side proxies and for server-side storage of functions used in callbacks.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionName" usage="required" type="String">
                        <description>This parameter is the name of the function this info represents.</description>
                    </parameter>
                    <parameter name="parameterNames" usage="required" type="String[]">
                        <description>This parameter is an array of parameter names for the function this info represents.</description>
                    </parameter>
                    <parameter name="source" usage="required" type="String">
                        <description>This parameter is the actual source code of the function this info represents.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.FunctionInfo">
                        <description>Returns an instance of FunctionInfo.</description>
                    </return-type>
                </return-types>
            </constructor>
            <constructor visibility="advanced" scope="instance">
                <description>This class encapsulates function information needed for generating client-side proxies and for server-side storage of functions used in callbacks.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="functionReference" usage="required" type="Function">
                        <description>This is a reference to the actual Javascript function instance this info represents.</description>
                    </parameter>
                    <parameter name="functionNode" usage="optional" type="Node">
                        <description>This is an optional parameter that is the root node of an AST representing the function this info represents.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.FunctionInfo">
                        <description>Returns an instance of FunctionInfo.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="createClientSource" visibility="advanced" scope="instance">
                <description>Create a string representation of the underlying function to be used client-side as the source of this function.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>Returns a string representation of this function info&apos;s underlying Javascript function in a form needed to execute the function on the client</description>
                    </return-type>
                </return-types>
            </method>
            <method name="createServerFunction" visibility="advanced" scope="instance">
                <description>Create a string representation of the underlying function to be used during a callback. This source will be stored in the callback database and will be used to reconstitute the function during a callback. This is used for cached and proxied functions.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="namespace" usage="optional" type="String">
                        <description>If specified, the function is specified as a property on the given namespace object. Otherwise, the function is specified as a global property.</description>
                    </parameter>
                    <parameter name="proxied" usage="optional" type="Boolean">
                        <description>If specified and true, the function will have a property called &quot;proxy&quot; and set to true.</description>
                    </parameter>
                    <parameter name="noLocalScope" usage="optional" type="Boolean">
                        <description>If specified and true, the function will NOT be assigned to a global property with its name. That is, this.&lt;name&gt; will NOT be created.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>Returns a string representation of this function info&apos;s underlying Javascript function in a form needed to execute the function on the server.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isNative" visibility="advanced" scope="instance">
                <description>Is the underlying function a native one (for which no actual source is available)?&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Includer" superclass="Object">
        <description>Namespace object holding functions and members used to get and include HTML and JavaScript from external sources.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="compile" visibility="advanced" scope="static">
                <description>Compile the given JavaScript string in the given global context&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="String">
                        <description>The string of script code to compile</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>An optional global context (usually a window object) in which to compile it</description>
                    </parameter>
                    <parameter name="effectiveUrl" usage="optional" type="String">
                        <description>An optional parameter to indicate (e.g. in error messages) the effective URL from which this code originates.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The compiled bytecode, as a string.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="evalCompiledOn" visibility="advanced" scope="static">
                <description>Evaluate the given JavaScript bytecode string in the given global context&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="String">
                        <description>The string of script code to evaluate</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>An optional global context (usually a window object) in which to evaluate it</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The result of the last JavaScript expression evaluated.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="evalOn" visibility="advanced" scope="static">
                <description>Evaluate the given JavaScript string in the given global context&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="String">
                        <description>The string of script code to evaluate</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>An optional global context (usually a window object) in which to evaluate it</description>
                    </parameter>
                    <parameter name="effectiveUrl" usage="optional" type="String">
                        <description>An optional parameter to indicate (e.g. in error messages) the effective URL from which this code originates.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The result of the last JavaScript expression evaluated.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="load" scope="static">
                <description>Loads and evaluates a JavaScript file on the given global execution object with the given runat attribute.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="src" usage="required" type="String">
                        <description>The URL from which the JavaScript file should be retrieved. If the src is an absolute file://... URL then it is retrieved directly from the file system, otherwise it is retrieved via a web request.</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>The global (usually a window object) on which to evaluate it. By default, it is the same global as the one in which the calling function is executing.</description>
                    </parameter>
                    <parameter name="runat" usage="optional" type="String">
                        <description>The value of the effective runat &quot;attribute&quot; to use when evaluating this code. By default, it uses the same runat attribute as the last evaluated script block.</description>
                    </parameter>
                    <parameter name="useCache" usage="optional" type="Boolean">
                        <description>If true, the file is loaded from a cached compiled version if available, and if not available the file&apos;s contents are fetched, compiled and cached. By default this is false.</description>
                    </parameter>
                    <parameter name="forceCacheRefresh" usage="optional" type="Boolean">
                        <description>If true, force loading from src even if found in cache. The loaded contents will then be cached. By default this is false.</description>
                    </parameter>
                    <parameter name="dontSetRunat" usage="optional" type="Boolean">
                        <description>If true, any functions created in this script block will not have a runat property set on them, not even the default runat of the last script block. By default this is false.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The result of the last JavaScript expression evaluated, if any.</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Log" superclass="Object">
        <description>Log is a static object meant to be shared across the framework and perhaps even the user&apos;s code. In a module, use it to create a module-specific logger and then log with it.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <examples>
            <example><![CDATA[To log without a module name, use Jaxer.Log.info("my message"), where instead
of info you can use any of the six logging levels: trace(...), debug(...),
info(...), warn(...), error(...), and fatal(...). The generic logger is set
by default to only log messages at or above the info level.]]></example>
            <example><![CDATA[To log with a module name, first define a log helper: var log =
Jaxer.Log.forModule("myModule"); This will get or create the module logger
with this name. Then use log.info(...) or any of the other methods.

The default level of messages to log is set in configLog.js (default and
local) and can also be changed in memory:]]></example>
        </examples>
        <methods>
            <method name="addAppender" visibility="advanced" scope="static">
                <description>Add an appender to the referenced Log object&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the appender</description>
                    </parameter>
                    <parameter name="appender" usage="required" type="Jaxer.Log.Appender">
                        <description>An instance of the appender. It should be derived from Jaxer.Log.Appender.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getAppender" visibility="advanced" scope="static">
                <description>Get an appender reference from the referenced Log object&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the appender to look for</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Log.Appender">
                        <description>The appender instance</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getLevelNames" visibility="advanced" scope="static">
                <description>Return a array of implemented Logger levelnames e.g. &quot;TRACE&quot;, &quot;DEBUG&quot;, &quot;INFO&quot;, &quot;WARN&quot;, &quot;ERROR&quot;, &quot;FATAL&quot;&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String[]"/>
                </return-types>
            </method>
            <method name="getSortedModuleNames" visibility="advanced" scope="static">
                <description>Gets a sorted array of all the currently-defined modules.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Array">
                        <description>An array of strings, sorted alphabetically, of the names of modules for which ModuleLoggers have been defined.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="removeAppender" visibility="advanced" scope="static">
                <description>Remove the specified appender from the referenced Log object&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the appender to use.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="debug" scope="static">
                <description>Logs a message at the &quot;DEBUG&quot; level. The message will only be appended to the log if the level for that module (and that appender) is set at or below Jaxer.Log.DEBUG. This is the second-most verbose level - instrument your code with debug() calls in those places where debugging is likely to benefit from them.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="error" scope="static">
                <description>Logs a message at the &quot;ERROR&quot; level. The message will only be appended to the log if the level for that module (and that appender) is set at or below Jaxer.Log.ERROR. Use this to log non-fatal but nonetheless real errors.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fatal" scope="static">
                <description>Logs a message at the &quot;FATAL&quot; level. The message will only be appended to the log if the level for that module (and that appender) is set at or below Jaxer.Log.FATAL. Use this to log the most serious errors.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="forModule" scope="static">
                <description>Lazily creates a logger for the given module name, if needed, and in any case returns it. The referenced Log object knows to create log entries marked as belonging to the specific module.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="moduleName" usage="required" type="String">
                        <description>The name of the module (just an identifier string).</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Log.ModuleLogger">
                        <description>The module-specific logger to use for log entries.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getLevel" scope="static">
                <description>Get the logging level of the generic logger</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Log.Level">
                        <description>The level below which non-module-specific messages will not be logged</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getStackTrace" scope="static">
                <description>Get the current JavaScript stack trace.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="linePrefix" usage="optional" type="String">
                        <description>An optional prefix (e.g. whitespace for indentation) to prepend to every line of the stack trace</description>
                    </parameter>
                    <parameter name="framesToSkip" usage="optional" type="Number">
                        <description>An optional number of frames to skip before starting to trace the remaining frames</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The stack trace as a string consisting of a number of lines, starting at the deepest frame</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getStackTraceAlt" scope="static">
                <description>Get the current JavaScript stack trace.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="linePrefix" usage="optional" type="String">
                        <description>An optional prefix (e.g. whitespace for indentation) to prepend to every line of the stack trace</description>
                    </parameter>
                    <parameter name="framesToSkip" usage="optional" type="Number">
                        <description>An optional number of frames to skip before starting to trace the remaining frames</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The stack trace as a string consisting of a number of lines, starting at the deepest frame</description>
                    </return-type>
                </return-types>
            </method>
            <method name="hasModule" scope="static">
                <description>Returns a boolean to indicate whether the referenced Log object is wired to do logging for the provided modulename</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="moduleName" usage="required" type="String">
                        <description>The name of the module to look up</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="info" scope="static">
                <description>Logs a message at the &quot;INFO&quot; level. The message will only be appended to the log if the level for that module (and that appender) is set at or below Jaxer.Log.INFO. By default, modules are set to show messages at this level, so use info() when you want to show log messages without needing to set the level to more verbose than usual, but don&apos;t keep info() messages in your code long term.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setAllModuleLevels" scope="static">
                <description>Set the logging level on ALL modules to level provided for the referenced Log object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The new level to use for all of them</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setLevel" scope="static">
                <description>Set the logging level for the generic logger (the one that&apos;s not module- specific)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The level to use on the generic logger messages below this level will not be logged.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="trace" scope="static">
                <description>Logs a message at the &quot;TRACE&quot; level. The message will only be appended to the log if the level for that module (and that appender) is set at Jaxer.Log.TRACE. This is the most verbose level - instrument your code liberally with trace() calls to be able to pinpoint any issues.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="warn" scope="static">
                <description>Logs a message at the &quot;WARN&quot; level. The message will only be appended to the log if the level for that module (and that appender) is set at or below Jaxer.Log.WARN. Use this to warn of any unusual or unexpected, but not necessarily erroneous, conditions.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Log.Appender" superclass="Object">
        <description>Base class of all Appenders: listeners that know how to append log messages somewhere, e.g. to a file or a database.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>This is the base class of all Appenders: listeners that know how to append log messages somewhere, e.g. to a file or a database.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name to use to identify this appender</description>
                    </parameter>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The level to start this appender at -- messages below this will not be appended</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Log.Appender">
                        <description>Returns an instance of Appender.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="getLevel" visibility="advanced" scope="instance">
                <description>The level to which this appender is set. Messages below this level will not be logged.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Log.Level">
                        <description>The current level</description>
                    </return-type>
                </return-types>
            </method>
            <method name="setLevel" visibility="advanced" scope="instance">
                <description>Sets the level below which this appender will not log messages.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The minimum loggable level. Should be one of Log.TRACE, Log.DEBUG, Log.INFO, Log.WARN, Log.ERROR, Log.FATAL.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toString" visibility="advanced" scope="instance">
                <description>Identifies this appender instance by name&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>The appender&apos;s name</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Log.CoreAppender" superclass="Object">
        <description>Appends log messages to the same file as the Jaxer core.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>Create an instance of the Core appender -- appends log messages to the same file as the Jaxer core&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name to use to identify this appender</description>
                    </parameter>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The level to start this appender at -- messages below this will not be appended</description>
                    </parameter>
                    <parameter name="coreTraceMethods" usage="required" type="Object">
                        <description>The hashtable of core trace methods that this should invoke</description>
                    </parameter>
                    <parameter name="coreTraceBefore" usage="required" type="Function">
                        <description>The core function to call before calling any core method -- it will turn on logging regardless of the core&apos;s settings</description>
                    </parameter>
                    <parameter name="coreTraceAfter" usage="required" type="Function">
                        <description>The core function to call after calling any core method -- it will restore using the core&apos;s log settings</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Log.CoreAppender">
                        <description>Returns an instance of CoreAppender.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
    </class>
    <class type="Jaxer.Log.FileAppender" superclass="Object">
        <description>File-based Log Appender.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>Create an instance of the FileAppender, a file-based Appender&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The appender name</description>
                    </parameter>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The logging level to start using with this appender</description>
                    </parameter>
                    <parameter name="logPath" usage="required" type="String">
                        <description>The path to the logfile</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Log.FileAppender">
                        <description>Returns an instance of FileAppender.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="append" visibility="advanced" scope="instance">
                <description>Appends the provided message to the referenced appenders log&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="moduleName" usage="required" type="String">
                        <description>The name of the module to use</description>
                    </parameter>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The level to use for this message</description>
                    </parameter>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to log</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Object">
                        <description>An optional exception object to use</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setPath" visibility="advanced" scope="instance">
                <description>Set the path for the filesystem logging target&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="newPath" usage="required" type="String">
                        <description>The new path to use for this appender.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Log.Level" superclass="Object">
        <description>Logging level object used by the Logging facility to set or determine the current log levels.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>The constructor of a logging level object.Messages must exceed a certain severity level before they are logged.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the level</description>
                    </parameter>
                    <parameter name="value" usage="required" type="Number">
                        <description>The numeric value to associate with this level. Higher numbers are more severe.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Log.Level">
                        <description>Returns an instance of Level.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="isAtLeast" scope="instance">
                <description>A common comparison operator on Jaxer.Log.Level objects: is the current level at or above the given level?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if matches or exceeds the given level</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isAtOrBelow" scope="instance">
                <description>A common comparison operator on Jaxer.Log.Level objects: is the current level at or below the given level?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if matches or falls below the given level</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isBelow" scope="instance">
                <description>A common comparison operator on Jaxer.Log.Level objects: is the current level below the given level?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if falls below the given level</description>
                    </return-type>
                </return-types>
            </method>
            <method name="toString" scope="instance">
                <description>The textual representation of a level, namely its name</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>The name</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Log.ModuleLogger" superclass="Object">
        <description>Object created by the global Log.forModule(&quot;...&quot;) method for module-specific logging.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>An object that&apos;s created only through the global Log.forModule(&quot;...&quot;) method for module-specific logging. Usually you create such a logger at the beginning of your module, and then use it throughout your module for logging at various levels. It has its own level, so you can control the verbosity of logging per module.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="moduleName" usage="required" type="String">
                        <description>The name to use for the module</description>
                    </parameter>
                    <parameter name="The" usage="required" type="Jaxer.Log.Level">
                        <description>log level for the module</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Log.ModuleLogger">
                        <description>Returns an instance of ModuleLogger.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="debug" scope="instance">
                <description>Logs a message at the &quot;DEBUG&quot; level for this module. The message will only be appended to the log if the level for this module (and that appender) is set at or below Jaxer.Log.DEBUG. This is the second-most verbose level - instrument your code with debug() calls in those places where debugging is likely to benefit from them.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="error" scope="instance">
                <description>Logs a message at the &quot;ERROR&quot; level for this module. The message will only be appended to the log if the level for this module (and that appender) is set at or below Jaxer.Log.ERROR. Use this to log non-fatal but nonetheless real errors.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>Tthe message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fatal" scope="instance">
                <description>Logs a message at the &quot;FATAL&quot; level for this module. The message will only be appended to the log if the level for this module (and that appender) is set at or below Jaxer.Log.FATAL. Use this to log the most serious errors.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="getLevel" scope="instance">
                <description>Gets the level to which this ModuleLogger is set -- appending messages below this level will do nothing</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Log.Level">
                        <description>The current level</description>
                    </return-type>
                </return-types>
            </method>
            <method name="info" scope="instance">
                <description>Logs a message at the &quot;INFO&quot; level for this module. The message will only be appended to the log if the level for this module (and that appender) is set at or below Jaxer.Log.INFO. By default, modules are set to show messages at this level, so use info() when you want to show log messages without needing to set the level to more verbose than usual, but don&apos;t keep info() messages in your code long term.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setLevel" scope="instance">
                <description>Sets the level below which this moduleLogger will not log messages.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="level" usage="required" type="Jaxer.Log.Level">
                        <description>The minimum loggable level. Should be one of Jaxer.Log.TRACE, Jaxer.Log.DEBUG, Jaxer.Log.INFO, Jaxer.Log.WARN, Jaxer.Log.ERROR, Jaxer.Log.FATAL.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="trace" scope="instance">
                <description>Logs a message at the &quot;TRACE&quot; level for this module. The message will only be appended to the log if the level for this module (and that appender) is set at Jaxer.Log.TRACE. This is the most verbose level - instrument your code liberally with trace() calls to be able to pinpoint any issues.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="warn" scope="instance">
                <description>Logs a message at the &quot;WARN&quot; level for this module. The message will only be appended to the log if the level for this module (and that appender) is set at or below Jaxer.Log.WARN. Use this to warn of any unusual or unexpected, but not necessarily erroneous, conditions.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to append to the log. The timestamp, modulename, and terminating newline will be added automatically.</description>
                    </parameter>
                    <parameter name="exception" usage="optional" type="Error">
                        <description>An optional error or exception to be logged with this message</description>
                    </parameter>
                    <parameter name="inFunction" usage="optional" type="Function">
                        <description>An optional indication of which function this message should appear to originate from. By default, it&apos;s the function that called this logging method.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.NetworkUtils" superclass="Object">
        <description>This is a utility class that wraps XPCOM Network utility functions</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Network Utility helper object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.NetworkUtils"/>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="fixupURI" scope="instance">
                <description>Invokes the XPCOM nsIURIFixup method and return a &apos;fixed&apos; URI</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aURI" usage="required" type="Object">
                        <description>The URI to process</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The fixed URI as a string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="onStartRequest" scope="instance">
                <description>A stub function to be overridden</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aRequest" usage="required" type="Object">
                        <description>request object</description>
                    </parameter>
                    <parameter name="aContext" usage="required" type="Object">
                        <description>the contextual object for this request</description>
                    </parameter>
                </parameters>
            </method>
            <method name="onStopRequest" scope="instance">
                <description>Invokes the callback function for completed requests</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aRequest" usage="required" type="Object">
                        <description>the request object</description>
                    </parameter>
                    <parameter name="aContext" usage="required" type="Object">
                        <description>the current context of the request context</description>
                    </parameter>
                    <parameter name="aStatus" usage="required" type="Object">
                        <description>the current status of the request object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="QueryInterface" scope="instance">
                <description>Returns a QueryInterface for the provided XPCOM Interface ID</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="iid" usage="required" type="Object">
                        <description>the requested XPCOM Interface ID</description>
                    </parameter>
                </parameters>
            </method>
            <method name="validateURI" scope="instance">
                <description>Validates the provided URI using XPCOM and returns JSLib.Ok if successful</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="aURI" usage="required" type="Object">
                        <description>The URI to validate</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Overrides" superclass="Object">
        <description>Namespace used for overriding some of the built-in JavaScript and JavaScript-environment (user-agent) functions that may not make sense or need to behave differently on the server.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="applyAll" visibility="advanced" scope="static">
                <description>Applies all the overrides on the given global object, including the no-ops &quot;setTimeout&quot; and &quot;setInterval&quot;&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="global" usage="required" type="Object">
                        <description>The global (typically window) object</description>
                    </parameter>
                </parameters>
            </method>
            <method name="extendDomSetters" visibility="advanced" scope="static">
                <description>Alters the built-in setter methods for various DOM FORM element prototypes to alter the DOM as well as set the value of the associated in-memory property. E.g., normally when you set the value of an input element, the &quot;value&quot; attribute of the element in the DOM isn&apos;t altered. After running the function below, the &quot;value&quot; attribute on any input element will stay in sync with its in-memory value, so it will get serialized with the rest of the DOM when we&apos;re ready to send the DOM to the browser.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="global" usage="required" type="Object">
                        <description>The global object (usually a window object) whose prototype setters are to be overridden.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="alert" scope="static">
                <description>Alert in a server-side context will generate an info-level log message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String"/>
                </parameters>
            </method>
            <method name="confirm" scope="static">
                <description>Confirm in a server-side context will generate an info-level log message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String"/>
                </parameters>
            </method>
            <method name="prompt" scope="static">
                <description>Prompt in a server-side context will generate an info-level log message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String"/>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Overrides.JSON" superclass="Object">
        <description>An object that exposes native functions for constructing and parsing JSON data strings. A synonym for window.JSON.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="decode" scope="static">
                <description>Returns the JavaScript value represented by the given JSON string. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.parse, JSON.decode, and JSON.parse</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Overrides.JSON.encode"/>
                    <reference name="Jaxer.Overrides.JSON.stringify"/>
                    <reference name="Jaxer.Serialization.fromJSONString"/>
                </references>
                <parameters>
                    <parameter name="text" usage="required" type="String">
                        <description>The JSON string describing the value to be created</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The value value represented by the JSON string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="encode" scope="static">
                <description>Returns a JSON string representation of its argument. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.stringify, JSON.encode, and JSON.stringify</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Overrides.JSON.decode"/>
                    <reference name="Jaxer.Overrides.JSON.parse"/>
                    <reference name="Jaxer.Serialization.toJSONString"/>
                </references>
                <parameters>
                    <parameter name="value" usage="required" type="Object">
                        <description>The value whose JSON string representation is to be returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The JSON string representation of the value</description>
                    </return-type>
                </return-types>
            </method>
            <method name="parse" scope="static">
                <description>Returns the JavaScript value represented by the given JSON string. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.decode, JSON.parse, and JSON.decode</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Overrides.JSON.encode"/>
                    <reference name="Jaxer.Overrides.JSON.stringify"/>
                    <reference name="Jaxer.Serialization.fromJSONString"/>
                </references>
                <parameters>
                    <parameter name="text" usage="required" type="String">
                        <description>The JSON string describing the value to be created</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The value value represented by the JSON string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="stringify" scope="static">
                <description>Returns a JSON string representation of its argument. More options are likely to be available in the future. A synonym for Jaxer.Overrides.JSON.encode, JSON.encode, and JSON.stringify</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Overrides.JSON.decode"/>
                    <reference name="Jaxer.Overrides.JSON.parse"/>
                    <reference name="Jaxer.Serialization.toJSONString"/>
                </references>
                <parameters>
                    <parameter name="value" usage="required" type="Object">
                        <description>The value whose JSON string representation is to be returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The JSON string representation of the value</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Process" superclass="Object">
        <description>Used to execute operating system processes</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>The constructor for an object that wraps an operating system process. This also provides static functions for more easily executing operating system processes.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="optional" type="String">
                        <description>The absolute path to the executable file to execute. This must be specified before execution begins.</description>
                    </parameter>
                    <parameter name="async" usage="optional" type="Boolean">
                        <description>By default, the process executes synchronously: it blocks until complete. If async is true, it will execute asynchronously, not blocking before completion. This can be specified at any time until execution begins.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Process">
                        <description>The wrapper around the operating system process</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="_proc" access="read-write" scope="instance" visibility="advanced" type="Object">
                <description>The internal process handle&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="_status" access="read-write" scope="instance" visibility="advanced" type="Number">
                <description>The internal status (state) of the process: one of Jaxer.Process.CREATED, Jaxer.Process.EXEC_BEGUN, Jaxer.Process.WRITE_ENED, and Jaxer.Process.EXEC_ENDED.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="readBufferSize" access="read-write" scope="instance" visibility="advanced" type="Number">
                <description>The size in bytes of the buffer to use when reading from STDOUT and STDERR. By default this is 1024 bytes.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="args" access="read-write" scope="instance" type="Array">
                <description>The array of arguments to this process.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="async" access="read-write" scope="instance" type="Boolean">
                <description>If true, the process will be executed asynchronously (without blocking)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="autoDetachIfAsync" access="read-write" scope="instance" type="String">
                <description>Whether to detach the process (if it&apos;s asynchronous) after any writing to STDIN is complete. This is true by default Note that this property is only used by methods like exec and execAsync; you can always just explicitly detach by calling endExec.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="exitStatus" access="read-write" scope="instance" type="Number">
                <description>The exit status (i.e. return code) of the process, if any. For an async process this is null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="path" access="read-write" scope="instance" type="String">
                <description>The absolute path to the executable file to execute</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="stderr" access="read-write" scope="instance" type="String">
                <description>How to handle the standard error stream (STDERR) from the process. If this is a string, it read from STDERR as a character stream; otherwise no reading from STDERR is performed. Note that this property is only used by methods like exec and execAsync; you can always just explicitly read from STDERR using readErrString.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="stdin" access="read-write" scope="instance" type="String">
                <description>How to handle the standard input stream (STDIN) to the process. If this is a string, it is written to STDIN as a character stream; if this is an array, it is written to STDIN as a binary (byte array) stream; otherwise no writing to STDIN is performed. Note that this property is only used by methods like exec and execAsync; you can always just explicitly write to STDIN using writeString or writeBinary.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="stdout" access="read-write" scope="instance" type="String">
                <description>How to handle the standard output stream (STDOUT) from the process. If this is a string, it read from STDOUT as a character stream; if this is an array, it is read from STDOUT as a binary (byte array) stream; otherwise no reading from STDOUT is performed. Note that this property is only used by methods like exec and execAsync; you can always just explicitly read from STDOUT using readString or readBinary.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="CREATED" access="read-write" scope="static" type="Number">
                <description>The internal status indicating the process wrapper has been created but no execution has begun</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="EXEC_BEGUN" access="read-write" scope="static" type="Number">
                <description>The internal status indicating the process has begun executing, but any writing to STDIN is not necessarily finished</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="EXEC_ENDED" access="read-write" scope="static" type="Number">
                <description>The internal status indicating the process has finished executing or has been detached (if async)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="WRITE_ENDED" access="read-write" scope="static" type="Number">
                <description>The internal status indicating the process has begun executing and any writing to STDIN is finished</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="beginExec" scope="instance">
                <description>Begins execution of the process. Any arguments to this method are treated as arguments to the process; if no arguments are given, and this.args has been set, it will be used instead. You can start to write to STDIN and read from STDOUT and STDERR after you call this method.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="endExec" scope="instance">
                <description>Completes the execution of the process (if synchronous) or detaches it (if asynchronous). A running process may be stopped via kill() anytime before endExec() is called.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Number">
                        <description>If the process is synchronous, its exit status (i.e. return code) is returned.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="endWrite" scope="instance">
                <description>Closes STDIN for further writing, which may be needed by the process before it can proceed. This is automatically called by reading anything from STDOUT and STDERR and by endExec.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="exec" scope="instance">
                <description>Executes the process. The path to the executable file should already have been set when creating the Process or via the path property. The arguments to this method are used as the arguments to the process. By default, the process is executed synchronously (i.e. it blocks), and nothing is written to STDIN nor read from STDOUT or STDERR. To override these defaults, set any of the following properties before calling this: async, stdin, stdout, stderr, and autoDetachIfAsync. If any of these are set they will be used; for stdout and stderr they will be used only if the process is synchronous, in which case they&apos;ll be set to STDOUT/STDERR. If the process is asycnhronous and autoDetachIfAsync is false, it will not be detached until it falls out of scope, so you can still read STDOUT or STDERR and kill it until it falls out of scope, at which point it will be detached; otherwise it will be detached immediately (or after any STDIN is written).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Number">
                        <description>If the process is synchronous, its exit status (i.e. return code) is returned.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="execAsync" scope="instance">
                <description>Executes the process asynchronously (i.e. without blocking). The path to the executable file should already have been set when creating the Process or via the path property. The arguments to this method are used as the arguments to the process. By default, nothing is written to STDIN, and the process is immediately detached after it is launched. To override these defaults, set stdin and/or autoDetachIfAsync on the process before calling this. If stdin is set, it will be used. If autoDetachIfAsync is not set (or set to the default value of true), the process will be detached immediately after any STDIN is written. If autoDetachIfAsync is set to false, the process will not be detached, so you can still read STDOUT or STDERR and kill it until it falls out of scope, at which point it will be detached.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="kill" scope="instance">
                <description>Kills a running process. This can only be called before endExec() has been called.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="readBinary" scope="instance">
                <description>Reads the process&apos;s STDOUT stream as a byte array.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="maxLength" usage="optional" type="Number">
                        <description>If specified, limits reading of STDOUT to maxLength bytes</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number[]">
                        <description>The binary value of STDOUT as an array of integers</description>
                    </return-type>
                </return-types>
            </method>
            <method name="readErrString" scope="instance">
                <description>Reads the process&apos;s STDERR stream as a character string.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="maxLength" usage="optional" type="Number">
                        <description>If specified, limits reading of STDERR to maxLength characters</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The string value of STDERR</description>
                    </return-type>
                </return-types>
            </method>
            <method name="readString" scope="instance">
                <description>Reads the process&apos;s STDOUT stream as a character string.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="maxLength" usage="optional" type="Number">
                        <description>If specified, limits reading of STDOUT to maxLength characters</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The string value of STDOUT</description>
                    </return-type>
                </return-types>
            </method>
            <method name="writeBinary" scope="instance">
                <description>Writes the given byte array as a binary stream to the process&apos;s STDIN</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="data" usage="required" type="Number[]">
                        <description>The byte array (array of integers)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="writeString" scope="instance">
                <description>Writes the given string as a character stream to the process&apos;s STDIN.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="str" usage="required" type="String">
                        <description>The string to write</description>
                    </parameter>
                </parameters>
            </method>
            <method name="exec" scope="static">
                <description>Executes the process specified by the given absolute path. Any remaining arguments to this function are used as the arguments to the process, except possibly for the last argument if it is an object, in which case it&apos;s removed and used to set options. By default, the process is executed synchronously (i.e. it blocks), and nothing is written to STDIN. To override these defaults, pass as a final argument an object containing the properties to be overridden: async, stdin, stdout, stderr, autoDetachIfAsync. If any of these are set they will be used; for stdout and stderr they will be used only if the process is synchronous, in which case their values in your object will be set to STDOUT/STDERR. For a synchronous process, the return value will be the STDOUT of the process, unless you specify stdout in your options object, in which case the return value is the exitStatus; and unless you specify stderr, an error will be thrown if the process&apos;s exitStatus is non-zero or if it writes to STDERR. If the process is executed asynchronously and autoDetachIfAsync is false, it will not be detached until it falls out of scope; otherwise it will be detached immediately (or after any STDIN is written).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
		document.write("The folder contains:\n" + Jaxer.Process.exec("/bin/ls"));

		var opts = {stdin: 'Hello world', stdout: '', stderr: ''};
		var exitStatus = Jaxer.Process.exec("/bin/cat", "-", opts);
		document.write("Finished /bin/cat with status " + exitStatus + ": opts = " + uneval(opts));
		</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The absolute path of the executable file to execute</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>For a synchronous process (without having a stdout property in an options object), returns the STDOUT of the process; otherwise does not return anything.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="execAsync" scope="static">
                <description>Asynchronously executes the process specified by the given absolute path (so it does not block). Any remaining arguments to this function are used as the arguments to the process, except possibly for the last argument if it is an object, in which case it&apos;s removed and used to set options. By default, nothing is written to STDIN nor read from STDOUT or STDERR, and the process is immediately detached after it is launched. To override these defaults, pass as a final argument an object containing the properties to be overridden: stdin and/or autoDetachIfAsync. If stdin is set, it will be used. If autoDetachIfAsync is not set (or set to the default value of true), the process will be detached immediately after any STDIN is written. If autoDetachIfAsync is set to false, the process will not be detached until it falls out of scope, at which point it will be detached.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[	<pre>
		Jaxer.Process.execAsync("/bin/sleep", 1, {autoDetachIfAsync: false});
		var opts = {stdout: ''};
		Jaxer.Process.exec('/bin/ps', '-ax', opts);
		print("Sleep is running? " + (Jaxer.Util.String.grep(opts.stdout, "/bin/sleep").length > 0));
		Jaxer.Util.sleep(2000);
		Jaxer.Process.exec('/bin/ps', '-ax', opts);
		print("Sleep is running? " + (Jaxer.Util.String.grep(opts.stdout, "/bin/sleep").length > 0));
		</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The absolute path of the executable file to execute</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Request" superclass="Object">
        <description>An instance of this object has the lifecycle of the current request and contains information about it.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>An instance of this object has the lifecycle of the current request and contains information about it. This constructor is typically never invoked by the user. During the processing of the page Jaxer will create an instance of this object named Jaxer.request, this instance should be used to introspect the request details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="evt" usage="required" type="Object">
                        <description>The core event whose data is used to initialize this Request object instance</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Request">
                        <description>Returns an instance of Request.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="appKey" access="read-write" scope="instance" visibility="advanced" type="String">
                <description>A string used to identify what application the current request is asking for&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="pageKey" access="read-write" scope="instance" visibility="advanced" type="String">
                <description>A string used to identify what page in the application the current request is asking for&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="action" access="read-write" scope="instance" type="String">
                <description>The type of HTTP request this is: usually &quot;GET&quot; or &quot;POST&quot;. Guaranteed to be all upper-case, and the same as the action property.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Request.ACTIONS"/>
                </references>
            </property>
            <property name="app" access="read-write" scope="instance" type="Jaxer.App">
                <description>The Jaxer.App object constructed by searching in configApps.js for an object that matches the current request&apos;s parsedUrl and using it to set application-specific settings (such as the database connection to use) during this request</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="body" access="read-write" scope="instance" type="Object">
                <description>The body of the HTTP request, which usually contains the data during a POST request, and is often of type &apos;application/x-www-form-urlencoded&apos; (i.e. &quot;name1=value1&amp;name2=value2&amp;...&quot;). The type of data returned by this property depends on the Content-Type of the request and on Config.REQUEST_BODY_AS.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="bodyAsByteArray" access="read-write" scope="instance" type="Number[]">
                <description>The body of this request (usually the payload of a POST request) as a byte array, which may be empty. For example, a GET request always has an empty body.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="bodyAsStream" access="read-write" scope="instance" type="Object">
                <description>The body of this request (usually the payload of a POST request) as a stream, which may be empty. For example, a GET request always has an empty body.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="bodyAsString" access="read-write" scope="instance" type="String">
                <description>The body of this request (usually the payload of a POST request) as a string, which may be empty. For example, a GET request always has an empty body. NOTE that when the contentType is &apos;multipart/form-data&apos; this will always be &apos;&apos;, indicating that the body of the request has been pre-processed by Jaxer and is instead available via the files and data properties.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="contentLength" access="read-write" scope="instance" type="Number">
                <description>The Content-Length in bytes of the body of this request. NOTE that when the contentType is &apos;multipart/form-data&apos; this will always return 0, indicating that the body of the request has been pre-processed by Jaxer and is instead available via the files and data properties.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="contentType" access="read-write" scope="instance" type="String">
                <description>The Content-Type (i.e. mime-type) of the body of this request, which describes the body of this request. Usually this will be &apos;application/x-www-form-urlencoded&apos; or &apos;multipart/form-data&apos;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="current" access="read-write" scope="instance" type="Jaxer.Util.Url.ParsedUrl">
                <description>Holds the parsed URL information of the current page, which on a callback is different from the original page.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Request.parsedUrl"/>
                </references>
            </property>
            <property name="currentFolder" access="read-write" scope="instance" type="String">
                <description>The folder (directory) on disk holding the file (pageFile) being served in this request. This is &apos;&apos; if there is no pageFile information, e.g. if the web server is on a different filesystem than Jaxer.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="data" access="read-write" scope="instance" type="Object">
                <description>An object holding the name=value pairs of the current request&apos;s body (assumed to be of type application/x-www-form-urlencoded) as properties</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="documentRoot" access="read-write" scope="instance" type="String">
                <description>The location on disk of the top folder from which all web pages are served by the web server, as an absolute URL (without the preceding file://). This is usually only meaningful if the web server is on the same filesystem as Jaxer.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="env" access="read-write" scope="instance" type="Object">
                <description>A collection of the environment variables received from the web server for this request, as properties on this simple JavaScript object. If multiple variables had the same name, their values are given as an array.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="files" access="read-write" scope="instance" type="Array">
                <description>An array of Jaxer.Request.FileInfo objects describing any uploaded files. You must call save(newFileName) on each of these if you&apos;d like to save them, otherwise they will be purged at the end of the request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.FileInfo.prototype.save"/>
                </references>
            </property>
            <property name="headers" access="read-write" scope="instance" type="Object">
                <description>A collection of the HTTP headers received from the web server for this request, as properties on this simple JavaScript object. If multiple headers had the same name, their values are given as an array.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isCallback" access="read-write" scope="instance" type="Boolean">
                <description>True if Jaxer is handling the current request as a callback (RPC). This requires Jaxer to be the handler of the request and the path of the request to start with Config.CALLBACK_URI (which must not be blank)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isHandler" access="read-write" scope="instance" type="Boolean">
                <description>True if Jaxer is the main &quot;handler&quot; for the current request, rather than is filtering a page served by a different handler.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isHTTPS" access="read-write" scope="instance" type="Boolean">
                <description>Whether the current page is being requested and served over the HTTPS protocol.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="method" access="read-write" scope="instance" type="String">
                <description>The type of HTTP request this is: usually &quot;GET&quot; or &quot;POST&quot;. Guaranteed to be all upper-case, and the same as the action property.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Request.ACTIONS"/>
                </references>
            </property>
            <property name="pageFile" access="read-write" scope="instance" type="String">
                <description>The location on disk of the current page&apos;s file, served by the web server, as an absolute URL (without the preceding file://). This is usually only meaningful if the web server is on the same filesystem as Jaxer.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="paramIsBody" access="read-write" scope="instance" type="Boolean">
                <description>True if the entire body of the request is to be considered as the single data parameter of this request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="parsedUrl" access="read-write" scope="instance" type="Jaxer.Util.Url.ParsedUrl">
                <description>Holds the parsed URL information of the true page: this is the current URL for a regularly-served page, but for a callback this is the URL of the original page (now the Referer) that requested the callback.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="protocol" access="read-write" scope="instance" type="String">
                <description>The protocol declared in the HTTP request, e.g. &quot;HTTP/1.1&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="queryString" access="read-write" scope="instance" type="String">
                <description>The query part of the current request&apos;s URL, after the &quot;?&quot;. This is also available as Jaxer.request.parsedUrl.query and is parsed into the JavaScript object Jaxer.request.parsedUrl.queryParts.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="referer" access="read-write" scope="instance" type="String">
                <description>The value of the Referer HTTP header for this request, which should indicate the complete URL of the page that made this request. If this is a callback, the referer is taken from the &quot;callingPage&quot; parameter of the request, only using the Referer header if for some reason &quot;callingPage&quot; is not available.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="remoteAddr" access="read-write" scope="instance" type="String">
                <description>The Internet Protocol (IP) address of the client (browser) that sent the request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="remoteHost" access="read-write" scope="instance" type="String">
                <description>The hostname of the client (browser) that sent the request, or the IP address of the client if the hostname cannot be determined.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="remoteUser" access="read-write" scope="instance" type="String">
                <description>If the browser making the request submitted HTTP authentication credentials, this is the username submitted. Otherwise it is the empty string.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="uri" access="read-write" scope="instance" type="String">
                <description>The URL (and URI) of the current request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="userAgent" access="read-write" scope="instance" type="String">
                <description>The string used to identify the user agent of the client making the request.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="ACTIONS" access="read-write" scope="static" type="Object">
                <description>An enumeration of constants for various standard HTTP methods or actions</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="compileScript" scope="instance">
                <description>Low-level method to compile a string of JavaScript source code in a given global context and with a certain effectiveUrl as its &quot;file&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Includer.compile"/>
                </references>
                <parameters>
                    <parameter name="contents" usage="required" type="String">
                        <description>The string of script code to evaluate</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>An optional global context (usually a window object) in which to evaluate it</description>
                    </parameter>
                    <parameter name="effectiveUrl" usage="optional" type="String">
                        <description>An optional parameter to indicate (e.g. in error messages) the effective URL from which this code originates.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The compiled code</description>
                    </return-type>
                </return-types>
            </method>
            <method name="evaluateCompiledScript" scope="instance">
                <description>Low-level method to evaluate a string of compiled JavaScript code in a given global context.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Includer.evalCompiledOn"/>
                </references>
                <parameters>
                    <parameter name="compiledContents" usage="required" type="String">
                        <description>The bytecode string of script code to evaluate</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>An optional global context (usually a window object) in which to evaluate it</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The result of the evaluation, if any</description>
                    </return-type>
                </return-types>
            </method>
            <method name="evaluateScript" scope="instance">
                <description>Low-level method to evaluate a string of JavaScript source code in a given global context and with a certain effectiveUrl as its &quot;file&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Includer.evalOn"/>
                </references>
                <parameters>
                    <parameter name="contents" usage="required" type="String">
                        <description>The string of script code to evaluate</description>
                    </parameter>
                    <parameter name="global" usage="optional" type="Object">
                        <description>An optional global context (usually a window object) in which to evaluate it</description>
                    </parameter>
                    <parameter name="effectiveUrl" usage="optional" type="String">
                        <description>An optional parameter to indicate (e.g. in error messages) the effective URL from which this code originates.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The result of the evaluation, if any</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Request.ACTIONS" superclass="Object">
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="DELETE" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP DELETE method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="GET" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP GET method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="HEAD" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP HEAD method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="OPTIONS" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP OPTIONS method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="POST" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP POST method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="PUT" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP PUT method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.Request.FileInfo" superclass="Object">
        <description>Container for information about uploaded files.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>A container for information about uploaded files. The constructor is not meant to be called directly.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="req" usage="required" type="Object">
                        <description>The Jaxer Core&apos;s request object</description>
                    </parameter>
                    <parameter name="i" usage="required" type="Number">
                        <description>An index into the list of uploaded files</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Request.FileInfo">
                        <description>Returns an instance of FileInfo.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="tempFileName" access="read-write" scope="instance" visibility="advanced" type="String">
                <description>The name under which the file was temporarily saved&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="contentType" access="read-write" scope="instance" type="String">
                <description>The content type of this file, as reported by the web server</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="elementName" access="read-write" scope="instance" type="String">
                <description>The name of the field as specified in the HTML form</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="fileName" access="read-write" scope="instance" type="String">
                <description>The original name of the file that was actually uploaded from the user&apos;s filesystem</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="fileSize" access="read-write" scope="instance" type="Number">
                <description>The size of the file contents, in bytes</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="index" access="read-write" scope="instance" type="Number">
                <description>An index into the list of uploaded files</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="originalFileName" access="read-write" scope="instance" type="String">
                <description>The original name of the file that was actually uploaded from the user&apos;s filesystem</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="save" scope="instance">
                <description>Save the uploaded file to the given path -- otherwise it will be automatically purged after this request</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="newFileName" usage="required" type="String">
                        <description>The name (or full path) of the file to which the uploaded file should be saved.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Response" superclass="Object">
        <description>Current response and its associated information.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>An instance of this object has the lifecycle of the current response and contains information about it. This constructor is typically never invoked by the user. During the processing of the page Jaxer will create an instance of this object named Jaxer.response, this instance should be used to introspect and manage the response details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="evt" usage="required" type="Object">
                        <description>The Jaxer Core event whose data is used to initialize this Response object instance and to output to the client</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Response">
                        <description>Returns an instance of Response.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="earlyExit" access="read-write" scope="instance" visibility="advanced" type="Boolean">
                <description>This will be true when the document processing has been exited before reaching the end of the document, via the exit() method or another method such as redirect() which uses exit() internally. When that happens, some post-processing steps such as callback proxying will be omitted.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="headers" access="read-write" scope="instance" type="Object">
                <description>A collection of the HTTP response headers that will be returned to the browser, as properties on this simple JavaScript object. If multiple headers have the same name, their values are given as an array. NOTE: some headers are set by the web server after Jaxer is done, and they will not appear here.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="reasonPhrase" access="read-write" scope="instance" type="String">
                <description>Gets the string description of the HTTP status code for the request</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="statusCode" access="read-write" scope="instance" type="Number">
                <description>Gets the integer value of the HTTP status code for the request</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="getContents" visibility="advanced" scope="instance">
                <description>Gets the contents (body) of the response. For regular page requests, this will return null unless setContents has been called, in which case it will return the value set by the last call to setContents. This should only be used for non-binary return types, i.e. it should not be used after calling setContentsBinary or setContentsFile. For callbacks, this should only be called at the very end of callback processing, when the contents have been explicitly set by the Jaxer framework using the setContents method.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>The explicitly-set contents at this time, or null if no explicit contents have been set (so the DOM will be serialized if this is a regular page request).</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getDomTouched" visibility="advanced" scope="instance">
                <description>Has the DOM possibly been modified in any way?&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if it has (or might have), false if it could not have been</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getSideEffect" visibility="advanced" scope="instance">
                <description>Has there been any possible side effect (e.g. database accessed, etc.)?&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if there has been (or might have been), false if there could not have been</description>
                    </return-type>
                </return-types>
            </method>
            <method name="noteDomTouched" visibility="advanced" scope="instance">
                <description>Remembers that the DOM has been altered in some way, which ensures that the final response will be the Jaxer-produced one rather than the original document Jaxer received.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="noteSideEffect" visibility="advanced" scope="instance">
                <description>Remembers that processing this page has had some side effect, which ensures that the final response will be treated as having been processed by Jaxer, whether or not its contents have been modified.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="useOriginalContents" visibility="advanced" scope="instance">
                <description>Once this is called, the contents of the response will be the same as the contents that Jaxer received in this request, i.e. all DOM changes will be discarded. This is ONLY effective for regular requests, not callbacks.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="addHeader" scope="instance">
                <description>Adds an HTTP header to the response. If an existing header with this name exists, this value will be appended -- if you don&apos;t want that, just set Jaxer.response.headers [ name ] = value</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the HTTP header</description>
                    </parameter>
                    <parameter name="value" usage="required" type="String">
                        <description>The value to use</description>
                    </parameter>
                </parameters>
            </method>
            <method name="exit" scope="instance">
                <description>Stops processing the current request&apos;s HTML page and JavaScript, and returns this response to the browser via the web server.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Response.prototype.setContents"/>
                    <reference name="Jaxer.Response.prototype.addHeader"/>
                    <reference name="Jaxer.Response.prototype.redirect"/>
                    <reference name="Jaxer.Response.prototype.statusCodeToReasonPhrase"/>
                </references>
                <parameters>
                    <parameter name="statusCode" usage="optional" type="Number">
                        <description>The HTTP status code to return to the browser: by default it is 200.</description>
                    </parameter>
                    <parameter name="contents" usage="optional" type="String">
                        <description>The contents to use for the body of the response. If this is null or undefined, and setContents has not been called on this response, the current DOM will be serialized and returned as the response contents. If this is an XMLDocument or an E4X XML object, its string representation will be used, and a Content-Type header of &quot;application/xml&quot; will be returned (unless a Content-Type header was already specified in this response)</description>
                    </parameter>
                    <parameter name="reasonPhrase" usage="optional" type="String">
                        <description>The text description (e.g. &quot;OK&quot;) of the status code. For all the standard status codes this is optional, as the standard description for the status code will be used by default.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="exposeJaxer" scope="instance">
                <description>If Jaxer.Config.EXPOSE_JAXER, this sets an &quot;X-Powered-By&quot; header on the response indicating that Jaxer processing has occurred and noting the build number.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="getError" scope="instance">
                <description>Gets the error, if any, of which the framework has been notified during the handling of this request and generation of this response.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="getOverriddenClientFramework" scope="instance">
                <description>Gets the parameters of the alternate client framework that will be injected into this response, if the default client framework has been overridden using setClientFramework().</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Object">
                        <description>A JavaScript object with properties isSrc (Boolean indicating whether the value is the src or the contents of the script block to be injected) and value (the src or the contents).</description>
                    </return-type>
                </return-types>
            </method>
            <method name="hasError" scope="instance">
                <description>Has the framework been notified of an error during the handling of this request and generation of this response?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>True if an error was submitted.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isClientFrameworkOverridden" scope="instance">
                <description>Checks whether the client framework has been overridden for this response, i.e. whether setClientFramework has been called.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the client framework is overridden, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="notifyError" scope="instance">
                <description>Notifies the framework that an error has occurred during the handling of this request and generation of this response. How this is handled is then determined by the Jaxer.Config settings.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="newError" usage="required" type="Object">
                        <description>The error describing what happened. If the framework has already been notified of an error during the current request, this newError is not used.</description>
                    </parameter>
                    <parameter name="avoidLogging" usage="optional" type="Boolean">
                        <description>If this evaluates to true, an error message will not be logged during this call. Note that if an error message has been logged already in this request, another message will not be logged in any case.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="notifyErrorShown" scope="instance">
                <description>Notifies the framework that an error has already been reported in the output page so it need not be reported in the output page again.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="redirect" scope="instance">
                <description>Stops processing the current request&apos;s HTML page and JavaScript, and returns a redirect-type HTTP response to the browser. No contents (response body) are returned to the browser, and the DOM is not serialized.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Response.prototype.setContents"/>
                    <reference name="Jaxer.Response.prototype.addHeader"/>
                    <reference name="Jaxer.Response.prototype.exit"/>
                    <reference name="Jaxer.Response.prototype.statusCodeToReasonPhrase"/>
                </references>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL to which the browser should redirect the request. This is mandatory unless the Location header has already been set for this response.</description>
                    </parameter>
                    <parameter name="statusCode" usage="optional" type="Number">
                        <description>The HTTP status code to return to the browser: by default it is 307 (temporary redirect).</description>
                    </parameter>
                    <parameter name="reasonPhrase" usage="optional" type="String">
                        <description>The text description of the status code. For all the standard status codes this is optional, as the standard description for the status code will be used by default.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="removeHeader" scope="instance">
                <description>Removes an HTTP header with a specific value from the response. If there is no such name-value pair, it does nothing. If an existing header with this name exists and has multiple values, this value will be removed -- if you don&apos;t want that, just delete Jaxer.response.headers [ name ]</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the HTTP header</description>
                    </parameter>
                    <parameter name="value" usage="required" type="String">
                        <description>The value to remove</description>
                    </parameter>
                </parameters>
            </method>
            <method name="resetClientFramework" scope="instance">
                <description>Restores the use of the default client framework (using the Jaxer.Config settings), undoing any previous calls to setClientFramework().</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="setClientFramework" scope="instance">
                <description>Overrides the automatic injection of the client framework into the response page. If neither src nor contents are given, then NO client framework is injected into the page. Make sure you do not rely (implicitly or explicitly) on the presence of the default Jaxer client framework if you call this method!</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="src" usage="optional" type="String">
                        <description>The url of the alternate client framework to use, if any. If this src argument is given, any contents argument will not be used.</description>
                    </parameter>
                    <parameter name="contents" usage="optional" type="String">
                        <description>The contents of the script block to use as an alternate client framework. If a src argument is specified, the contents argument will not be used.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setContents" scope="instance">
                <description>Sets the contents (body) of the response. Once the response&apos;s contents are set this way, the DOM is no longer serialized into the response contents at the end of page processing.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="String">
                        <description>The contents to use for the body of the response. If this is an XMLDocument or an E4X XML object, its string representation will be used, and a Content-Type header of &quot;application/xml&quot; will be returned; if this is another type of object, its JSON representation will be used, and a Content-Type header of &quot;application/json&quot; will be returned; otherwise the contents will be the String() of the passed-in value with no Content-Type impact. Note if a Content-Type header was already specified in this response, that will not be changed in any case.</description>
                    </parameter>
                    <parameter name="statusCode" usage="optional" type="Number">
                        <description>The integer value of the HTTP status code to return. If 0 or null or not specified, it is not set.</description>
                    </parameter>
                    <parameter name="reasonPhrase" usage="optional" type="String">
                        <description>The string description of the HTTP status code to return. If the statusCode is 0 or null or not specified, the reasonPhrase is not set. Otherwise it defaults to the standard reason phrase for the statusCode (&quot;OK&quot; for 200)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setContentsBinary" scope="instance">
                <description>Sets the contents (body) of the response to the given binary (byte array) data. Once the response&apos;s contents are set this way, the DOM is no longer serialized into the response contents at the end of page processing.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[		<pre>
			// If the image is in your current folder rather than the default file location:
			var path = Jaxer.Dir.resolve("image.png", Jaxer.request.currentFolder);
			var file = new Jaxer.File(path);
			file.open('rb');
			var contents = file.read();
			file.close();
			Jaxer.response.setContentsBinary(contents, "image/png");
		</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="contents" usage="required" type="Number[]">
                        <description>The contents to use for the body of the response. It should be an array of numbers between 0 and 255, to be treated as a byte array. The data should be appropriate for the Content-Type header used in this response.</description>
                    </parameter>
                    <parameter name="contentType" usage="optional" type="String">
                        <description>The Content-Type to be used for this response. If this is not specified or is null, a Content-Type should be set separately.</description>
                    </parameter>
                    <parameter name="statusCode" usage="optional" type="Number">
                        <description>The integer value of the HTTP status code to return. If 0 or null or not specified, it is not set.</description>
                    </parameter>
                    <parameter name="reasonPhrase" usage="optional" type="String">
                        <description>The string description of the HTTP status code to return. If the statusCode is 0 or null or not specified, the reasonPhrase is not set. Otherwise it defaults to the standard reason phrase for the statusCode (&quot;OK&quot; for 200)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setContentsFile" scope="instance">
                <description>Sets the contents (body) of the response to the given file. The file&apos;s contents will be streamed directly back to the web server, chunk by chunk via the socket to the web server, without going through the Jaxer JavaScript framework. Once the response&apos;s contents are set this way, the DOM is no longer serialized into the response contents at the end of page processing.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <examples>
                    <example><![CDATA[		<pre>
			// If the image is in your current folder rather than the default file location:
			var path = Jaxer.Dir.resolve("image.png", Jaxer.request.currentFolder);
			Jaxer.response.setContentsFile(path, "image/png");
		</pre>]]></example>
                </examples>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>The path to the file on disk. The file should be appropriate for the Content-Type header used in this response.</description>
                    </parameter>
                    <parameter name="contentType" usage="optional" type="String">
                        <description>The Content-Type to be used for this response. If this is not specified or is null, it will be set from Jaxer.File.mimeType(path), unless that too returns a null. If so, then a Content-Type should be set separately.</description>
                    </parameter>
                    <parameter name="statusCode" usage="optional" type="Number">
                        <description>The integer value of the HTTP status code to return. If 0 or null or not specified, it is not set.</description>
                    </parameter>
                    <parameter name="reasonPhrase" usage="optional" type="String">
                        <description>The string description of the HTTP status code to return. If the statusCode is 0 or null or not specified, the reasonPhrase is not set. Otherwise it defaults to the standard reason phrase for the statusCode (&quot;OK&quot; for 200)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setNoCacheHeaders" scope="instance">
                <description>Sets headers on this response to mark it as a dynamic one and avoid its being cached. This will always be called by the framework during callback processing. For regular (non-callback) requests, this will only be called by the framework if the DOM has been changed or a side-effect has (or could have) occurred during the processing of this request and the generation of the response.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="setStatus" scope="instance">
                <description>Sets the HTTP status code and reason phrase for the response. By default</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="statusCode" usage="optional" type="Number">
                        <description>The integer value of the HTTP status code. Defaults to 200</description>
                    </parameter>
                    <parameter name="reasonPhrase" usage="optional" type="String">
                        <description>The string description of the HTTP status code. Defaults to the standard reason phrase for the statusCode (&quot;OK&quot; for 200)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="statusCodeToReasonPhrase" scope="instance">
                <description>Returns the standard W3C reason phrase for the given standard status code. For example, passing in 200 returns &quot;OK&quot;, and passing in 404 returns &quot;Not Found&quot;.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="statusCode" usage="required" type="Number">
                        <description>The status code, as an integer (or a string that can be parsed to an integer). If this is not a recognized status code, &quot;Unknown Status Code&quot; is returned.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="wasErrorShown" scope="instance">
                <description>True if an error has already been reported in the output page so it need not be reported in the output page again.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Boolean">
                        <description>True if notifyErrorShown() was called in this response, false otherwise.</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.SMTP" superclass="Object">
        <description>A namespace object holding functions and members used for sending emails via SMTP (Simple Mail Transfer Protocol).</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="sendEmail" scope="static">
                <description>Sends an email via SMTP</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="mailhost" usage="required" type="String">
                        <description>The host to connect to</description>
                    </parameter>
                    <parameter name="mailport" usage="required" type="Number">
                        <description>The port to connect on</description>
                    </parameter>
                    <parameter name="from" usage="required" type="String">
                        <description>The address this message is coming from</description>
                    </parameter>
                    <parameter name="to" usage="required" type="String">
                        <description>The address this message is going to</description>
                    </parameter>
                    <parameter name="subject" usage="required" type="String">
                        <description>The subject of the message</description>
                    </parameter>
                    <parameter name="msg" usage="required" type="String">
                        <description>The body of the message</description>
                    </parameter>
                    <parameter name="headers" usage="required" type="Array">
                        <description>Array of extra msg headers, [ [ &apos;header1&apos;,&apos;value1&apos; ] , [ &apos;header2&apos;,&apos;value2&apos; ] , ... ]</description>
                    </parameter>
                </parameters>
            </method>
            <method name="sendMessage" scope="static">
                <description>Sends an email message object via SMTP</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="mailhost" usage="required" type="String">
                        <description>The host to connect to</description>
                    </parameter>
                    <parameter name="mailport" usage="required" type="Number">
                        <description>The port to connect on</description>
                    </parameter>
                    <parameter name="mailMessage" usage="required" type="Jaxer.SMTP.MailMessage">
                        <description>The Jaxer.SMTP.MailMessage object to send</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.SMTP.MailMessage" superclass="Object">
        <description>A structure holding email message information.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>A structure holding email message information</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.SMTP.MailMessage">
                        <description>Returns an instance of MailMessage.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="addHeader," scope="instance">
                <description>Sets extra SMTP headers on the message, the provided header parameter is an two element array consisting of the header name value pair.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="header" usage="required" type="Array">
                        <description>The header to add.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addRecipient" scope="instance">
                <description>Adds a recipient to the message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="recipient" usage="required" type="String">
                        <description>The email address</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setBody" scope="instance">
                <description>Sets the body (contents) of the message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="body" usage="required" type="String">
                        <description>The text of the message</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setDate" scope="instance">
                <description>Sets the timestamp on the message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="date" usage="required" type="Object">
                        <description>The date it&apos;s sent</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setFrom" scope="instance">
                <description>Sets the &quot;From&quot; address on the message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="from" usage="required" type="String">
                        <description>The email address from which this message is coming</description>
                    </parameter>
                </parameters>
            </method>
            <method name="setSubject" scope="instance">
                <description>Sets the &quot;Subject&quot; of the message</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="subject" usage="required" type="String">
                        <description>The subject text</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Sandbox" superclass="Object">
        <description>The Class describing a Sandbox: a container that can load a server-side window with its own DOM, and executes JavaScript server-side, but is more protected than the regular Jaxer server-side window.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>The constructor of a Sandbox: a container that can load a server-side window with its own DOM, and executes JavaScript server-side, but is more protected than the regular Jaxer server-side window.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Sandbox.OpenOptions"/>
                </references>
                <parameters>
                    <parameter name="url" usage="optional" type="String">
                        <description>The url to load. If no url is given, nothing is loaded -- you can later use the load method to load it.</description>
                    </parameter>
                    <parameter name="data" usage="optional" type="String">
                        <description>To GET a page from the url, leave this parameter undefined or pass in null. To POST to the url, set this parameter to the data to be POSTed. It may be a string (usually of the form name1=value&amp;name2=value), or an object whose name-&gt;value property pairs will be used to construct such a string.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>A JavaScript object (hashmap) of name: value property pairs specifying how to load this Sandbox.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Sandbox">
                        <description>Returns an instance of Jaxer.Sandbox</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="document" access="read-write" scope="instance" type="HTMLDocument">
                <description>Returns the DOM document that&apos;s been loaded into this sandbox&apos;s window, or null if a url has not been loaded yet.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="method" access="read-write" scope="instance" type="String">
                <description>Returns the HTTP method (action) of the request to fetch this Sandbox&apos;s URL, e.g. &apos;GET&apos; ir &apos;POST&apos;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="readyState" access="read-write" scope="instance" type="String">
                <description>Returns the loading state of the window in the Sandbox. The possible values are: &lt;ul&gt; &lt;li&gt;0 UNINITIALIZED -- the contents have not been set or the url has not been loaded&lt;/li&gt; &lt;li&gt;1 LOADING -- the contents are being set or the url is being loaded&lt;/li&gt; &lt;li&gt;2 LOADED -- the contents have been set or the url has been loaded&lt;/li&gt; &lt;li&gt;3 INTERACTIVE -- all network operations have completed&lt;/li&gt; &lt;li&gt;4 COMPLETED -- all operations have completed&lt;/li&gt; &lt;/ul&gt;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="requestHeaders" access="read-write" scope="instance" type="Object">
                <description>Returns the HTTP headers of the request to fetch this Sandbox&apos;s URL as properties on the returned object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="status" access="read-write" scope="instance" type="Number">
                <description>Returns the HTTP status of the response to the request to fetch this Sandbox&apos;s URL, e.g. 200 (i.e. OK)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="statusText" access="read-write" scope="instance" type="String">
                <description>Returns the HTTP status text of the response to the request to fetch this Sandbox&apos;s URL, e.g. &apos;OK&apos; (for a status of 200)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="window" access="read-write" scope="instance" type="ChromeWindow">
                <description>Returns the window that&apos;s been loaded into this sandbox, or null if a url has not been loaded yet.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="defaults" access="read-write" scope="static" type="Jaxer.Sandbox.OpenOptions">
                <description>The default OpenOptions which new calls to new Jaxer.Sandbox() or Jaxer.Web.load() will use, unless overridden by the options argument.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="close" scope="instance">
                <description>Closes the Sandbox&apos;s window, which terminates any async loading and removes the window and its document. This call is usually optional, since the window and its document are automatically removed at the end of the Jaxer request, and they are safely reused if you open (load) the same Sandbox more than once. It&apos;s therefore mostly useful for stopping open async requests.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="open" scope="instance">
                <description>Opens the sandbox&apos;s window and document by creating them (if needed) and then loading a url into them, via a GET or POST request. You usually do not need to explicitly close() this, except to cancel async requests.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Sandbox.prototype.close"/>
                </references>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The url to load from</description>
                    </parameter>
                    <parameter name="data" usage="optional" type="String">
                        <description>To GET a page from the url, leave this parameter undefined or pass in null. To POST to the url, set this parameter to the data to be POSTed. It may be a string (usually of the form name1=value&amp;name2=value), or an object whose name-&gt;value property pairs will be used to construct such a string.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>A JavaScript object (hashmap) of name: value property pairs specifying how to load this Sandbox.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="responseHeaders" scope="instance">
                <description>Returns the HTTP headers of the response to the request to fetch this Sandbox&apos;s URL as properties on the returned object</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="setContents" scope="instance">
                <description>Loads the sandbox&apos;s window and document from a string by creating them (if needed) and then loading the string into them. You do not need to explicitly close() this.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Sandbox.prototype.close"/>
                </references>
                <parameters>
                    <parameter name="contents" usage="optional" type="String">
                        <description>The contents to load into the window, usually an HTML string. If a DOM node or document are used, they are converted to HTML, and if an object is passed in its toString() is used.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>A JavaScript object (hashmap) of name: value property pairs specifying how to load this Sandbox.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="toHTML" scope="instance">
                <description>Returns the HTML of the given node in the Sandbox&apos;s DOM, or of the entire Sandbox&apos;s document DOM. If the Sandbox has not yet been loaded from a url, returns an empty string (&apos;&apos;).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="node" usage="optional" type="Node">
                        <description>The HTML element or document (or DOM node) to be serialized. By default the entire Sandbox document is used.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The complete HTML representation of the node or document and its contents, or &apos;&apos; if the Sandbox has no document</description>
                    </return-type>
                </return-types>
            </method>
            <method name="waitForCompletion" scope="instance">
                <description>Waits for the Sandbox&apos;s window to complete loading, allowing asynchronous processing of events to continue, up to a maximum number of milliseconds (if specified).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="maxMillis" usage="optional" type="Number">
                        <description>The number of milliseconds to wait for the sandbox to complete loading before timing out and exiting. If this is zero or negative, waits indefinitely (though other timeouts may intervene).</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>Returns true if the Sandbox window loaded successfully (or was never initialized), false if the timeout occurred before that.</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Sandbox.OpenOptions" superclass="Object">
        <description>Options used to define the behavior of Jaxer.Sandbox opening.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Options used to define the behavior of Jaxer.Sandbox loading. Create a new Jaxer.Sandbox loading() to get the default options, then modify its properties as needed before passing it to new Jaxer.Sandbox() or to load() on an instance of Jaxer.Sandbox.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Sandbox.OpenOptions">
                        <description>Returns an instance of OpenOptions.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="allowJavaScript" access="read-write" scope="instance" type="Boolean">
                <description>Whether to allow (server-side) execution of JavaScript, if any, within the loaded page. By default, this is true. This applies to JavaScript in the page inside this Sandbox instance, not the JavaScript of the loading page. Note that the JavaScript inside this Sandbox instance in any case does not have access to the Jaxer framework, and is running without the usual Jaxer server-side privileges.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="allowMetaRedirects" access="read-write" scope="instance" type="Boolean">
                <description>Whether to allow refresh-based redirects within the loaded page. By default, this is true;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="allowSubFrames" access="read-write" scope="instance" type="Boolean">
                <description>Whether to allow the loaded page to itself load frames or iframes. By default, this is true.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="async" access="read-write" scope="instance" type="Boolean">
                <description>Set to true for asynchronous, false for synchronous (default). To use it asynchronously, see also Jaxer.Thread.waitFor.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Thread.waitFor"/>
                </references>
            </property>
            <property name="headers" access="read-write" scope="instance" type="Object">
                <description>Add name-value pairs to this object to set headers on the http request. Both the name and the value should be strings. For POST requests, a &apos;Content-Type&apos; header with value &quot;application/x-www-form-urlencoded&quot; will be added automatically unless you specify a different one, and a &apos;Content-Length&apos; header with the appropriate value will also be set.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="onload" access="read-write" scope="instance" type="Function">
                <description>The value of this, if any, will be used as the Sandbox&apos;s onload handler. The onload handler will be called after the page is loaded, and after the page&apos;s own onload is invoked, if any. It&apos;s particularly useful when the page is loaded asynchronously, in which case it may be used in conjunction with the Sandbox&apos;s waitForCompletion method or with Jaxer.Thread.waitFor.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Sandbox.prototype.waitForCompletion"/>
                    <reference name="Jaxer.Thread.waitFor"/>
                </references>
            </property>
            <property name="onlocationchange" access="read-write" scope="instance" type="Function">
                <description>Set this to an event handler function you want called if the document in the Sandbox redirects (changes its location). This will happen whether the redirect is due to an HTTP status code or header (e.g. the web server returned a 307 Temporary Redirect and a Location header), or it is in the HTML either as a meta element with a HTTP-Equiv attribute or a JavaScript action (e.g. window.location = ...). &lt;br&gt;&lt;br&gt; The function will be called with two arguments: &lt;ol&gt; &lt;li&gt;the new url to which the location would be changed, &lt;/li&gt; &lt;li&gt;and a boolean flag that will be true if it&apos;s an HTTP status+location redirect and false if it&apos;s a location change due to HTML or JavaScript. &lt;/li&gt; &lt;/ol&gt; &lt;br&gt;&lt;br&gt; If the function returns a true, the redirection is allowed; if it returns a false the location is not changed.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="onsslcerterror" access="read-write" scope="instance" type="Function">
                <description>Set to a custom callback function to call if an SSL request fails due to a certificate error. &lt;br&gt;&lt;br&gt; The function will be called with the following arguments: &lt;ol&gt; &lt;li&gt;the certInfo (an object containing properties describing the certificate and its status), &lt;/li&gt; &lt;li&gt;the cert (certificate) itself (an object containing properties describing the certificate and its status), &lt;/li&gt; &lt;li&gt;the XHR&apos;s socketInfo&lt;/li&gt; &lt;li&gt;the XHR&apos;s sslStatus&lt;/li&gt; &lt;li&gt;the XHR&apos;s targetSite&lt;/li&gt; &lt;/ol&gt; &lt;br&gt;&lt;br&gt; It should return true to ignore the error, or false to abort the request. This is only available server-side. If (and only if) this is set to a function that returns true, information about the failure can be retrieved from the extended response&apos;s certInfo property.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.ScriptInfo" superclass="Object">
        <description>Container object used during runat attribute and property processing.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>This is a container object used during runat attribute and property processing. This allows all runat-related state to be passed around in one simple container object. At the same time, this formalizes what is being passed around which is preferable to using a simple anonymous object.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.ScriptInfo">
                        <description>Returns an instance of ScriptInfo.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
    </class>
    <class type="Jaxer.ScriptProcessor" superclass="Object">
        <description>This class processes script elements to determine which of its functions fall into the various runat categories.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor visibility="advanced" scope="instance">
                <description>This class processes script elements to determine which of its functions fall into the various runat categories. This class collects each function into its appropriate category and provides convenience functions to generate the necessary source code for this block needed for both client-side and server-side use.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="element" usage="required" type="ScriptElement">
                        <description>The underlying script element to be processed by this class</description>
                    </parameter>
                    <parameter name="jaxerProxies" usage="required" type="Object">
                        <description>If a non-null object, its properties are the function names that should be proxied even if not explicitly marked as such. If null, no functions should be proxied.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.ScriptProcessor">
                        <description>Returns an instance of ScriptProcessor.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
    </class>
    <class type="Jaxer.SendOptions" superclass="Object">
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="DEFAULT_TIMEOUT" access="read-write" scope="static" type="Number">
                <description>The default value to use when creating new Jaxer.XHR.SendOptions() objects, in milliseconds. It&apos;s only used for async requests. It defaults to 30 seconds (30000) on the server, and 0 on the client. 0 means no timeout. NOTE: To set the the default timeout to use when creating new XHR()s (i.e. XMLHttpRequests), set Jaxer.XHR.defaults.timeout instead.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.Serialization" superclass="Object">
        <description>This is the namespace that contains Jaxer serialization methods. The Jaxer serializer uses the familiar and popular JSON format. However, additional functionality has been provided to allow for serialization of more complex data structures. Specifically, this module supports cyclical data structures, multiple references, and custom typeserializers. Each of these is described below. Cyclical data structures occur when an object (or array) contains a descendent structure that also references that same object. For example, a DOM node has references to its children and these children also have references to the DOM node (their parentNode). In a traditional JSON environment, if you were to try to serialize this structure, you would end up in an infinite loop or an exception would occur as the serializer traversed the parent node, its child nodes, and then back up to the parent node through the child&apos;s parentNode property. Indeed, the serializer couldn&apos;t get past the first child in this scenario. The Jaxer serializer bypasses this via the use of marker properties and specially formatted strings referred to as &quot;references&quot;. Multiple references are similar to cyclical data structures in that an object is referenced two or more times. However, this does not necessarily create a cycle. For example, say you have the following code: &lt;pre&gt;var car = { color: &quot;blue&quot;, price: 10000 }; var cars = [ car, car ] ;&lt;/pre&gt; As you can see, the same car object has been referenced twice in the array. In a traditional JSON serializer, each instance of car would be serialized separately. Unfortunately, that alters the data structure that will be accessed after deserialization in a subtle way. You will end up with two independent car objects which means that changing the price of one will not change the price of the other as would have happened before the serialization/deserialization cycle. In order to restore the same references, Jaxer serializes the car only once and then leaves placeholders to point to that single instance. During deserialization, the placeholders are replaced with actual references to the deserialized object, thus restoring the original data structure as it appeared before serialization. Some data types cannot be expressed in JSON. For example, the Date type is not listed as a valid type in JSON. So, in order to support this type and potentially many others, the serializer allows the developer to register custom serializers and associated deserializers for a given type. When the serializer sees these types, the custom handlers are used to convert the item to a string. It is then the responsibility of the custom deserializer to restore the string to the original type. For example, Jaxer supports XMLDocuments. The custom serializer creates an XML string which is specially tagged so the deserializer can restore the XML string back to an XMLDocument. Next, we briefly discuss how Jaxer recognizes cycles, multi-references, and how it represents references and custom serialized objects. The Jaxer serializer makes an initial pass over the data being serialized. Each object, array, and custom serialization object is tagged with a unique index. (Note that some objects do not allow properties to be added to them. In this situation, the Jaxer serializer maintains an array of these items. This array is searched when new items are encountered and serves the same purpose as the id property). Before adding the index, we first check if we have already indexed the item. If the tag already exists, then we&apos;ve either exposed a cycle or a multi-reference. At this point, the serializer knows to switch to another JSON format that minimizes the amount of data to be serialized. References and custom serialization objects each make use of specially formatted strings. To make this a bit clearer, we create an array of two references to the same date object. &lt;pre&gt;var d = new Date(); var items = [ d, d ] ; var json = Jaxer.Serialization.toJSONString(items);&lt;/pre&gt; The resulting JSON string will look like the following: &lt;pre&gt; [ [ &quot;~1~&quot;,&quot;~1~&quot; ] , &quot;~Date:2007-08-17T11:57:30~&quot; ] &lt;/pre&gt; This format always has a top-level array whose first element is the root item that was originally being serialized. In this case, our top-most element was an array. As an aside, the only top-level elements that can generate this format are arrays, objects, and custom serialization objects. The first special format used for references and is defined with &quot;~ # ~&quot; where # is a number. The number is the index into the top-level array. The element at that index is the item that needs to be referenced where the reference string lives. In this example, once deserialization has completed, both instances of &quot;~1~&quot; will have been replaced with references to the deserialized date object. The next custom format, the date, shows how custom serializers emit text. The first item after the ~ but before the : is the name of the type. This is the fully-qualified type as you would have to type it in JavaScript to get to that type&apos;s constructor. The string after the : is in a format as generated by the type&apos;s custom serializer. The resulting string generated by the custom serializer is in turn serialized as a string, so the deserializer does not need to handle special characters or escape sequences. It is the responsibility of the custom deserializer to consume that text and to return effectively a clone of the original object. This module also allows a developer to register alternate top-level serialization and deserialization methods. The default method for serialization is &apos;nativeJSON&apos; which attempts to use the built-in JSON support in the user agent, when available. In cases where &apos;nativeJSON&apos; is not supported, the &apos;JSON&apos; mode will be used. The developer can also use &apos;JSON&apos; along with more options to customize serialization for special values like &apos;undefined&apos;, and &apos;INFINITY&apos;, for example. Finally, there is a &apos;Jaxer&apos; mode as described above. This mode is used by Jaxer&apos;s framework and callback mechanisms and is available to developers that may need this advanced functionality. These serialization methods are specificed in a separate optional parameter to the &quot;toJSONString&quot; and &apos;fromJSONString&quot; functions. Note that if the developer uses a non-default serialization method, then the developer is also responsible for using this same method for deserialization. Currenty, this implementation cannot detect which method was used for the original serialization step</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="addDeserializer" scope="static">
                <description>Add a top-level JSON serializer</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The unique name of the deserializer. This name can be specified in the options object provided to the fromJSONString function. That will select this deserializer as the top-level function to deserialize the specified object. Note that case is not significant</description>
                    </parameter>
                    <parameter name="deserializer" usage="required" type="Function">
                        <description>The function used to deserialized the JSON string created by the associated serializer.</description>
                    </parameter>
                    <parameter name="beforeDeserialization" usage="optional" type="Function">
                        <description>An optional function that will be called before the top-level deserialization process begins. This function should take a single parameter which will be the options object provided to the fromJSONString function. Note that the options object will be an inherited clone of the object sent to fromJSONString. This allows this function to initialize any data structures needed by the deserializer without altering the original options object passed into fromJSONString</description>
                    </parameter>
                    <parameter name="afterDeserialization" usage="optional" type="Function">
                        <description>An optional function that will be called after the top-level deserialization process ends. This function should take a single parameter which will be the options object provided to the fromJSONString function. Note that the options object will be an inherited clone of the object sent to the fromJSONString.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addSerializer" scope="static">
                <description>Add a top-level JSON serializer</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The unique name of the serializer. This name can be specified in the options object provided to the toJSONString function. That will select this serializer as the top-level function to serialize the specified object. Note that case is not significant</description>
                    </parameter>
                    <parameter name="serializer" usage="required" type="Function">
                        <description>The function used to serialize data. This function should take two arguments: the actual data to serialize and an options object</description>
                    </parameter>
                    <parameter name="beforeSerialization" usage="optional" type="Function">
                        <description>An optional function that will be called before the top-level serialization process begins. This function should take a single parameter which will be the options object provided to the toJSONString function. Note that the options object will be an inherited clone of the object sent to the toJSONString. This allows this function to initialize any data structures needed by the serializer without altering the original options object passed into toJSONString</description>
                    </parameter>
                    <parameter name="afterSerialization" usage="optional" type="Function">
                        <description>An optional function that will be called after the top-level serialization process ends. This function should take a single parameter which will be the options object provided to the toJSONString function. Note that the options object will be an inherited clone of the object sent to the toJSONString.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="addTypeHandler" scope="static">
                <description>Add handlers for custom serialization/deserialization</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The fully-qualified name of the type. This should reflect the full, potentially dotted, notation you would need to use to access this type&apos;s constructor from the global context.</description>
                    </parameter>
                    <parameter name="serializer" usage="required" type="Function">
                        <description>A function that takes an instance of the type it serializes and that returns a string representation of the type suitable as input into the deserializer</description>
                    </parameter>
                    <parameter name="deserializer" usage="required" type="Function">
                        <description>A function that takes a string produced by the custom serializer and that returns a new instance of the custom supported type.</description>
                    </parameter>
                    <parameter name="canSerialize" usage="optional" type="Function">
                        <description>An optional function that takes an object instance and returns a boolean. This function should return true if it the current handler is able to serialize the object passed to it.</description>
                    </parameter>
                    <parameter name="canDeserialize" usage="optional" type="Function">
                        <description>An optional function that takes an object instance and returns a boolean. This function should return true if it the current handler is able to deserialize the string passed to it.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="fromJSONString" scope="static">
                <description>Reconstructs a Javascript data structure from a JSON string. Note that the serialization mode (&apos;Jaxer&apos;, &apos;JSON&apos;, or &apos;nativeJSON&apos;) can be specified in the &quot;options&quot; parameter with the &apos;as&apos; property. This will default to &apos;nativeJSON&apos; when either no options are passed in or if the &apos;as&apos; property is not defined. See Jaxer.Serialization.toJSONString for more details.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Serialization.toJSONString"/>
                </references>
                <parameters>
                    <parameter name="json" usage="required" type="String">
                        <description>A string in the JSON format</description>
                    </parameter>
                    <parameter name="options" usage="required" type="Object">
                        <description>The options objecct which can be used to control deserialization</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The resulting object graph after converting the JSON string to the equivalent Javascript data structure</description>
                    </return-type>
                </return-types>
            </method>
            <method name="removeSerializer" scope="static">
                <description>Remove support for the custom JSON serializer</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the serializer to remove. Note that case is not significant</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>Returns true if the serializer was successfully removed. Note that this function will return false if you attempt to remove a handler that is not already registered or if it is a built-in serializer like &quot;jaxer&quot;.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="removeTypeHandler" scope="static">
                <description>Remove support for custom serialization/deserialization for the specified type</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The fully qualified name of the type to remove</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>Returns true if the handler was successfully removed. Note that this function will return false if you attempt to remove a handler that is not already registered.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="toJSONString" scope="static">
                <description>Convert the specified object into a JSON representation. Note that we have modified JSON to support object references (cycles) and to convert Dates into a special format that will be recognized by our code during deserialization. This function includes an optional second parameter which can be used to control how the data is serialized. If the options parameter defines an &apos;as&apos; property, that will be used to select the serialization format. Currently, the values &apos;Jaxer&apos;, &apos;JSON&apos;, and &apos;nativeJSON&apos; are supported. &apos;Jaxer&apos; includes support for cycles, multi-refs, and custom type serializers. &apos;JSON&apos; and &apos;nativeJSON&apos; follow the serialization format and semantics as defined by Douglas Crockford on the json.org website. When specifying the &apos;Jaxer&apos; serializer, additional options are available. The &quot;useCustomSerializers&quot; has a boolean value which defaults to true. When this property is true, any type serializers that have been registered via addTypeHandler will be used in the serialization process. When this value is false, items needing custom serialization will be ignored as they would be in the &quot;JSON&quot; format. The &quot;undefinedSerializationAction&quot; property determines how the &apos;undefined&apos; value is handled. The action defaults to &apos;serialize&apos;, but &apos;throw&apos; is also supported which will throw an exception when trying to serialize &apos;undefined&apos;. When specifying the &apos;JSON&apos; serializer, additional options are available. The &apos;maxDepth&apos; property, which defaults to 10, is used to prevent deep recursion. If the recursion level is encountered, the &apos;maxDepthAction&apos; property determines the serializer&apos;s action. &apos;truncate&apos; will emit a &quot;__truncated__&quot; string in place of the object that would cause the recursion level to be exceeded. &apos;throw&apos; will throw an exception. The &apos;dateSerializationAction&apos; property is used to determine how dates are processed. A value of &apos;serialize&apos; will convert the date to a specially formatted string as described in the json.org example code. A value of &apos;throw&apos; will throw an exception when a date is encountered. Finally, a value of &quot;return object&quot; will return an empty object in place of the Date itself. The &apos;undefinedSerializationAction&apos; property is used to determine how &apos;undefined&apos; is processed. A value of &apos;serialize&apos; will convert the value to &apos;undefined&apos;. &apos;throw&apos; will throw an exception and &apos;nullify&apos; will return &apos;null&apos;. The &apos;specialNumberSerializationAction&apos; property is used to determine how Infinity, -Infinity, and NaN are processed. A value of &apos;serialize&apos; will convert the value to their text representation which is the same as the identifier used to represent them. &apos;throw&apos; will throw an exception and &apos;nullify&apos; will return null. When specifying the &apos;nativeJSON&apos; serializer, the built-in native support for JSON serialization will be used, when available. This serialization does not support any custom options. In the case where &apos;nativeJSON&apos; is specified but is not available, this mode will fallback to the &apos;JSON&apos; mode with options specified in that mode to match the behavior of the native JSON implementation as specificed in the ECMAScript 3.1 specification. Note that other serializers can be registered with Jaxer. Most likely those serializers will define their own set of options. You will need to refer to the implementors documentation to determine those properties, their values, and their associated semantics.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="data" usage="required" type="Object">
                        <description>The source object to convert to a JSON string</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>An optional object used to specify configuration info to the selected serializer</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The resulting JSON string which can be reversed back into the source object via Serialization.fromJSONString</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.SessionManager" superclass="Object">
        <description>A namespace object holding functions and members used to manage a user session across multiple requests.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="keyFromRequest" visibility="advanced" scope="static">
                <description>Get session key from the client via cookie, or create one as needed&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="appKey" usage="required" type="String">
                        <description>The key that uniquely identifies the current application</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A session key that can be used to track the current session (new or existing)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="keyToResponse" visibility="advanced" scope="static">
                <description>Set session key on the response to the client via a cookie&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="appKey" usage="required" type="String">
                        <description>The key that uniquely identifies the current application</description>
                    </parameter>
                    <parameter name="key" usage="required" type="String">
                        <description>The session key to use</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Socket" superclass="Object">
        <description>Network socket utility object for simple character-based (non-binary) socket access.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>The constructor of a network socket object used for character-based (non-binary) operations</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Socket">
                        <description>Returns an instance of Socket.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <methods>
            <method name="available" scope="instance">
                <description>How many bytes (not characters) are currently available on the stream?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Number">
                        <description>the number of bytes available</description>
                    </return-type>
                </return-types>
            </method>
            <method name="close" scope="instance">
                <description>Close the socket</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="flush" scope="instance">
                <description>Flush the socket&apos;s output stream</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="open" scope="instance">
                <description>Open the socket for communication</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="host" usage="required" type="String">
                        <description>The host to connect to</description>
                    </parameter>
                    <parameter name="port" usage="required" type="Number">
                        <description>The port on which to connect</description>
                    </parameter>
                </parameters>
            </method>
            <method name="readLine" scope="instance">
                <description>Read a single line from the socket</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>The text read in</description>
                    </return-type>
                </return-types>
            </method>
            <method name="readString" scope="instance">
                <description>Read characters from the socket into a string</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="count" usage="required" type="Number">
                        <description>How many characters to read</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The text read in</description>
                    </return-type>
                </return-types>
            </method>
            <method name="writeString" scope="instance">
                <description>Write a string to the socket</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="data" usage="required" type="String">
                        <description>The text to write</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.System" superclass="Object">
        <description>Namespace object holding functions and members used to access operating system resources and processes.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="desktopFolder" access="read-write" scope="static" type="String">
                <description>The path on disk of the current user&apos;s desktop folder</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="executableFolder" access="read-write" scope="static" type="String">
                <description>The path on disk of the current executable&apos;s folder</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="executableUrl" access="read-write" scope="static" type="String">
                <description>The file://... URL of the current executable&apos;s folder</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="homeFolder" access="read-write" scope="static" type="String">
                <description>The path on disk of the current user&apos;s home folder</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="OS" access="read-write" scope="static" type="String">
                <description>A string identifying the current operating system</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="separator" access="read-write" scope="static" type="String">
                <description>The filesystem separator character (either \ or /)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="tempFolder" access="read-write" scope="static" type="String">
                <description>The path on disk of the system&apos;s temp folder</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="launch" scope="static">
                <description>Ask the operating system to attempt to open the file. This simulates &quot;double clicking&quot; the file on your platform. This routine only works on platforms which support this functionality. This is non-blocking and script execution will continue.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="path" usage="required" type="String">
                        <description>A String containing the path to the file or a Jaxer.File object referencing the filesystem object</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Thread" superclass="Object">
        <description>A namespace object used to access threading-related functionality, such as async processing</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="currentThread" access="read-write" scope="static" type="Object">
                <description>The currently executing thread.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="DEFAULT_MAX_MILLIS" access="read-write" scope="static" type="Number">
                <description>The default number of milliseconds to wait before timing out waitFor. Set to 3000 (3 seconds) by default).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="waitFor" scope="static">
                <description>Allows asynchronous processing (e.g. async XHR requests, async Sandbox loading, etc.) to happen and waits for them to complete -- completion is indicated by a test function returning true. You can specify a maximum time you want to wait before giving up and continuing.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="testFunction" usage="required" type="Function">
                        <description>The function to evaluate periodically to see whether we should continue to wait. When testFunction returns true, the waitFor function exits.</description>
                    </parameter>
                    <parameter name="maxMillis" usage="optional" type="Number">
                        <description>The number of milliseconds to wait for testFunction to return true before timing out and exiting. If this is zero or negative, waits indefinitely (though other timeouts may intervene)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if testFunction returned true, false if the timeout was reached before then</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util" superclass="Object">
        <description>A namespace to hold a miscellany of generic utility functions and other objects. In particular, it also holds sub-namespaces for more specific operations.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="getGlobalContext" visibility="advanced" scope="static">
                <description>Find the global context (&apos;window&apos;, in the browser) to which the given object is ultimately parented. If no object is given, returns the developer page&apos;s window object, and if that does not exist for some reason, returns the framework&apos;s global context.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="optional" type="Object">
                        <description>The object whose global context is to be found</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The global context (&apos;window&apos;, in the browser)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="clone" scope="static">
                <description>Clones an object (actually any argument) and returns the clone. If obj is of type &quot;object&quot;, then the clone is created from the same constructor (but without any arguments). For a deep clone, every (enumerable) property is itself cloned; otherwise, every (enumerable) property is simply copied (by value or reference).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="required" type="Object">
                        <description>The object to clone. If it&apos;s not of type object, its value is simply copied and returned. It is not altered.</description>
                    </parameter>
                    <parameter name="deep" usage="optional" type="Boolean">
                        <description>Whether to make a deep clone or a shallow one (just copy properties); by default, false.</description>
                    </parameter>
                    <parameter name="maxDepth" usage="optional" type="Number">
                        <description>An optional maximum cloning depth. By default it&apos;s 10. This prevents infinite loops.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The new, cloned object.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="concatArrays" scope="static">
                <description>Returns an array whose elements consist of the elements of all the arrays or array-like objects passed in as arguments. If any of the arguments is null or undefined (i.e. is equivalent to false) it is skipped.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="..." usage="optional" type="Object">
                        <description>Any number of arrays or array-like objects (e.g. a function&apos;s arguments meta-array). Note that, unlike Array.concat, the arguments here need to be arrays or array-like objects that have a length property and an indexer (i.e. obj [ i ] is defined)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>The concatenated array</description>
                    </return-type>
                </return-types>
            </method>
            <method name="extend" scope="static">
                <description>Extends an object by (shallow) cloning it and then copying all (enumerable) properties from the extensions object to the new cloned object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="required" type="Object">
                        <description>The object to use as a base and extend. It is not altered.</description>
                    </parameter>
                    <parameter name="extensions" usage="required" type="Object">
                        <description>The object to use as extensions -- usually this is a simple hashmap of properties and their values.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The extended clone.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="filterInPlace" scope="static">
                <description>Remove items from an array that do not pass a given criteria. Each item in the specified array will be passed to the filtering function. If that function returns true, then the item will remain in the specified array. If the function returns false, the item is removed from the specified array. Note that the specified array is altered in place. If you prefer to create a new array, leaving the original intact, then use the native Array&apos;s filter method instead.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="array" usage="required" type="Array">
                        <description>The source array to be filtered</description>
                    </parameter>
                    <parameter name="func" usage="required" type="Function">
                        <description>The filtering function to apply to each array item. This filter has two parameters. The first parameter is the current item in the array that is potentially being filtered. The second parameter is the index of the item potentially being filtered. The index can be used in cases where the filtering decision needs to be determined based on proximity to other items in the array</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>Returns the filtered array containing only items that were approved by the filtering function. Note that this instance will be the same as the instance passed into the function. This is provided as a convenience and to keep this function signature the same as Util.filter&apos;s signature.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="findInGlobalContext" scope="static">
                <description>Finds the named object within the global context (&apos;window&apos;, in the browser) to which the second argument is ultimately parented. If no second argument is given, finds the named object in the developer page&apos;s window object, and if that does not exist for some reason, finds it in the Jaxer framework&apos;s global context.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="objectName" usage="required" type="String">
                        <description>The name of the object to find. If this name contains periods (&quot;.&quot;) then it&apos;s split into subnames and each is used to search in the former. So &quot;a.b.c&quot; means get the value of the property &quot;a&quot; in the global context, and in it get the value of the property &quot;b&quot;, and in it get the value of the property &quot;c&quot;. If any of these is not defined it returns undefined.</description>
                    </parameter>
                    <parameter name="objForGlobalContext" usage="optional" type="Object">
                        <description>The object whose global context is the one to use for finding the named object, which defaults to the developer page&apos;s window object (or else the Jaxer framework&apos;s global)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The found object, or undefined if it cannot be found</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getPropertyNames" scope="static">
                <description>Get all property names or filtered subset of names from an object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="object" usage="required" type="Object">
                        <description>The source object</description>
                    </parameter>
                    <parameter name="filter" usage="optional" type="Function">
                        <description>An optional filter function to apply to the property&apos;s name and value. filter(name, value) should return something that&apos;s equivalent to true if the property is to be included.</description>
                    </parameter>
                    <parameter name="asHash" usage="optional" type="Boolean">
                        <description>If true, returns the result as a hash (with all values set to true)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>A list or hash of the property names depending on the value provided to the asHash parameter</description>
                    </return-type>
                </return-types>
            </method>
            <method name="hasProperties" scope="static">
                <description>Determine if the specified object contains all properties in a list of property names.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="object" usage="required" type="Object">
                        <description>The source object</description>
                    </parameter>
                    <parameter name="properties" usage="required" type="String[]">
                        <description>The list of property names to test on the specified object</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>Returns true if all properties in the list exist on the specified object</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isArray" scope="static">
                <description>Tests whether the given object is an Array object (even if it&apos;s from a different global context). This returns false on Array-like objects that are not in fact arrays, such as the arguments object inside a function.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="required" type="Object">
                        <description>The object to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>True if it&apos;s an Array (or at least seems to be an Array), false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isDate" scope="static">
                <description>Tests whether the given object is a Date object (even if it&apos;s from a different global context)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="required" type="Object">
                        <description>The object to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>True if it&apos;s a Date (or at least seems to be a Date), false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isEmptyObject" scope="static">
                <description>Tests whether the given object is devoid of any (enumerable) properties.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="obj" usage="required" type="Object">
                        <description>The object to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>false if there is (at least) one enumerable property, true otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isNativeFunction" scope="static">
                <description>Tests whether the given function is native (i.e. for which there is actually no source code)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="func" usage="required" type="Function">
                        <description>The function to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>True if it&apos;s a native function, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isNativeFunctionSource" scope="static">
                <description>Tests whether the given string is the source of a native function (i.e. for which there is actually no source code)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="source" usage="required" type="String">
                        <description>The source string to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>True if it&apos;s a native function&apos;s source, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="mapInPlace" scope="static">
                <description>Replace each item of an array by applying a function and then replacing the original item with the results of that function.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="array" usage="required" type="Array">
                        <description>The source array</description>
                    </parameter>
                    <parameter name="func" usage="required" type="Function">
                        <description>The function to apply to each of the items in the source array. The function has two parameters. The first parameter is the current item in the array that is being transformed. The second parameter is the index of the item being transformed.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>Returns the mapped array. Note that this instance will be the same as the instance passed into the function. This is provided as a convenience and to keep this function&apos;s signature the same as the signature of the native Array&apos;s map mathod.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="sleep" scope="static">
                <description>Does nothing for the given number of milliseconds</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="milliseconds" usage="required" type="Number">
                        <description>The number of milliseconds to pause.</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.CRC32" superclass="Object">
        <description>Namespace used to hold functions and other objects for using CRC32</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="getCRC" scope="static">
                <description>Create a CRC32 from an array of bytes. The user may specify the starting offset within the array and the total number of bytes past the offset to include in the resulting CRC32.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="http://en.wikipedia.org/wiki/Cyclic_redundancy_check"/>
                </references>
                <parameters>
                    <parameter name="data" usage="required" type="Array">
                        <description>An array of byte values</description>
                    </parameter>
                    <parameter name="offset" usage="optional" type="Number">
                        <description>The optional offset within the array where the calculated CRC32 should start</description>
                    </parameter>
                    <parameter name="count" usage="optional" type="Number">
                        <description>The optional number of bytes starting from the offset to include in the resulting CRC32.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number">
                        <description>The resulting CRC32</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getStringCRC" scope="static">
                <description>Create a CRC32 from the characters of a string</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="http://en.wikipedia.org/wiki/Cyclic_redundancy_check"/>
                </references>
                <parameters>
                    <parameter name="text" usage="required" type="String">
                        <description>The source string to convert</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Number">
                        <description>The resulting CRC32 of the source string</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.Certificate" superclass="Object">
        <description>Namespace used for handling information related to SSL certificates</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
    </class>
    <class type="Jaxer.Util.Certificate.CertInfo" superclass="Object">
        <description>Information about an SSL Certificate</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Holds information about an SSL certificate and the SSL connection that returned it. It repackages the information in the Mozilla objects used to construct it.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="socketInfo" usage="required" type="Object">
                        <description>A network communication context that can be used to obtain more information about the connection relevant to this certificate. This is an instance of Mozilla&apos;s nsIInterfaceRequestor (http://www.xulplanet.com/references/xpcomref/ifaces/nsIInterfaceRequestor.html)</description>
                    </parameter>
                    <parameter name="sslStatus" usage="required" type="Object">
                        <description>A Mozilla object that contains information about the certificate. This is an instance of Mozilla&apos;s nsISSLStatus (http://www.xulplanet.com/references/xpcomref/ifaces/nsISSLStatus.html)</description>
                    </parameter>
                    <parameter name="targetSite" usage="required" type="String">
                        <description>The site name that was used to open the connection from which the certificate was returned</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Util.Certificate.CertInfo">
                        <description>Returns an instance of CertInfo.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="cert" access="read-write" scope="instance" type="Object">
                <description>The Mozilla object representing an X.509 certificate. See nsIX509Cert (http://www.xulplanet.com/references/xpcomref/ifaces/nsIX509Cert.html)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="emailAddress" access="read-write" scope="instance" type="String">
                <description>The primary email address of the certificate, if present.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isDomainMismatch" access="read-write" scope="instance" type="Boolean">
                <description>Is there a domain mismatch between the domain on this certificate and the domain that served it?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isNotValidAtThisTime" access="read-write" scope="instance" type="Boolean">
                <description>Is this certificate not trusted at this time -- because its validity period has not yet started or has already ended?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isSelfSigned" access="read-write" scope="instance" type="Boolean">
                <description>Is this a self-signed certificate?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="issuerName" access="read-write" scope="instance" type="String">
                <description>The subject identifying the issuer certificate.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="issuerOrganization" access="read-write" scope="instance" type="String">
                <description>The issuer subject&apos;s organization.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="isUntrusted" access="read-write" scope="instance" type="Boolean">
                <description>Is this certificate untrusted -- either because it has a missing or untrusted issuer or because it is self-signed?</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Certificate.CertInfo.prototype.isSelfSigned"/>
                </references>
            </property>
            <property name="organization" access="read-write" scope="instance" type="String">
                <description>The subject&apos;s organization.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="subjectName" access="read-write" scope="instance" type="String">
                <description>The subject owning the certificate.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="targetSite" access="read-write" scope="instance" type="String">
                <description>The site name that was used to open the connection from which the certificate was returned.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="validity" access="read-write" scope="instance" type="String">
                <description>This certificate&apos;s validity period: the notBefore date, followed by &apos;/&apos;, followed by the notAfter date.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.Util.Cookie" superclass="Object">
        <description>Namespace object holding functions and members for working with client (browser) cookies on the server side.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="get" scope="static">
                <description>Get a cookie key value</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the cookie to retrieve</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>Returns the value of the specified cookie or null if the value does not exist.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="getAll" scope="static">
                <description>Get an object containing all cookie keys and values from the current request. Each cookie name will become a property on the object and each cookie value will become that property&apos;s value.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Object">
                        <description>The resulting object of all cookie key/value pairs</description>
                    </return-type>
                </return-types>
            </method>
            <method name="parseSetCookieHeaders" scope="static">
                <description>Parses a given array of an HTTP response&apos;s &quot;Set-Cookie&quot; header strings to extract the cookie fields</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="setCookieStrings" usage="required" type="Array">
                        <description>An array of the (string) values of the HTTP response&apos;s Set-Cookie headers</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>An array of objects, one per Set-Cookie header, with properties corresponding to the name, value, expires, path, and domain values in the header</description>
                    </return-type>
                </return-types>
            </method>
            <method name="set" scope="static">
                <description>Set a cookie name/value pair</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the cookie to set</description>
                    </parameter>
                    <parameter name="value" usage="required" type="String">
                        <description>The value of the cookie</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.Crypto" superclass="Object">
        <description>The namespace that holds functions for Cryptographic hashing</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="MD2" scope="static">
                <description>Generate an MD2 Hash key for the provided content. Message Digest Algorithm 2 (MD2) is a cryptographic hash function developed by Ronald Rivest in 1989. The algorithm is optimized for 8-bit computers. MD2 is specified in RFC 1319. Although other algorithms have been proposed since, such as MD4, MD5 and SHA, even as of 2004 [ update ] MD2 remains in use in public key infrastructures as part of certificates generated with MD2 and RSA.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to generate the hask key.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the MD2 hash key for the provided content</description>
                    </return-type>
                </return-types>
            </method>
            <method name="MD5" scope="static">
                <description>Generate an MD5 Hash key for the provided content. In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value. As an Internet standard (RFC 1321), MD5 has been employed in a wide variety of security applications, and is also commonly used to check the integrity of files. However, it is now known to be partially insecure thus reducing its suitability for these purposes. An MD5 hash is typically expressed as a 32 digit hexadecimal number. MD5 was designed by Ron Rivest in 1991 to replace an earlier hash function, MD4. In 1996, a flaw was found with the design of MD5. While it was not a clearly fatal weakness, cryptographers began recommending the use of other algorithms, such as SHA-1 (which has since been found vulnerable itself). In 2004, more serious flaws were discovered making further use of the algorithm for security purposes questionable. In 2007 a group of researchers including Arjen Lenstra described how to create a pair of files that share the same MD5 checksum. In an attack on MD5 published in December 2008, a group of researchers used this technique to fake SSL certificate validity.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to generate the hash key.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the MD5 hash key for the provided content</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA1" scope="static">
                <description>Generate an SHA1 Hash key for the provided content. The SHA hash functions are a set of cryptographic hash functions designed by the National Security Agency (NSA) and published by the NIST as a U.S. Federal Information Processing Standard. SHA stands for Secure Hash Algorithm.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to generate the hash key.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA1 hash key for the provided content</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA256" scope="static">
                <description>Generate an SHA256 Hash key for the provided content. SHA-256 is novel hash function computed with a 32-bit word.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to generate the hash key.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA256 hash key for the provided content</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA384" scope="static">
                <description>Generate an SHA384 Hash key for the provided content. SHA-384 is simply a truncated version of the SHA512, computed with different initial values.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to generate the hash key.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA384 hash key for the provided content</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA512" scope="static">
                <description>Generate an SHA512 Hash key for the provided content. SHA-512 is novel hash function computed with a 64-bit word.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to generate the hash key.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA512 hash key for the provided content</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifyMD2" scope="static">
                <description>Verify an MD2 Hash key for the provided content.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to Verify the hask key.</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifyMD5" scope="static">
                <description>Verify an MD5 Hash key for the provided content.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to Verify the hash key.</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA1" scope="static">
                <description>Verify an SHA1 Hash key for the provided content.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to Verify the hash key.</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA256" scope="static">
                <description>Verify an SHA256 Hash key for the provided content.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to Verify the hash key.</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA384" scope="static">
                <description>Verify an SHA384 Hash key for the provided content.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to Verify the hash key.</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA512" scope="static">
                <description>Verify an SHA512 Hash key for the provided content.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="content" usage="required" type="String">
                        <description>The content used to Verify the hash key.</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.Crypto.File" superclass="Object">
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="MD2" scope="static">
                <description>Generate an MD2 Hash key for the provided file. Message Digest Algorithm 2 (MD2) is a cryptographic hash function developed by Ronald Rivest in 1989. The algorithm is optimized for 8-bit computers. MD2 is specified in RFC 1319. Although other algorithms have been proposed since, such as MD4, MD5 and SHA, even as of 2004 [ update ] MD2 remains in use in public key infrastructures as part of certificates generated with MD2 and RSA.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to generate the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the MD2 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="MD5" scope="static">
                <description>Generate an MD5 Hash key for the provided file. In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value. As an Internet standard (RFC 1321), MD5 has been employed in a wide variety of security applications, and is also commonly used to check the integrity of files. However, it is now known to be partially insecure thus reducing its suitability for these purposes. An MD5 hash is typically expressed as a 32 digit hexadecimal number. MD5 was designed by Ron Rivest in 1991 to replace an earlier hash function, MD4. In 1996, a flaw was found with the design of MD5. While it was not a clearly fatal weakness, cryptographers began recommending the use of other algorithms, such as SHA-1 (which has since been found vulnerable itself). In 2004, more serious flaws were discovered making further use of the algorithm for security purposes questionable. In 2007 a group of researchers including Arjen Lenstra described how to create a pair of files that share the same MD5 checksum. In an attack on MD5 published in December 2008, a group of researchers used this technique to fake SSL certificate validity.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to generate the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the MD5 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA1" scope="static">
                <description>Generate an SHA1 Hash key for the provided file. The SHA hash functions are a set of cryptographic hash functions designed by the National Security Agency (NSA) and published by the NIST as a U.S. Federal Information Processing Standard. SHA stands for Secure Hash Algorithm.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to generate the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA1 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA256" scope="static">
                <description>Generate an SHA256 Hash key for the provided file. SHA-256 is novel hash function computed with a 32-bit word.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to generate the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA256 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA384" scope="static">
                <description>Generate an SHA384 Hash key for the provided file. SHA-384 is simply a truncated version of the SHA512, computed with different initial values.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to generate the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA512 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="SHA512" scope="static">
                <description>Generate an SHA512 Hash key for the provided file. SHA-512 is novel hash function computed with a 64-bit word.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to generate the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>A string containing the SHA512 hash key for the provided file</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifyMD2" scope="static">
                <description>Verify an MD2 Hash key for the provided file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to Verify the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifyMD5" scope="static">
                <description>Verify an MD5 Hash key for the provided file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to Verify the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA1" scope="static">
                <description>Verify an SHA1 Hash key for the provided file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to Verify the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA256" scope="static">
                <description>Verify an SHA256 Hash key for the provided file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to Verify the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA384" scope="static">
                <description>Verify an SHA384 Hash key for the provided file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to Verify the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="verifySHA512" scope="static">
                <description>Verify an SHA512 Hash key for the provided file.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="file" usage="required" type="Jaxer.File">
                        <description>The File used to Verify the hash key. Can be either a Jaxer.File object or a String containing the absolute path to the file</description>
                    </parameter>
                    <parameter name="hash" usage="required" type="String">
                        <description>The hash value to compare.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>true if the hash matches, false if not.</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.DOM" superclass="Object">
        <description>Namespace used to hold functions and other objects that extend JavaScript&apos;s DOM capabilities.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="createScript" scope="static">
                <description>Create a new script element with the specified content and attributes</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="doc" usage="required" type="Document">
                        <description>The DocumentElement to use when creating elements for the active document.</description>
                    </parameter>
                    <parameter name="contents" usage="required" type="String">
                        <description>The text content for the script element. This value will be set via innerHTML once the new script element has been created</description>
                    </parameter>
                    <parameter name="attributes" usage="optional" type="Object">
                        <description>A list of attributes and attribute values to apply to the new ScriptElement. Each property name will become the attribute name and each property value will become that attributes value. Note that no escaping is done on the attributes values, so it is expected those values are valid attribute values. If this is omitted, a default type attribute will be used if set in Jaxer.Config.DEFAULT_EMITTED_SCRIPT_TYPE</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="ScriptElement">
                        <description>The new script element with content and attributes applied.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="hashToAttributesString" scope="static">
                <description>Convert an object&apos;s properties and property values into a string of attributes suitable for use in creating a string representation of an HTMLElement. Each property is used as the attribute name and each property value becomes the attribute value. Attribute values are surrounding in double-quotes and all property values containing double-quotes will have those characters escaped with backslashes.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="hash" usage="required" type="Object">
                        <description>The source object</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The resulting string of attribute name/value pairs</description>
                    </return-type>
                </return-types>
            </method>
            <method name="insertScriptAfter" scope="static">
                <description>Creates a new script element and adds it as the next sibling of the specified element in the DOM.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="Object">
                        <description>The text content for the script element. This value will be set via innerHTML once the new script element has been created</description>
                    </parameter>
                    <parameter name="elt" usage="required" type="Node">
                        <description>The element in the DOM after which the new script element will be inserted</description>
                    </parameter>
                    <parameter name="attributes" usage="optional" type="Object">
                        <description>A list of attributes and attribute values to apply to the new ScriptElement. Each property name will become the attribute name and each property value will become that attributes value. Note that no escaping is done on the attributes values, so it is expected those values are valid attribute values</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="ScriptElement">
                        <description>The new script element with content and attributes applied.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="insertScriptAtBeginning" scope="static">
                <description>Creates a new script element and adds it as the first child of a specified element in the DOM.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="Object">
                        <description>The text content for the script element. This value will be set via innerHTML once the new script element has been created</description>
                    </parameter>
                    <parameter name="elt" usage="required" type="Node">
                        <description>The element in the DOM where the new script element will be added as the element&apos;s first child.</description>
                    </parameter>
                    <parameter name="attributes" usage="optional" type="Object">
                        <description>A list of attributes and attribute values to apply to the new ScriptElement. Each property name will become the attribute name and each property value will become that attributes value. Note that no escaping is done on the attributes values, so it is expected those values are valid attribute values</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="ScriptElement">
                        <description>The new script element with content and attributes applied.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="insertScriptAtEnd" scope="static">
                <description>Creates a new script element and adds it as the last child of a specified element in the DOM.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="Object">
                        <description>The text content for the script element. This value will be set via innerHTML once the new script element has been created</description>
                    </parameter>
                    <parameter name="elt" usage="required" type="Node">
                        <description>The element in the DOM where the new script element will be added as the element&apos;s last child.</description>
                    </parameter>
                    <parameter name="attributes" usage="optional" type="Object">
                        <description>A list of attributes and attribute values to apply to the new ScriptElement. Each property name will become the attribute name and each property value will become that attributes value. Note that no escaping is done on the attributes values, so it is expected those values are valid attribute values</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="ScriptElement">
                        <description>The new script element with content and attributes applied.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="insertScriptBefore" scope="static">
                <description>Creates a new script element and adds it before a specified element in the DOM.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="Object">
                        <description>The text content for the script element. This value will be set via innerHTML once the new script element has been created</description>
                    </parameter>
                    <parameter name="elt" usage="required" type="Node">
                        <description>The element in the DOM before which the new script element will be inserted</description>
                    </parameter>
                    <parameter name="attributes" usage="optional" type="Object">
                        <description>A list of attributes and attribute values to apply to the new ScriptElement. Each property name will become the attribute name and each property value will become that attributes value. Note that no escaping is done on the attributes values, so it is expected those values are valid attribute values</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="ScriptElement">
                        <description>The new script element with content and attributes applied.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="replaceWithScript" scope="static">
                <description>Replace a specified element in the DOM with a new script element.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="contents" usage="required" type="Object">
                        <description>The text content for the script element. This value will be set via innerHTML once the new script element has been created</description>
                    </parameter>
                    <parameter name="elt" usage="required" type="Node">
                        <description>The element to replace with the a script element</description>
                    </parameter>
                    <parameter name="attributes" usage="optional" type="Object">
                        <description>A list of attributes and attribute values to apply to the new ScriptElement. Each property name will become the attribute name and each property value will become that attributes value. Note that no escaping is done on the attributes values, so it is expected those values are valid attribute values</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="ScriptElement">
                        <description>The new script element with content and attributes applied.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="toHTML" scope="static">
                <description>Returns the serialized HTML of the given node and its contents, much like the outerHTML property in IE. You can also pass the entire document as the node to get the entire HTML of the document (page).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="node" usage="required" type="Node">
                        <description>The HTML element or document (or DOM node) to be serialized</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The HTML text</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.DateTime" superclass="Object">
        <description>Namespace used to hold functions and other objects that extend JavaScript&apos;s datetime handling.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="toPaddedString" scope="static">
                <description>Converts a date to a string and pads the month and date values to align all date values in columns. Not yet internationalized.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="date" usage="required" type="Date">
                        <description>The source date</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The source data converted to a string with month and data values padded with spaces to align all values</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.File.Crypto" superclass="Object">
        <description>The namespace that holds functions for Cryptographic hashing of Files</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
    </class>
    <class type="Jaxer.Util.Math" superclass="Object">
        <description>Namespace used to hold functions and other objects that extend JavaScript&apos;s math capabilities</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="forceInteger" scope="static">
                <description>Forces num into a finite integer. If it&apos;s a string, it first attempts to parse it to an integer. If it&apos;s a number, it takes its integer part by applying Math.floor() to it. If it&apos;s anything else, o NaN (not a number), it uses the defaultNum or 0.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="num" usage="required" type="Object">
                        <description>The object to turn into an integer</description>
                    </parameter>
                    <parameter name="defaultNum" usage="required" type="Object">
                        <description>The integer to use as a default (which will itself be forced to be 0 if not an integer)</description>
                    </parameter>
                </parameters>
            </method>
            <method name="isInteger" scope="static">
                <description>Determine whether the specified value is an integer value</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="num" usage="required" type="Number">
                        <description>The number to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>Returns true if the number is an integer value</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.MultiHash" superclass="Object">
        <description>Namespace used to hold functions that create and manipulate a hash whose values are primitives or Arrays of primitives</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="add" scope="static">
                <description>Adds the name-value pair to the MultiHash: if the name does not exist, it is added with the given value; if the name exists, the previous value is turned into an Array, if needed, and then the given value is appended to it</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="multiHash" usage="required" type="Object">
                        <description>The multihash to which the name-value should be added</description>
                    </parameter>
                    <parameter name="name" usage="required" type="String">
                        <description>The name to use as a key</description>
                    </parameter>
                    <parameter name="value" usage="required" type="Object">
                        <description>The value to associate with the key -- it must not be an array</description>
                    </parameter>
                </parameters>
            </method>
            <method name="diff" scope="static">
                <description>Analyzes the first MultiHash relative to the second</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="after" usage="required" type="Object">
                        <description>The MultiHash whose changes we are interested in</description>
                    </parameter>
                    <parameter name="before" usage="required" type="Object">
                        <description>The MultiHash relative to which the changes have occurred</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The results of the analysis, an object with three properties: &apos;added&apos; is a hash of all the name-value pairs added; &apos;changed&apos; is a hash of all the name-value pairs that have changed (the value is the one in after); and &apos;deleted&apos; is a hash of all the name-value pairs that have been deleted (the value is the one in before, of course)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="remove" scope="static">
                <description>Removes the name-value pair from the MultiHash: if the name does not exist, or it does not have the value, nothing happens; if the name exists and has the value, that value is removed, and if no more values remain for that name, the name is removed</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="multiHash" usage="required" type="Object">
                        <description>The multihash from which the name-value should be removed</description>
                    </parameter>
                    <parameter name="name" usage="required" type="String">
                        <description>The name of the key</description>
                    </parameter>
                    <parameter name="value" usage="required" type="Object">
                        <description>The value to remove from the key -- it must not be an array</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.Stopwatch" superclass="Object">
        <description>The namespace that holds functions timing javascript</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="clocks" access="read-write" scope="static" type="Object">
                <description>A hashmap keyed by timer label, each element contains the timestamp last set.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="laps" access="read-write" scope="static" type="Object">
                <description>A hashmap keyed by lap label, each element contains the timestamp last set.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="timings" access="read-write" scope="static" type="Object">
                <description>A hashmap keyed by timer label, each element contains an Array of timing measurements.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="flush" scope="static">
                <description>This method is invoked to analyze/save/display the currently stored measurement timers. If no function parameter is provided then contents of the measurement timers are written to the logfile. If a function is provided then it is invoked with the timings hashmap (Jaxer.Util.Stopwatch.timings) as the only parameter.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="fn" usage="optional" type="Function">
                        <description>The provided function is executed before all current timers are cleared. The function is provided the timings hashmap (Jaxer.Util.Stopwatch.timings) as the only parameter.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="lap" scope="static">
                <description>A lap timer which will store the delta between each invocation for later analysis</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="label" usage="required" type="String">
                        <description>A label to uniquely identify this measurement timer</description>
                    </parameter>
                </parameters>
            </method>
            <method name="lapCount" scope="static">
                <description>This method returns the value of the lapcounter for the provided label.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="label" usage="required" type="String">
                        <description>A label to uniquely identify this measurement timer</description>
                    </parameter>
                </parameters>
            </method>
            <method name="reset" scope="static">
                <description>Reset all the currently managed timers</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </method>
            <method name="start" scope="static">
                <description>Start a timer for the provided label</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="label" usage="required" type="String">
                        <description>A label to uniquely identify this measurement timer</description>
                    </parameter>
                </parameters>
            </method>
            <method name="stop" scope="static">
                <description>Stops the current timer and stores the result for later analysis</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="label" usage="required" type="String">
                        <description>A label to uniquely identify this measurement timer</description>
                    </parameter>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.String" superclass="Object">
        <description>Namespace that holds functions and other objects that extend JavaScript&apos;s string capabilities.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="endsWith" scope="static">
                <description>Check to see if a string ends with a string</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="inString" usage="required" type="String">
                        <description>The string to look in</description>
                    </parameter>
                    <parameter name="lookFor" usage="required" type="String">
                        <description>The string to look for</description>
                    </parameter>
                    <parameter name="ignoreCase" usage="required" type="Boolean">
                        <description>Set to true for case insensitive searches</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the string ends with the provided string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="escapeForJS" scope="static">
                <description>Escapes an input string for use with javascript</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="raw" usage="required" type="String">
                        <description>The source string</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The escaped string suitable for use in an eval statement</description>
                    </return-type>
                </return-types>
            </method>
            <method name="escapeForSQL" scope="static">
                <description>Escapes an input string for use with SQL</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="raw" usage="required" type="String">
                        <description>The source string</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The escaped string suitable for use in a SQL query</description>
                    </return-type>
                </return-types>
            </method>
            <method name="grep" scope="static">
                <description>Searches the given lines for the given pattern, and returns the lines that matched.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="stringOrArray" usage="required" type="String">
                        <description>The string to search through, which will be split up into its lines, or an array of lines (i.e. a string that has already been split)</description>
                    </parameter>
                    <parameter name="pattern" usage="required" type="String">
                        <description>The string pattern to look for, which will be turned into a RegExp, or the RegExp to match</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String[]">
                        <description>An array of the lines that matched the pattern</description>
                    </return-type>
                </return-types>
            </method>
            <method name="singleQuote" scope="static">
                <description>Surround the provided string in single quotation marks</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="text" usage="required" type="String">
                        <description>The original string</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The original string encased in single quotes</description>
                    </return-type>
                </return-types>
            </method>
            <method name="startsWith" scope="static">
                <description>Check to see if a string starts with another string</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="inString" usage="required" type="String">
                        <description>The string to look in</description>
                    </parameter>
                    <parameter name="lookFor" usage="required" type="String">
                        <description>The string to look for</description>
                    </parameter>
                    <parameter name="ignoreCase" usage="required" type="Boolean">
                        <description>Set to true for case insensitive searches</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the string starts with the provided string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="trim" scope="static">
                <description>Left or right trim the provided string. Optionally, you can specify a list of characters (as a single string) to trim from the source string. By default, whitespace is removed. Also, you can control which side of the string (start or end) is trimmed with the default being both sides.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="str" usage="required" type="String">
                        <description>The source string</description>
                    </parameter>
                    <parameter name="charsToTrim" usage="optional" type="String">
                        <description>This optional parameter can be used to specify a list of characters to remove from the sides of the source string. Any combination of these characters will be removed. If this parameter is not specified, then all whitespace characters will be removed.</description>
                    </parameter>
                    <parameter name="leftOrRight" usage="optional" type="String">
                        <description>This optional parameter can be used to control which side of the string is trimmed. A value of &quot;L&quot; will trim the start of the string and all other string values will trim the end of the string. If this parameter is not specified, then both sides of the string will be trimmed</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The resulting trimmed string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="upperCaseToCamelCase" scope="static">
                <description>Convert a string to a CamelCase representation by removing interword spaces and capitalizing the first letter of each word following an underscore</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="orig" usage="required" type="String">
                        <description>The orignal string containing underscores between words</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The resulting string with underscores removed and the first letter of a word capitalized</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.Url" superclass="Object">
        <description>Namespace that holds functions and other objects for working with URLs.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <methods>
            <method name="combine" scope="static">
                <description>Combines any number of URL fragments into a single URL, using / as the separator. Before joining two fragments with the separator, it strips any existing separators on the fragment ends to be joined</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="..." usage="required" type="String">
                        <description>Takes any number of string URL fragments</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The fragments joined into a URL</description>
                    </return-type>
                </return-types>
            </method>
            <method name="ensureFileProtocol" scope="static">
                <description>If the given URL is already a file-type URL, it&apos;s returned untouched. Otherwise we turn it into a file-type URL by prefixing it with &quot;file://&quot;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL to apply this to</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>URL expressed as a file type URL</description>
                    </return-type>
                </return-types>
            </method>
            <method name="formUrlDecode" scope="static">
                <description>Decode a URL by replacing +&apos;s with spaces and all hex values (%xx) with their character value</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="str" usage="required" type="String">
                        <description>The source URL to decode</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The resulting URL after all hex values have been converted</description>
                    </return-type>
                </return-types>
            </method>
            <method name="formUrlEncode" scope="static">
                <description>Encode a URL by replacing all special characters with hex values (%xx)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="str" usage="required" type="String">
                        <description>The string to encode</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The resulting URL after special characters and spaces have been encoded</description>
                    </return-type>
                </return-types>
            </method>
            <method name="hashToQuery" scope="static">
                <description>Converts an object&apos;s properties and property values to a string suitable as a query string. Each property name becomes a key in the query string and each property value becomes the key value. A key and its value are separated by the &apos;=&apos; character. Each key/value pair is separated by &apos;&amp;&apos;. Note that each value is encoded so invalid URL characters are encoded properly.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="hash" usage="required" type="Object">
                        <description>The object to convert to a query string</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The resulting query string</description>
                    </return-type>
                </return-types>
            </method>
            <method name="isFile" scope="static">
                <description>Tests whether the given URL is a reasonable file URL rather than something that&apos;s available over the network.The test is pretty simplistic: the URL must start with file://, resource://, or chrome://, or it must contain a backslash (i.e. a Windows filesystem separator)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL to test</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>True if a reasonable file URL, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="parseUrl" scope="static">
                <description>Parse a string containing a URL into a Jaxer.Util.Url.ParsedUrl object to allow manipulation of the individual URL component parts</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL to parse</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Util.Url.ParsedUrl">
                        <description>The parts of a URL broken down into useful pieces</description>
                    </return-type>
                </return-types>
            </method>
            <method name="parseUrlComponents" scope="static">
                <description>Create a Util.Url.ParsedUrl object from the component pieces provided as parameters to the functions calls.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="hostAndPort" usage="required" type="String">
                        <description>The host (and port, if any) containing the given path</description>
                    </parameter>
                    <parameter name="absolutePath" usage="required" type="String">
                        <description>The absolute path to a resource on the host</description>
                    </parameter>
                    <parameter name="protocol" usage="optional" type="String">
                        <description>The protocol (&apos;http&apos; or &apos;https&apos;); the default is &apos;http&apos;</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Util.Url.ParsedUrl">
                        <description>The parts of a URL broken down into useful pieces</description>
                    </return-type>
                </return-types>
            </method>
            <method name="queryToHash" scope="static">
                <description>Divides the key/value pairs in a query string and builds an object for these values. The key will become the property name of the object and the value will become the value of that property</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="query" usage="required" type="String">
                        <description>A query string</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Util.Url.ParsedUrl" superclass="Object">
        <description>An object describing the parsed pieces of a URL.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>An object describing the parsed pieces of a URL. This object contains sub properties to allow access to the individual pieces of the URL</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.Util.Url.ParsedUrl">
                        <description>Returns an instance of ParsedUrl.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="authority" access="read-write" scope="instance" type="String">
                <description>The complete authority (e.g. &apos;user1@www.aptana.com:8081&apos;), or &apos;&apos; if not specified. Note that the userInfo (&apos;user1&apos;) and/or the port (&apos;8081&apos;) may not be present.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="base" access="read-write" scope="instance" type="String">
                <description>The protocol, userInfo, host, and port (e.g. &apos;http://user1@www.aptana.com:8081&apos;), which might not have a protocol or a port if they were not specified</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="domain" access="read-write" scope="instance" type="String">
                <description>The highest-level non-TLD domain (e.g. &apos;aptana.com&apos; in &apos;www.playground.aptana.com&apos;), or the IP address if the host was an IP address</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="fragment" access="read-write" scope="instance" type="String">
                <description>The fragment string (e.g. &apos;myBookmark&apos;) after the # symbol (e.g. # myBookmark), or &apos;&apos; if not specified</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="host" access="read-write" scope="instance" type="String">
                <description>The host (e.g. &apos;www.aptana.com&apos;), or &apos;&apos; if not specified.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="hostAndPort" access="read-write" scope="instance" type="String">
                <description>The combined host and port (e.g. &apos;www.aptana.com:8081&apos;), which might be just the host if no port was specified. A synonym for the authority property.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="leaf" access="read-write" scope="instance" type="String">
                <description>The last part of the path, namely everything after the last / and before any query or fragment (e.g. &quot;logo.png&quot; in &apos;http://www.aptana.com/images/small/logo.png?v=12&apos;). If the path ends in a trailing /, this is the empty string. And if the path is completely absent, this is null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="path" access="read-write" scope="instance" type="String">
                <description>The entire path (e.g. &apos;/images/myImage.gif&apos;) between the hostAndPort and the query string or fragment (if any), or &apos;&apos; if none</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="pathParts" access="read-write" scope="instance" type="Array">
                <description>A possibly-empty array of strings that compose the path part of the URL (e.g. [ &quot;images&quot;, &quot;small&quot;, &quot;logo.png&quot; ] in &apos;http://www.aptana.com/images/small/logo.png?v=12&apos;). Note that if the path ends in a /, the last element in the pathParts array (a.k.a. the leaf) will be the empty string.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="port" access="read-write" scope="instance" type="String">
                <description>The port as a string (e.g. &apos;80&apos;), or &apos;&apos; if not specified</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="protocol" access="read-write" scope="instance" type="String">
                <description>The protocol (typically &apos;http&apos; or &apos;https&apos;), or &apos;&apos; if not specified. A synonym for the scheme property.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="query" access="read-write" scope="instance" type="String">
                <description>The query string (e.g. &apos;name=joe&amp;id=12&apos;) after the (first) question mark (?), or &apos;&apos; if not specified</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="queryParts" access="read-write" scope="instance" type="Object">
                <description>An object containing a property for each name=value pair in the query string of the URL, e.g. &apos;http://www.aptana.com/staff?name=joe&amp;id=12&apos; leads to queryParts.name = &quot;joe&quot; and queryParts.id = &quot;12&quot;</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="scheme" access="read-write" scope="instance" type="String">
                <description>The scheme (typically &apos;http&apos; or &apos;https&apos;), or &apos;&apos; if not specified. A synonym for the protocol property.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="subdomain" access="read-write" scope="instance" type="String">
                <description>The subdomain (e.g. &apos;www.playground&apos; in &apos;www.playground.aptana.com&apos;) before the domain, or &apos;&apos; if none or if the host was an IP address</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="url" access="read-write" scope="instance" type="String">
                <description>The complete (but whitespace-trimmed) original URL, before parsing</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="userInfo" access="read-write" scope="instance" type="String">
                <description>The userInfo in the URL (e.g. &apos;user1&apos; in &apos;user1@www.aptana.com&apos;), or &apos;&apos; if not specified.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.Web" superclass="Object">
        <description>Namespace object holding functions and members used to resolve and fetch web resources. Fetching is done via XMLHttpRequests.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="ACTIONS" access="read-write" scope="static" type="Object">
                <description>An enumeration of constants for various standard HTTP methods or actions</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="getDefaultReferenceUrl" visibility="advanced" scope="static">
                <description>Returns the URL to be used as a reference for resolving relative URLs if no other reference is given&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="String">
                        <description>The absolute URL</description>
                    </return-type>
                </return-types>
            </method>
            <method name="del" scope="static">
                <description>Send a DELETE-type HTTP request to a URL and return the response.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL of the page to send the request. This will first be resolved by Web.resolve().</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Jaxer.XHR.SendOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The text of the response, or the XML DOM if the response was an XML document. Set the &quot;as&quot; property in the options argument to &quot;text&quot; or &quot;xml&quot; to force what is returned. An Exception is thrown if not successful.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="get" scope="static">
                <description>Fetch a document from a URL by resolving it to a local file (if it starts with file://) or by a GET command.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL to fetch, which may be a file:// URL if desired. This will first be resolved by Dir.resolve() or Web.resolve().</description>
                    </parameter>
                    <parameter name="options" usage="required" type="Jaxer.XHR.SendOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The text of the requested document, or the XML DOM if the response was an XML document. Set the &quot;as&quot; property in the options argument to &quot;text&quot; or &quot;xml&quot; to force what is returned. An Exception is thrown if not successful.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="head" scope="static">
                <description>Send a HEAD-type HTTP request to a URL and return the response.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL of the page to send the request. This will first be resolved by Web.resolve().</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Jaxer.XHR.SendOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The text of the response, or the XML DOM if the response was an XML document. Set the &quot;as&quot; property in the options argument to &quot;text&quot; or &quot;xml&quot; to force what is returned. An Exception is thrown if not successful.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="open" scope="static">
                <description>GET or POST data to a URL, loading the result into the window of a new Jaxer.Sandbox object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Sandbox"/>
                </references>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL of the page to GET or POST to. This will first be resolved by Web.resolve().</description>
                    </parameter>
                    <parameter name="data" usage="optional" type="String">
                        <description>The data to submit, if any. If this parameter is omitted or is null, a GET is used; otherwise a POST is used. If this is a string, it should usually be a query string in a format (name1=value1&amp;name2=value2) suitable for a Content-Type of &apos;application/x-www-form-urlencoded&apos;. If an object, its enumerable properties will be used to construct the query string.</description>
                    </parameter>
                    <parameter name="options" usage="required" type="Jaxer.Sandbox.OpenOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Jaxer.Sandbox">
                        <description>The Sandbox, which will usually have a window and document in it (if the request was successful and returned an HTML page)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="options" scope="static">
                <description>Send an OPTIONS-type HTTP request to a URL and return the response.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL of the page to send the request. This will first be resolved by Web.resolve().</description>
                    </parameter>
                    <parameter name="data" usage="required" type="String">
                        <description>The data to submit. If a string, it should be a query string in a format (name1=value1&amp;name2=value2) suitable for a Content-Type of &apos;application/x-www-form-urlencoded&apos;. If an object, its enumerable properties will be used to construct the query string.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Jaxer.XHR.SendOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The text of the response, or the XML DOM if the response was an XML document. Set the &quot;as&quot; property in the options argument to &quot;text&quot; or &quot;xml&quot; to force what is returned. An Exception is thrown if not successful.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="post" scope="static">
                <description>POST data to a URL and return the response web page.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL of the page to POST to and fetch. This will first be resolved by Web.resolve().</description>
                    </parameter>
                    <parameter name="data" usage="required" type="String">
                        <description>The data to submit. If a string, it should be a query string in a format (name1=value1&amp;name2=value2) suitable for a Content-Type of &apos;application/x-www-form-urlencoded&apos;. If an object, its enumerable properties will be used to construct the query string.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Jaxer.XHR.SendOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The text of the response, or the XML DOM if the response was an XML document. Set the &quot;as&quot; property in the options argument to &quot;text&quot; or &quot;xml&quot; to force what is returned. An Exception is thrown if not successful.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="put" scope="static">
                <description>Send a PUT-type HTTP request to a URL and return the response.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL of the page to send the request. This will first be resolved by Web.resolve().</description>
                    </parameter>
                    <parameter name="data" usage="required" type="String">
                        <description>The data to submit. If a string, it should be a query string in a format (name1=value1&amp;name2=value2) suitable for a Content-Type of &apos;application/x-www-form-urlencoded&apos;. If an object, its enumerable properties will be used to construct the query string.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Jaxer.XHR.SendOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The text of the response, or the XML DOM if the response was an XML document. Set the &quot;as&quot; property in the options argument to &quot;text&quot; or &quot;xml&quot; to force what is returned. An Exception is thrown if not successful.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="resolve" scope="static">
                <description>Resolves a URL to an absolute URL (one starting with protocol://domain...) To resolve a relative URL (with or without a leading /), use a current document or callback for reference. Uses the base href of the current document, if specified. If Jaxer.Config.REWRITE_TO_FILE_URL_REGEX exists and matches the url, the url is resolved as a file-type URL: it will use the given referenceUrl if it&apos;s already a file-based one, otherwise it will use the Jaxer.request.documentRoot for an absolute url or Jaxer.request.currentFolder for a relative url. If Jaxer.Config.REWRITE_RELATIVE_URL exists (and we&apos;re not dealing in file-based URLs), its value is used to rewrite the relative url -- replacing Jaxer.Config.REWRITE_RELATIVE_URL_REGEX pattern, if it exists, else replacing http [ s ] :// followed by anything but a slash.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The URL to resolve</description>
                    </parameter>
                    <parameter name="referenceUrl" usage="optional" type="String">
                        <description>An optional reference URL to use, overriding the built-in logic</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>The fully-resolved URL, or the original URL if the input was already an absolute URL</description>
                    </return-type>
                </return-types>
            </method>
            <method name="send" scope="static">
                <description>A generalized method to access a web URL via the built-in XMLHttpRequest object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="url" usage="required" type="String">
                        <description>The url to access</description>
                    </parameter>
                    <parameter name="method" usage="optional" type="String">
                        <description>Usually &apos;GET&apos; (default) or &apos;POST&apos;</description>
                    </parameter>
                    <parameter name="data" usage="optional" type="String">
                        <description>Use for POST submissions, or for GET requests if the url does not already contain the data. This may be a string (usually of the form name1=value&amp;name2=value), or an object whose name-&gt;value property pairs will be used to construct such a string.</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Jaxer.XHR.SendOptions">
                        <description>Options for finer control of how the request is made.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>The text of the requested document, or the XML DOM if the response was an XML document. Set the &quot;as&quot; property in the options argument to &quot;text&quot; or &quot;xml&quot; or &quot;e4x&quot; to force what is returned. An Exception is thrown if not successful.</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.Web.ACTIONS" superclass="Object">
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="DELETE" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP DELETE method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="GET" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP GET method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="HEAD" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP HEAD method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="OPTIONS" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP OPTIONS method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="POST" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP POST method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="PUT" access="read-write" scope="static" type="String">
                <description>A constant describing the standard HTTP PUT method (or action)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.XHR" superclass="Object">
        <description>Namespace to hold the Jaxer client-side cross-browser wrapper around XMLHttpRequest.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="REASON_FAILURE" access="read-write" scope="static" visibility="advanced" type="String">
                <description>The value of the &quot;reason&quot; property that indicates a communication failure has occurred. This property is set on the Error object that&apos;s thrown by XHR.send() during synchronous requests that don&apos;t use the onsuccess function but rather just return a response or throw an Error.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="REASON_TIMEOUT" access="read-write" scope="static" visibility="advanced" type="String">
                <description>The value of the &quot;reason&quot; property that indicates a timeout has occurred. This property is set on the Error object that&apos;s thrown by XHR.send() during synchronous requests that don&apos;t use the onsuccess function but rather just return a response or throw an Error.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="defaults" access="read-write" scope="static" type="Jaxer.XHR.SendOptions">
                <description>The default SendOptions which new calls to Jaxer.XHR.send(message, options, extra) will use, unless overridden by the options argument. This is slightly different for client-side and server-side requests (e.g. server-side requests are by default synchronous).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
        <methods>
            <method name="getTransport" visibility="advanced" scope="static">
                <description>Returns an XMLHttpRequest object by calling the platform-specific API for it. On the server side of Jaxer, the XPCOM version of XMLHttpRequest is used.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="XMLHttpRequest"/>
                </return-types>
            </method>
            <method name="onfailure" visibility="advanced" scope="static">
                <description>The default client-side function used to handle any errors that occur during XMLHttpRequest processing by throwing an error describing them&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="error" usage="required" type="Object">
                        <description>An error object describing the error, if one was thrown. Otherwise this is null.</description>
                    </parameter>
                    <parameter name="extra" usage="required" type="Object">
                        <description>Any extra information passed into Jaxer.XHR.send(), e.g. to make error messages more informative.</description>
                    </parameter>
                    <parameter name="xhr" usage="required" type="XMLHttpRequest">
                        <description>The XMLHttpRequest object that contains the information received from the server, e.g. in xhr.status and xhr.responseText. It may be null if an error was encountered creating it.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="ontimeout" visibility="advanced" scope="static">
                <description>The default client-side function used to handle any timeout errors that occur during XMLHttpRequest processing by throwing an error describing them&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="timeout" usage="required" type="Error">
                        <description>The timeout error object encountered, having a &quot;timeout&quot; property with its value indicating the timeout (in milliseconds) used in this request.</description>
                    </parameter>
                    <parameter name="extra" usage="required" type="Object">
                        <description>Any extra information passed into Jaxer.XHR.send(), e.g. to make error messages more informative.</description>
                    </parameter>
                    <parameter name="xhr" usage="required" type="XMLHttpRequest">
                        <description>The XMLHttpRequest object that contains the information received from the server, e.g. in xhr.status and xhr.responseText. It may be null if an error was encountered creating it.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="testSuccess" visibility="advanced" scope="static">
                <description>The default function used to test whether the XMLHttpRequest got a successful response or not, in particular using xhr.status, location.protocol and some browser sniffing.&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="xhr" usage="required" type="XMLHttpRequest">
                        <description>The XMLHttpRequest object that got the response</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if successful, false otherwise</description>
                    </return-type>
                </return-types>
            </method>
            <method name="cancel" scope="static">
                <description>Cancels the pending async XMLHttpRequest if its response has not yet been received and if it has not yet timed out.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="asyncKey" usage="required" type="Number">
                        <description>The key that Jaxer.XHR.send() returned when the request was created.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean">
                        <description>true if the request was found and canceled, false if it was not found (i.e. was not in the pending queue)</description>
                    </return-type>
                </return-types>
            </method>
            <method name="send" scope="static">
                <description>The generic function used to send requests via XMLHttpRequest objects. Each request gets its own XMLHttpRequest object, and async requests hold onto that object until they&apos;re finished or timed out or canceled. On the server side of Jaxer, only synchronous requests are supported. &lt;br&gt;&lt;br&gt; For async requests, this returns a key that can be used to abort the request via Jaxer.XHR.cancel(). &lt;br&gt;&lt;br&gt; For synchronous requests, returns the response of the server or throws an exception if an error occurred, unless an onsuccess function was specified in the options, in which case it passes the response to that function and also handles any errors through the onfailure function if specified in the options. &lt;br&gt;&lt;br&gt; In any case, the response can be a text string or an XML DOM. To force one or the other, set the &quot;as&quot; property on the options argument, e.g. if as=&quot;text&quot; it will definitely be a text string, if as=&quot;xml&quot; it will definitely be an XML DOM, and if as=&quot;e4x&quot; it will be an E4X DOM (if E4X is supported -- which is always the case server-side but may not be client-side).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <parameters>
                    <parameter name="message" usage="required" type="String">
                        <description>The message to send, usually as a query string (&quot;name1=value&amp;name2=value2...&quot;)</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Jaxer.XHR.SendOptions">
                        <description>A JavaScript object (hashmap) of name: value property pairs specifying how to handle this request.</description>
                    </parameter>
                    <parameter name="extra" usage="required" type="Object">
                        <description>Any extra information that might be useful e.g. in the error handlers on this request. This object is simply passed on to them if/when they&apos;re called. E.g. Jaxer.Callback uses this information to pass the name of the function being called remotely, so error messages can be more informative.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object">
                        <description>For async requests, a key to the XHR object; for synchronous requests (with no onsuccess handler in the options), a text string or an XML DOM, or an object containing detailed information about the response (if the options specified extendedResponse=true)</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="Jaxer.XHR.ResponseData" superclass="Object">
        <description>A hashmap containing detaild information about the response from an XHR.send.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>A hashmap containing detailed information about the response from an XHR.send. This is returned as the response of XHR.send when the SendOptions specify extendedResponse=true.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.XHR.ResponseData">
                        <description>Returns an instance of ResponseData.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="certInfo" access="read-write" scope="instance" type="Jaxer.Util.Certificate.CertInfo">
                <description>Information about the SSL certificate used in this request-response. This is only available server-side. NOTE: currently this is only available when an SSL certificate error was encountered, and the onsslcerterror function was set and returned true.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.XHR.SendOptions.prototype.onsslcerterror"/>
                </references>
            </property>
            <property name="cookies" access="read-write" scope="instance" type="Array">
                <description>An array of cooky directives indicated in the response via the &quot;Set-Cookie&quot; header. Each cookie is represented by an object with properties corresponding to its name, value, expires, path, and domain.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Util.Cookie.parseSetCookieHeaders"/>
                </references>
            </property>
            <property name="extra" access="read-write" scope="instance" type="Object">
                <description>The value of the &quot;extra&quot; parameter, if any, passed into XHR.send.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="headers" access="read-write" scope="instance" type="Object">
                <description>A hashmap containing properties corresponding to the names of the response headers. For each property, if the header name was present multiple times in the response, the value of the property is an array of the corresponding header values; otherwise, the value of the property is the value of the header.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="response" access="read-write" scope="instance" type="Object">
                <description>The responseText string or responseXML XMLDocument of the response, depending on the SendOptions and the returned content type</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="status" access="read-write" scope="instance" type="Number">
                <description>The HTTP status code of the response (e.g. 200)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="statusText" access="read-write" scope="instance" type="String">
                <description>The HTTP status text of the response (e.g. &quot;OK&quot;)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="text" access="read-write" scope="instance" type="String">
                <description>The responseText of the response, or null if none</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="xhr" access="read-write" scope="instance" type="XMLHttpRequest">
                <description>The XMLHttpRequest object used in the request-response</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="xml" access="read-write" scope="instance" type="XMLDocument">
                <description>The responseXML of the response, or null if none</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
    <class type="Jaxer.XHR.SendOptions" superclass="Object">
        <description>Options used to define the behavior of Jaxer.XHR.send.</description>
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <constructors>
            <constructor scope="instance">
                <description>Options used to define the behavior of Jaxer.XHR.send. Create a new Jaxer.XHR.SendOptions() to get the default options, then modify its properties as needed before passing it to Jaxer.XHR.send.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <return-types>
                    <return-type type="Jaxer.XHR.SendOptions">
                        <description>Returns an instance of SendOptions.</description>
                    </return-type>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="pollingPeriod" access="read-write" scope="instance" visibility="advanced" type="Number">
                <description>For async requests, the number of milliseconds between polling for onreadystatechange, by default 11&lt;br&gt;&lt;br&gt;(Advanced)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="as" access="read-write" scope="instance" type="String">
                <description>Set to &quot;text&quot; to force interpreting the response as text regardless of mimetype. Set to &quot;xml&quot; to force interpreting the response as XML regardless of mimetype and returning the XML as an XML (DOM) object via XMLHttpRequest.responseXML. Set to null to not force anything - see overrideMimeType and responseType for finer control.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="async" access="read-write" scope="instance" type="Boolean">
                <description>Set to true for asynchronous, false for synchronous. By default it&apos;s true client-side and false server-side. To use it server-side, see also Jaxer.Thread.waitFor.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.Thread.waitFor"/>
                </references>
            </property>
            <property name="cacheBuster" access="read-write" scope="instance" type="Boolean">
                <description>If true (default, client-side), a random name and value query pair will be appended to the URL on each call</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="contentType" access="read-write" scope="instance" type="String">
                <description>The content type of the request being sent (by default &quot;application/x-www-form-urlencoded&quot;)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="getTransport" access="read-write" scope="instance" type="Function">
                <description>The function to use to create the XMLHttpRequest, by default XHR.getTransport</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="headers" access="read-write" scope="instance" type="Object">
                <description>Set to null to use default headers; set to an array of [ name, value ] arrays to use custom headers instead, or to an object containing properties to use as the headers</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="method" access="read-write" scope="instance" type="String">
                <description>Should be &quot;GET&quot; (default, server-side) or &quot;POST&quot; (default, client-side)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="onfailure" access="read-write" scope="instance" type="Function">
                <description>Set to a custom callback function to call if unsuccessful (by default set to Jaxer.XHR.onfailure client-side). Its arguments are the error encountered, the &quot;extra&quot; information from the caller, and the XHR instance.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="onfinished" access="read-write" scope="instance" type="Function">
                <description>Set to a custom function to call when done receiving (or timed out), usually to abort()</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="onreadytosend" access="read-write" scope="instance" type="Function">
                <description>Set to a custom function to call just before sending (e.g. to set custom headers, mimetype, keep reference to xhr object, etc.)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="onsslcerterror" access="read-write" scope="instance" type="Function">
                <description>Set to a custom callback function to call if an SSL request fails due to a certificate error. Its arguments are the certInfo (an object containing properties describing the certificate and its status), the cert, and the XHR&apos;s socketInfo, sslStatus, and targetSite. It should return true to ignore the error, or false to abort the request. This is only available server-side. If (and only if) this is set to a function that returns true, information about the failure can be retrieved from the extended response&apos;s certInfo property.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.XHR.ResponseData.prototype.certInfo"/>
                    <reference name="Jaxer.Util.Certificate.CertInfo"/>
                </references>
            </property>
            <property name="onsuccess" access="read-write" scope="instance" type="Function">
                <description>Set to a function to call if successful. Its arguments are the response received back from the server, and any &quot;extra&quot; information passed in when calling send(). For synchronous calls, you can optionally set onsuccess to null to have XHR.send() return a value directly (and throw errors on failure/timeout).</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="ontimeout" access="read-write" scope="instance" type="Function">
                <description>Set to a custom timeout function to call if timeout is used and the async request has timed out. Its arguments are the timeout error encountered, the &quot;extra&quot; information from the caller, and the XHR instance.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="overrideMimeType" access="read-write" scope="instance" type="String">
                <description>Set to null to use whatever mimetype the server sends in the response; set to a mimetype string (e.g. &quot;text/plain&quot;) to force the response to be interpreted using the given mimetype</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="password" access="read-write" scope="instance" type="String">
                <description>If the target URL requires authentication, specify this password, otherwise leave this as null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="responseText" access="read-write" scope="instance" type="String">
                <description>Set to &quot;text&quot; (default) to use the responseText, to &quot;xml&quot; to use the responseXML, or &quot;auto&quot; to use the response&apos;s content-type to choose</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="testSuccess" access="read-write" scope="instance" type="Function">
                <description>Set to a custom function that receives the XMLHttpRequest (after readyState == 4) and tests whether it succeeded (by default Jaxer.XHR.testSuccess)</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="timeout" access="read-write" scope="instance" type="Number">
                <description>For async (client-side) requests, set to number of milliseconds before timing out, or 0 to wait indefinitely</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.XHR.defaults.timeout"/>
                    <reference name="Jaxer.XHR.SendOptions.DEFAULT_TIMEOUT"/>
                </references>
            </property>
            <property name="url" access="read-write" scope="instance" type="String">
                <description>The URL to which the XMLHttpRequest is to be sent. On the client side, defaults to Jaxer.CALLBACK_URI which is used to handle function callbacks from client-side proxies to their server-side counterparts.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="username" access="read-write" scope="instance" type="String">
                <description>If the target URL requires authentication, specify this username, otherwise leave this as null.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
            <property name="extendedResponse" access="read-write" scope="static" type="Boolean">
                <description>If this is set to true, the response returned directly or passed to an onsuccess handler will contain detailed information about the response, in the form of a Jaxer.XHR.ResponseData object.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
                <references>
                    <reference name="Jaxer.XHR.ResponseData"/>
                </references>
            </property>
        </properties>
    </class>
    <class type="Jaxer.defaults" superclass="Object">
        <browsers>
            <browser platform="Jaxer Server Framework" version="1.0"/>
            <browser platform="Jaxer Client Framework" version="1.0"/>
        </browsers>
        <properties>
            <property name="timeout" access="read-write" scope="static" type="Number">
                <description>The default value to use when creating new Jaxer.XHR (XMLHttpRequest) requests, in milliseconds. This also applies to anything that uses XHRs, such as Jaxer.Web.get. It&apos;s only used for async requests. It defaults to 30 seconds (30000) on the server, and 0 on the client. 0 means no timeout. NOTE: To set the the default timeout to use when creating new XHR.SendOptions() objects, set Jaxer.XHR.SendOptions.timeout instead.</description>
                <browsers>
                    <browser platform="Jaxer Server Framework" version="1.0"/>
                    <browser platform="Jaxer Client Framework" version="1.0"/>
                </browsers>
            </property>
        </properties>
    </class>
</javascript>
